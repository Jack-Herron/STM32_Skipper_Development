
Skipper Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009bc  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000b64  08000b74  00010b74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000b64  08000b64  00010b74  2**0
                  CONTENTS
  4 .ARM          00000008  08000b64  08000b64  00010b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000b6c  08000b74  00010b74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b6c  08000b6c  00010b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b70  08000b70  00010b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010b74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010b74  2**0
                  CONTENTS
 10 .bss          00000028  20000000  20000000  00020000  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000028  20000028  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010b74  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010ba4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000dfb  00000000  00000000  00010be7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000003b1  00000000  00000000  000119e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000f0  00000000  00000000  00011d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000a6  00000000  00000000  00011e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001913c  00000000  00000000  00011f2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001775  00000000  00000000  0002b06a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0008c97d  00000000  00000000  0002c7df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000308  00000000  00000000  000b915c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  000b9464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000b4c 	.word	0x08000b4c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000b4c 	.word	0x08000b4c

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b970 	b.w	80004e0 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9e08      	ldr	r6, [sp, #32]
 800021e:	460d      	mov	r5, r1
 8000220:	4604      	mov	r4, r0
 8000222:	460f      	mov	r7, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14a      	bne.n	80002be <__udivmoddi4+0xa6>
 8000228:	428a      	cmp	r2, r1
 800022a:	4694      	mov	ip, r2
 800022c:	d965      	bls.n	80002fa <__udivmoddi4+0xe2>
 800022e:	fab2 f382 	clz	r3, r2
 8000232:	b143      	cbz	r3, 8000246 <__udivmoddi4+0x2e>
 8000234:	fa02 fc03 	lsl.w	ip, r2, r3
 8000238:	f1c3 0220 	rsb	r2, r3, #32
 800023c:	409f      	lsls	r7, r3
 800023e:	fa20 f202 	lsr.w	r2, r0, r2
 8000242:	4317      	orrs	r7, r2
 8000244:	409c      	lsls	r4, r3
 8000246:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024a:	fa1f f58c 	uxth.w	r5, ip
 800024e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000252:	0c22      	lsrs	r2, r4, #16
 8000254:	fb0e 7711 	mls	r7, lr, r1, r7
 8000258:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800025c:	fb01 f005 	mul.w	r0, r1, r5
 8000260:	4290      	cmp	r0, r2
 8000262:	d90a      	bls.n	800027a <__udivmoddi4+0x62>
 8000264:	eb1c 0202 	adds.w	r2, ip, r2
 8000268:	f101 37ff 	add.w	r7, r1, #4294967295
 800026c:	f080 811c 	bcs.w	80004a8 <__udivmoddi4+0x290>
 8000270:	4290      	cmp	r0, r2
 8000272:	f240 8119 	bls.w	80004a8 <__udivmoddi4+0x290>
 8000276:	3902      	subs	r1, #2
 8000278:	4462      	add	r2, ip
 800027a:	1a12      	subs	r2, r2, r0
 800027c:	b2a4      	uxth	r4, r4
 800027e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000282:	fb0e 2210 	mls	r2, lr, r0, r2
 8000286:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028a:	fb00 f505 	mul.w	r5, r0, r5
 800028e:	42a5      	cmp	r5, r4
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x90>
 8000292:	eb1c 0404 	adds.w	r4, ip, r4
 8000296:	f100 32ff 	add.w	r2, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x294>
 800029e:	42a5      	cmp	r5, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x294>
 80002a4:	4464      	add	r4, ip
 80002a6:	3802      	subs	r0, #2
 80002a8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ac:	1b64      	subs	r4, r4, r5
 80002ae:	2100      	movs	r1, #0
 80002b0:	b11e      	cbz	r6, 80002ba <__udivmoddi4+0xa2>
 80002b2:	40dc      	lsrs	r4, r3
 80002b4:	2300      	movs	r3, #0
 80002b6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0xbc>
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	f000 80ed 	beq.w	80004a2 <__udivmoddi4+0x28a>
 80002c8:	2100      	movs	r1, #0
 80002ca:	e9c6 0500 	strd	r0, r5, [r6]
 80002ce:	4608      	mov	r0, r1
 80002d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d4:	fab3 f183 	clz	r1, r3
 80002d8:	2900      	cmp	r1, #0
 80002da:	d149      	bne.n	8000370 <__udivmoddi4+0x158>
 80002dc:	42ab      	cmp	r3, r5
 80002de:	d302      	bcc.n	80002e6 <__udivmoddi4+0xce>
 80002e0:	4282      	cmp	r2, r0
 80002e2:	f200 80f8 	bhi.w	80004d6 <__udivmoddi4+0x2be>
 80002e6:	1a84      	subs	r4, r0, r2
 80002e8:	eb65 0203 	sbc.w	r2, r5, r3
 80002ec:	2001      	movs	r0, #1
 80002ee:	4617      	mov	r7, r2
 80002f0:	2e00      	cmp	r6, #0
 80002f2:	d0e2      	beq.n	80002ba <__udivmoddi4+0xa2>
 80002f4:	e9c6 4700 	strd	r4, r7, [r6]
 80002f8:	e7df      	b.n	80002ba <__udivmoddi4+0xa2>
 80002fa:	b902      	cbnz	r2, 80002fe <__udivmoddi4+0xe6>
 80002fc:	deff      	udf	#255	; 0xff
 80002fe:	fab2 f382 	clz	r3, r2
 8000302:	2b00      	cmp	r3, #0
 8000304:	f040 8090 	bne.w	8000428 <__udivmoddi4+0x210>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2101      	movs	r1, #1
 8000314:	fbb2 f5f7 	udiv	r5, r2, r7
 8000318:	fb07 2015 	mls	r0, r7, r5, r2
 800031c:	0c22      	lsrs	r2, r4, #16
 800031e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000322:	fb0e f005 	mul.w	r0, lr, r5
 8000326:	4290      	cmp	r0, r2
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x124>
 800032a:	eb1c 0202 	adds.w	r2, ip, r2
 800032e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x122>
 8000334:	4290      	cmp	r0, r2
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2b8>
 800033a:	4645      	mov	r5, r8
 800033c:	1a12      	subs	r2, r2, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb2 f0f7 	udiv	r0, r2, r7
 8000344:	fb07 2210 	mls	r2, r7, r0, r2
 8000348:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x14e>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 32ff 	add.w	r2, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x14c>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2c2>
 8000364:	4610      	mov	r0, r2
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800036e:	e79f      	b.n	80002b0 <__udivmoddi4+0x98>
 8000370:	f1c1 0720 	rsb	r7, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa05 f401 	lsl.w	r4, r5, r1
 8000382:	fa20 f307 	lsr.w	r3, r0, r7
 8000386:	40fd      	lsrs	r5, r7
 8000388:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038c:	4323      	orrs	r3, r4
 800038e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	fb09 5518 	mls	r5, r9, r8, r5
 800039a:	0c1c      	lsrs	r4, r3, #16
 800039c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a0:	fb08 f50e 	mul.w	r5, r8, lr
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	fa00 f001 	lsl.w	r0, r0, r1
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b0>
 80003b0:	eb1c 0404 	adds.w	r4, ip, r4
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2b4>
 80003bc:	42a5      	cmp	r5, r4
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2b4>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4464      	add	r4, ip
 80003c8:	1b64      	subs	r4, r4, r5
 80003ca:	b29d      	uxth	r5, r3
 80003cc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d0:	fb09 4413 	mls	r4, r9, r3, r4
 80003d4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003dc:	45a6      	cmp	lr, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1da>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2ac>
 80003ea:	45a6      	cmp	lr, r4
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2ac>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	4464      	add	r4, ip
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fba3 9502 	umull	r9, r5, r3, r2
 80003fa:	eba4 040e 	sub.w	r4, r4, lr
 80003fe:	42ac      	cmp	r4, r5
 8000400:	46c8      	mov	r8, r9
 8000402:	46ae      	mov	lr, r5
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x29c>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x298>
 8000408:	b156      	cbz	r6, 8000420 <__udivmoddi4+0x208>
 800040a:	ebb0 0208 	subs.w	r2, r0, r8
 800040e:	eb64 040e 	sbc.w	r4, r4, lr
 8000412:	fa04 f707 	lsl.w	r7, r4, r7
 8000416:	40ca      	lsrs	r2, r1
 8000418:	40cc      	lsrs	r4, r1
 800041a:	4317      	orrs	r7, r2
 800041c:	e9c6 7400 	strd	r7, r4, [r6]
 8000420:	4618      	mov	r0, r3
 8000422:	2100      	movs	r1, #0
 8000424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000428:	f1c3 0120 	rsb	r1, r3, #32
 800042c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000430:	fa20 f201 	lsr.w	r2, r0, r1
 8000434:	fa25 f101 	lsr.w	r1, r5, r1
 8000438:	409d      	lsls	r5, r3
 800043a:	432a      	orrs	r2, r5
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb1 f0f7 	udiv	r0, r1, r7
 8000448:	fb07 1510 	mls	r5, r7, r0, r1
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000452:	fb00 f50e 	mul.w	r5, r0, lr
 8000456:	428d      	cmp	r5, r1
 8000458:	fa04 f403 	lsl.w	r4, r4, r3
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x258>
 800045e:	eb1c 0101 	adds.w	r1, ip, r1
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b0>
 8000468:	428d      	cmp	r5, r1
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b0>
 800046c:	3802      	subs	r0, #2
 800046e:	4461      	add	r1, ip
 8000470:	1b49      	subs	r1, r1, r5
 8000472:	b292      	uxth	r2, r2
 8000474:	fbb1 f5f7 	udiv	r5, r1, r7
 8000478:	fb07 1115 	mls	r1, r7, r5, r1
 800047c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000480:	fb05 f10e 	mul.w	r1, r5, lr
 8000484:	4291      	cmp	r1, r2
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x282>
 8000488:	eb1c 0202 	adds.w	r2, ip, r2
 800048c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2a8>
 8000492:	4291      	cmp	r1, r2
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2a8>
 8000496:	3d02      	subs	r5, #2
 8000498:	4462      	add	r2, ip
 800049a:	1a52      	subs	r2, r2, r1
 800049c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0xfc>
 80004a2:	4631      	mov	r1, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e708      	b.n	80002ba <__udivmoddi4+0xa2>
 80004a8:	4639      	mov	r1, r7
 80004aa:	e6e6      	b.n	800027a <__udivmoddi4+0x62>
 80004ac:	4610      	mov	r0, r2
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x90>
 80004b0:	4548      	cmp	r0, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f0>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004bc:	3b01      	subs	r3, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f0>
 80004c0:	4645      	mov	r5, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x282>
 80004c4:	462b      	mov	r3, r5
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1da>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x258>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b0>
 80004d0:	3d02      	subs	r5, #2
 80004d2:	4462      	add	r2, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x124>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e70a      	b.n	80002f0 <__udivmoddi4+0xd8>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x14e>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <Skipper_Clock___Get_RCC_CFGR_APB_Value_From_Prescaler_Value>:
#include "../Inc/Skipper_Clock.h"

static uint64_t Skipper_Clock___Micros_Storage;

uint8_t Skipper_Clock___Get_RCC_CFGR_APB_Value_From_Prescaler_Value(uint8_t Prescaler_Value)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	71fb      	strb	r3, [r7, #7]
	uint8_t APB_Value = 0;
 80004ee:	2300      	movs	r3, #0
 80004f0:	73fb      	strb	r3, [r7, #15]

	switch(Prescaler_Value)
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	3b01      	subs	r3, #1
 80004f6:	2b0f      	cmp	r3, #15
 80004f8:	d831      	bhi.n	800055e <Skipper_Clock___Get_RCC_CFGR_APB_Value_From_Prescaler_Value+0x7a>
 80004fa:	a201      	add	r2, pc, #4	; (adr r2, 8000500 <Skipper_Clock___Get_RCC_CFGR_APB_Value_From_Prescaler_Value+0x1c>)
 80004fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000500:	08000541 	.word	0x08000541
 8000504:	08000547 	.word	0x08000547
 8000508:	0800055f 	.word	0x0800055f
 800050c:	0800054d 	.word	0x0800054d
 8000510:	0800055f 	.word	0x0800055f
 8000514:	0800055f 	.word	0x0800055f
 8000518:	0800055f 	.word	0x0800055f
 800051c:	08000553 	.word	0x08000553
 8000520:	0800055f 	.word	0x0800055f
 8000524:	0800055f 	.word	0x0800055f
 8000528:	0800055f 	.word	0x0800055f
 800052c:	0800055f 	.word	0x0800055f
 8000530:	0800055f 	.word	0x0800055f
 8000534:	0800055f 	.word	0x0800055f
 8000538:	0800055f 	.word	0x0800055f
 800053c:	08000559 	.word	0x08000559
	{
		case Skipper_Clock___APB_DIV_1:
			APB_Value = Skipper_Clock___RCC_CFGR_APB_DIV_1;
 8000540:	2300      	movs	r3, #0
 8000542:	73fb      	strb	r3, [r7, #15]
			break;
 8000544:	e00b      	b.n	800055e <Skipper_Clock___Get_RCC_CFGR_APB_Value_From_Prescaler_Value+0x7a>

		case Skipper_Clock___APB_DIV_2:
			APB_Value = Skipper_Clock___RCC_CFGR_APB_DIV_2;
 8000546:	2304      	movs	r3, #4
 8000548:	73fb      	strb	r3, [r7, #15]
			break;
 800054a:	e008      	b.n	800055e <Skipper_Clock___Get_RCC_CFGR_APB_Value_From_Prescaler_Value+0x7a>

		case Skipper_Clock___APB_DIV_4:
			APB_Value = Skipper_Clock___RCC_CFGR_APB_DIV_4;
 800054c:	2305      	movs	r3, #5
 800054e:	73fb      	strb	r3, [r7, #15]
			break;
 8000550:	e005      	b.n	800055e <Skipper_Clock___Get_RCC_CFGR_APB_Value_From_Prescaler_Value+0x7a>

		case Skipper_Clock___APB_DIV_8:
			APB_Value = Skipper_Clock___RCC_CFGR_APB_DIV_8;
 8000552:	2306      	movs	r3, #6
 8000554:	73fb      	strb	r3, [r7, #15]
			break;
 8000556:	e002      	b.n	800055e <Skipper_Clock___Get_RCC_CFGR_APB_Value_From_Prescaler_Value+0x7a>

		case Skipper_Clock___APB_DIV_16:
			APB_Value = Skipper_Clock___RCC_CFGR_APB_DIV_16;
 8000558:	2307      	movs	r3, #7
 800055a:	73fb      	strb	r3, [r7, #15]
			break;
 800055c:	bf00      	nop
	}

	return(APB_Value);
 800055e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000560:	4618      	mov	r0, r3
 8000562:	3714      	adds	r7, #20
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr

0800056c <Skipper_Clock___Get_RCC_CFGR_AHB_Value_From_Prescaler_Value>:

uint8_t Skipper_Clock___Get_RCC_CFGR_AHB_Value_From_Prescaler_Value(uint16_t Prescaler_Value)
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	80fb      	strh	r3, [r7, #6]
	uint8_t AHB_Value = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	73fb      	strb	r3, [r7, #15]

	switch(Prescaler_Value)
 800057a:	88fb      	ldrh	r3, [r7, #6]
 800057c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000580:	d051      	beq.n	8000626 <Skipper_Clock___Get_RCC_CFGR_AHB_Value_From_Prescaler_Value+0xba>
 8000582:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000586:	dc51      	bgt.n	800062c <Skipper_Clock___Get_RCC_CFGR_AHB_Value_From_Prescaler_Value+0xc0>
 8000588:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800058c:	d048      	beq.n	8000620 <Skipper_Clock___Get_RCC_CFGR_AHB_Value_From_Prescaler_Value+0xb4>
 800058e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000592:	dc4b      	bgt.n	800062c <Skipper_Clock___Get_RCC_CFGR_AHB_Value_From_Prescaler_Value+0xc0>
 8000594:	2b80      	cmp	r3, #128	; 0x80
 8000596:	d040      	beq.n	800061a <Skipper_Clock___Get_RCC_CFGR_AHB_Value_From_Prescaler_Value+0xae>
 8000598:	2b80      	cmp	r3, #128	; 0x80
 800059a:	dc47      	bgt.n	800062c <Skipper_Clock___Get_RCC_CFGR_AHB_Value_From_Prescaler_Value+0xc0>
 800059c:	2b10      	cmp	r3, #16
 800059e:	dc27      	bgt.n	80005f0 <Skipper_Clock___Get_RCC_CFGR_AHB_Value_From_Prescaler_Value+0x84>
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	dd43      	ble.n	800062c <Skipper_Clock___Get_RCC_CFGR_AHB_Value_From_Prescaler_Value+0xc0>
 80005a4:	3b01      	subs	r3, #1
 80005a6:	2b0f      	cmp	r3, #15
 80005a8:	d840      	bhi.n	800062c <Skipper_Clock___Get_RCC_CFGR_AHB_Value_From_Prescaler_Value+0xc0>
 80005aa:	a201      	add	r2, pc, #4	; (adr r2, 80005b0 <Skipper_Clock___Get_RCC_CFGR_AHB_Value_From_Prescaler_Value+0x44>)
 80005ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005b0:	080005f7 	.word	0x080005f7
 80005b4:	080005fd 	.word	0x080005fd
 80005b8:	0800062d 	.word	0x0800062d
 80005bc:	08000603 	.word	0x08000603
 80005c0:	0800062d 	.word	0x0800062d
 80005c4:	0800062d 	.word	0x0800062d
 80005c8:	0800062d 	.word	0x0800062d
 80005cc:	08000609 	.word	0x08000609
 80005d0:	0800062d 	.word	0x0800062d
 80005d4:	0800062d 	.word	0x0800062d
 80005d8:	0800062d 	.word	0x0800062d
 80005dc:	0800062d 	.word	0x0800062d
 80005e0:	0800062d 	.word	0x0800062d
 80005e4:	0800062d 	.word	0x0800062d
 80005e8:	0800062d 	.word	0x0800062d
 80005ec:	0800060f 	.word	0x0800060f
 80005f0:	2b40      	cmp	r3, #64	; 0x40
 80005f2:	d00f      	beq.n	8000614 <Skipper_Clock___Get_RCC_CFGR_AHB_Value_From_Prescaler_Value+0xa8>
 80005f4:	e01a      	b.n	800062c <Skipper_Clock___Get_RCC_CFGR_AHB_Value_From_Prescaler_Value+0xc0>
	{
		case Skipper_Clock___AHB_DIV_1:
			AHB_Value = Skipper_Clock___RCC_CFGR_AHB_DIV_1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	73fb      	strb	r3, [r7, #15]
			break;
 80005fa:	e017      	b.n	800062c <Skipper_Clock___Get_RCC_CFGR_AHB_Value_From_Prescaler_Value+0xc0>

		case Skipper_Clock___AHB_DIV_2:
			AHB_Value = Skipper_Clock___RCC_CFGR_AHB_DIV_2;
 80005fc:	2308      	movs	r3, #8
 80005fe:	73fb      	strb	r3, [r7, #15]
			break;
 8000600:	e014      	b.n	800062c <Skipper_Clock___Get_RCC_CFGR_AHB_Value_From_Prescaler_Value+0xc0>

		case Skipper_Clock___AHB_DIV_4:
			AHB_Value = Skipper_Clock___RCC_CFGR_AHB_DIV_4;
 8000602:	2309      	movs	r3, #9
 8000604:	73fb      	strb	r3, [r7, #15]
			break;
 8000606:	e011      	b.n	800062c <Skipper_Clock___Get_RCC_CFGR_AHB_Value_From_Prescaler_Value+0xc0>

		case Skipper_Clock___AHB_DIV_8:
			AHB_Value = Skipper_Clock___RCC_CFGR_AHB_DIV_8;
 8000608:	230a      	movs	r3, #10
 800060a:	73fb      	strb	r3, [r7, #15]
			break;
 800060c:	e00e      	b.n	800062c <Skipper_Clock___Get_RCC_CFGR_AHB_Value_From_Prescaler_Value+0xc0>

		case Skipper_Clock___AHB_DIV_16:
			AHB_Value = Skipper_Clock___RCC_CFGR_AHB_DIV_16;
 800060e:	230b      	movs	r3, #11
 8000610:	73fb      	strb	r3, [r7, #15]
			break;
 8000612:	e00b      	b.n	800062c <Skipper_Clock___Get_RCC_CFGR_AHB_Value_From_Prescaler_Value+0xc0>

		case Skipper_Clock___AHB_DIV_64:
			AHB_Value = Skipper_Clock___RCC_CFGR_AHB_DIV_64;
 8000614:	230c      	movs	r3, #12
 8000616:	73fb      	strb	r3, [r7, #15]
			break;
 8000618:	e008      	b.n	800062c <Skipper_Clock___Get_RCC_CFGR_AHB_Value_From_Prescaler_Value+0xc0>

		case Skipper_Clock___AHB_DIV_128:
			AHB_Value = Skipper_Clock___RCC_CFGR_AHB_DIV_128;
 800061a:	230d      	movs	r3, #13
 800061c:	73fb      	strb	r3, [r7, #15]
			break;
 800061e:	e005      	b.n	800062c <Skipper_Clock___Get_RCC_CFGR_AHB_Value_From_Prescaler_Value+0xc0>

		case Skipper_Clock___AHB_DIV_256:
			AHB_Value = Skipper_Clock___RCC_CFGR_AHB_DIV_256;
 8000620:	230e      	movs	r3, #14
 8000622:	73fb      	strb	r3, [r7, #15]
			break;
 8000624:	e002      	b.n	800062c <Skipper_Clock___Get_RCC_CFGR_AHB_Value_From_Prescaler_Value+0xc0>

		case Skipper_Clock___AHB_DIV_512:
			AHB_Value = Skipper_Clock___RCC_CFGR_AHB_DIV_512;
 8000626:	230f      	movs	r3, #15
 8000628:	73fb      	strb	r3, [r7, #15]
			break;
 800062a:	bf00      	nop
	}

	return(AHB_Value);
 800062c:	7bfb      	ldrb	r3, [r7, #15]
}
 800062e:	4618      	mov	r0, r3
 8000630:	3714      	adds	r7, #20
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop

0800063c <Skipper_Clock___Turn_On_HSE>:

void Skipper_Clock___Turn_On_HSE()
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
	RCC -> CR 		|= 	(RCC_CR_HSEON);
 8000640:	4b09      	ldr	r3, [pc, #36]	; (8000668 <Skipper_Clock___Turn_On_HSE+0x2c>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a08      	ldr	r2, [pc, #32]	; (8000668 <Skipper_Clock___Turn_On_HSE+0x2c>)
 8000646:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800064a:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY));
 800064c:	bf00      	nop
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <Skipper_Clock___Turn_On_HSE+0x2c>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000656:	2b00      	cmp	r3, #0
 8000658:	d0f9      	beq.n	800064e <Skipper_Clock___Turn_On_HSE+0x12>
}
 800065a:	bf00      	nop
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	40023800 	.word	0x40023800

0800066c <Skipper_Clock___Turn_On_PLL>:

void Skipper_Clock___Turn_On_PLL()
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
	RCC -> CR |= RCC_CR_PLLON;
 8000670:	4b09      	ldr	r3, [pc, #36]	; (8000698 <Skipper_Clock___Turn_On_PLL+0x2c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a08      	ldr	r2, [pc, #32]	; (8000698 <Skipper_Clock___Turn_On_PLL+0x2c>)
 8000676:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800067a:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY));
 800067c:	bf00      	nop
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <Skipper_Clock___Turn_On_PLL+0x2c>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000686:	2b00      	cmp	r3, #0
 8000688:	d0f9      	beq.n	800067e <Skipper_Clock___Turn_On_PLL+0x12>
}
 800068a:	bf00      	nop
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	40023800 	.word	0x40023800

0800069c <Skipper_Clock___Turn_Off_HSI>:

void Skipper_Clock___Turn_Off_HSI()
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
	RCC -> CR &= ~(RCC_CR_HSION);
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <Skipper_Clock___Turn_Off_HSI+0x2c>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a08      	ldr	r2, [pc, #32]	; (80006c8 <Skipper_Clock___Turn_Off_HSI+0x2c>)
 80006a6:	f023 0301 	bic.w	r3, r3, #1
 80006aa:	6013      	str	r3, [r2, #0]
	while(RCC -> CR & RCC_CR_HSIRDY);
 80006ac:	bf00      	nop
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <Skipper_Clock___Turn_Off_HSI+0x2c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f003 0302 	and.w	r3, r3, #2
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d1f9      	bne.n	80006ae <Skipper_Clock___Turn_Off_HSI+0x12>
}
 80006ba:	bf00      	nop
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800

080006cc <Skipper_Clock___Set_MUX_Source>:

void Skipper_Clock___Set_MUX_Source(uint8_t MUX_Source)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
	if(MUX_Source == Skipper_Clock___MUX_USE_PLL)
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	2b02      	cmp	r3, #2
 80006da:	d10d      	bne.n	80006f8 <Skipper_Clock___Set_MUX_Source+0x2c>
	{
		RCC -> CFGR |= (RCC_CFGR_SW_PLL);
 80006dc:	4b17      	ldr	r3, [pc, #92]	; (800073c <Skipper_Clock___Set_MUX_Source+0x70>)
 80006de:	689b      	ldr	r3, [r3, #8]
 80006e0:	4a16      	ldr	r2, [pc, #88]	; (800073c <Skipper_Clock___Set_MUX_Source+0x70>)
 80006e2:	f043 0302 	orr.w	r3, r3, #2
 80006e6:	6093      	str	r3, [r2, #8]
		while(!(RCC -> CFGR & RCC_CFGR_SWS_PLL));
 80006e8:	bf00      	nop
 80006ea:	4b14      	ldr	r3, [pc, #80]	; (800073c <Skipper_Clock___Set_MUX_Source+0x70>)
 80006ec:	689b      	ldr	r3, [r3, #8]
 80006ee:	f003 0308 	and.w	r3, r3, #8
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0f9      	beq.n	80006ea <Skipper_Clock___Set_MUX_Source+0x1e>
	else if(MUX_Source == Skipper_Clock___MUX_USE_HSI)
	{
		RCC -> CFGR |= (RCC_CFGR_SW_HSI);
		while(!(RCC -> CFGR & RCC_CFGR_SWS_HSI));
	}
}
 80006f6:	e01b      	b.n	8000730 <Skipper_Clock___Set_MUX_Source+0x64>
	else if(MUX_Source == Skipper_Clock___MUX_USE_HSE)
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d10d      	bne.n	800071a <Skipper_Clock___Set_MUX_Source+0x4e>
		RCC -> CFGR |= (RCC_CFGR_SW_HSE);
 80006fe:	4b0f      	ldr	r3, [pc, #60]	; (800073c <Skipper_Clock___Set_MUX_Source+0x70>)
 8000700:	689b      	ldr	r3, [r3, #8]
 8000702:	4a0e      	ldr	r2, [pc, #56]	; (800073c <Skipper_Clock___Set_MUX_Source+0x70>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	6093      	str	r3, [r2, #8]
		while(!(RCC -> CFGR & RCC_CFGR_SWS_HSE));
 800070a:	bf00      	nop
 800070c:	4b0b      	ldr	r3, [pc, #44]	; (800073c <Skipper_Clock___Set_MUX_Source+0x70>)
 800070e:	689b      	ldr	r3, [r3, #8]
 8000710:	f003 0304 	and.w	r3, r3, #4
 8000714:	2b00      	cmp	r3, #0
 8000716:	d0f9      	beq.n	800070c <Skipper_Clock___Set_MUX_Source+0x40>
}
 8000718:	e00a      	b.n	8000730 <Skipper_Clock___Set_MUX_Source+0x64>
	else if(MUX_Source == Skipper_Clock___MUX_USE_HSI)
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	2b01      	cmp	r3, #1
 800071e:	d107      	bne.n	8000730 <Skipper_Clock___Set_MUX_Source+0x64>
		RCC -> CFGR |= (RCC_CFGR_SW_HSI);
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <Skipper_Clock___Set_MUX_Source+0x70>)
 8000722:	4a06      	ldr	r2, [pc, #24]	; (800073c <Skipper_Clock___Set_MUX_Source+0x70>)
 8000724:	689b      	ldr	r3, [r3, #8]
 8000726:	6093      	str	r3, [r2, #8]
		while(!(RCC -> CFGR & RCC_CFGR_SWS_HSI));
 8000728:	bf00      	nop
 800072a:	4b04      	ldr	r3, [pc, #16]	; (800073c <Skipper_Clock___Set_MUX_Source+0x70>)
 800072c:	689b      	ldr	r3, [r3, #8]
 800072e:	e7fc      	b.n	800072a <Skipper_Clock___Set_MUX_Source+0x5e>
}
 8000730:	bf00      	nop
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	40023800 	.word	0x40023800

08000740 <Skipper_Clock___Init>:

void Skipper_Clock___Init()
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
	if((Skipper_Clock___MUX_SOURCE == Skipper_Clock___MUX_USE_HSE) || (Skipper_Clock___PLL_SOURCE == Skipper_Clock___PLL_USE_HSE))
	{
		Skipper_Clock___Turn_On_HSE();
 8000746:	f7ff ff79 	bl	800063c <Skipper_Clock___Turn_On_HSE>
	}

	PWR -> CR |= PWR_CR_VOS;
 800074a:	4b22      	ldr	r3, [pc, #136]	; (80007d4 <Skipper_Clock___Init+0x94>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a21      	ldr	r2, [pc, #132]	; (80007d4 <Skipper_Clock___Init+0x94>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000754:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= (FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS);
 8000756:	4b20      	ldr	r3, [pc, #128]	; (80007d8 <Skipper_Clock___Init+0x98>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a1f      	ldr	r2, [pc, #124]	; (80007d8 <Skipper_Clock___Init+0x98>)
 800075c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000760:	f043 0305 	orr.w	r3, r3, #5
 8000764:	6013      	str	r3, [r2, #0]

	RCC->PLLCFGR = 0;
 8000766:	4b1d      	ldr	r3, [pc, #116]	; (80007dc <Skipper_Clock___Init+0x9c>)
 8000768:	2200      	movs	r2, #0
 800076a:	605a      	str	r2, [r3, #4]
	RCC -> PLLCFGR |= 	(Skipper_Clock___PLL_Q 				<< RCC_PLLCFGR_PLLQ_Pos) 	|
 800076c:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <Skipper_Clock___Init+0x9c>)
 800076e:	685a      	ldr	r2, [r3, #4]
 8000770:	491a      	ldr	r1, [pc, #104]	; (80007dc <Skipper_Clock___Init+0x9c>)
 8000772:	4b1b      	ldr	r3, [pc, #108]	; (80007e0 <Skipper_Clock___Init+0xa0>)
 8000774:	4313      	orrs	r3, r2
 8000776:	604b      	str	r3, [r1, #4]
						(Skipper_Clock___PLL_N 				<< RCC_PLLCFGR_PLLN_Pos)		|
						(Skipper_Clock___PLL_M 				<< RCC_PLLCFGR_PLLM_Pos)		;

	if(Skipper_Clock___PLL_SOURCE == Skipper_Clock___PLL_USE_HSE)
	{
		RCC -> PLLCFGR 	|= 	(RCC_PLLCFGR_PLLSRC_HSE);
 8000778:	4b18      	ldr	r3, [pc, #96]	; (80007dc <Skipper_Clock___Init+0x9c>)
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	4a17      	ldr	r2, [pc, #92]	; (80007dc <Skipper_Clock___Init+0x9c>)
 800077e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000782:	6053      	str	r3, [r2, #4]
	else
	{
		RCC -> PLLCFGR 	&= 	~(RCC_PLLCFGR_PLLSRC_HSE);
	}

	uint8_t RCC_CFGR_AHB_Value = Skipper_Clock___Get_RCC_CFGR_AHB_Value_From_Prescaler_Value(Skipper_Clock___AHB_PRESCALER);
 8000784:	2001      	movs	r0, #1
 8000786:	f7ff fef1 	bl	800056c <Skipper_Clock___Get_RCC_CFGR_AHB_Value_From_Prescaler_Value>
 800078a:	4603      	mov	r3, r0
 800078c:	71fb      	strb	r3, [r7, #7]
	uint8_t RCC_CFGR_APB1_Value = Skipper_Clock___Get_RCC_CFGR_APB_Value_From_Prescaler_Value(Skipper_Clock___APB1_PRESCALER);
 800078e:	2002      	movs	r0, #2
 8000790:	f7ff fea8 	bl	80004e4 <Skipper_Clock___Get_RCC_CFGR_APB_Value_From_Prescaler_Value>
 8000794:	4603      	mov	r3, r0
 8000796:	71bb      	strb	r3, [r7, #6]
	uint8_t RCC_CFGR_APB2_Value = Skipper_Clock___Get_RCC_CFGR_APB_Value_From_Prescaler_Value(Skipper_Clock___APB2_PRESCALER);
 8000798:	2001      	movs	r0, #1
 800079a:	f7ff fea3 	bl	80004e4 <Skipper_Clock___Get_RCC_CFGR_APB_Value_From_Prescaler_Value>
 800079e:	4603      	mov	r3, r0
 80007a0:	717b      	strb	r3, [r7, #5]

	RCC -> CFGR |= 		(RCC_CFGR_AHB_Value  << RCC_CFGR_HPRE_Pos) 	|
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <Skipper_Clock___Init+0x9c>)
 80007a4:	689b      	ldr	r3, [r3, #8]
 80007a6:	79fa      	ldrb	r2, [r7, #7]
 80007a8:	0111      	lsls	r1, r2, #4
						(RCC_CFGR_APB1_Value << RCC_CFGR_PPRE1_Pos) |
 80007aa:	79ba      	ldrb	r2, [r7, #6]
 80007ac:	0292      	lsls	r2, r2, #10
	RCC -> CFGR |= 		(RCC_CFGR_AHB_Value  << RCC_CFGR_HPRE_Pos) 	|
 80007ae:	4311      	orrs	r1, r2
						(RCC_CFGR_APB2_Value << RCC_CFGR_PPRE2_Pos)	;
 80007b0:	797a      	ldrb	r2, [r7, #5]
 80007b2:	0352      	lsls	r2, r2, #13
						(RCC_CFGR_APB1_Value << RCC_CFGR_PPRE1_Pos) |
 80007b4:	430a      	orrs	r2, r1
 80007b6:	4611      	mov	r1, r2
	RCC -> CFGR |= 		(RCC_CFGR_AHB_Value  << RCC_CFGR_HPRE_Pos) 	|
 80007b8:	4a08      	ldr	r2, [pc, #32]	; (80007dc <Skipper_Clock___Init+0x9c>)
 80007ba:	430b      	orrs	r3, r1
 80007bc:	6093      	str	r3, [r2, #8]

	Skipper_Clock___Turn_On_PLL();
 80007be:	f7ff ff55 	bl	800066c <Skipper_Clock___Turn_On_PLL>

	Skipper_Clock___Set_MUX_Source(Skipper_Clock___MUX_SOURCE);
 80007c2:	2002      	movs	r0, #2
 80007c4:	f7ff ff82 	bl	80006cc <Skipper_Clock___Set_MUX_Source>

	if((Skipper_Clock___MUX_SOURCE != Skipper_Clock___MUX_USE_HSI) && (Skipper_Clock___PLL_SOURCE != Skipper_Clock___PLL_USE_HSI))
	{
		Skipper_Clock___Turn_Off_HSI();
 80007c8:	f7ff ff68 	bl	800069c <Skipper_Clock___Turn_Off_HSI>
	}
}
 80007cc:	bf00      	nop
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40007000 	.word	0x40007000
 80007d8:	40023c00 	.word	0x40023c00
 80007dc:	40023800 	.word	0x40023800
 80007e0:	03001208 	.word	0x03001208

080007e4 <Skipper_Clock___Systick_Init>:

void Skipper_Clock___Systick_Init()
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
	Skipper_Clock___Micros_Storage = 0;
 80007e8:	4910      	ldr	r1, [pc, #64]	; (800082c <Skipper_Clock___Systick_Init+0x48>)
 80007ea:	f04f 0200 	mov.w	r2, #0
 80007ee:	f04f 0300 	mov.w	r3, #0
 80007f2:	e9c1 2300 	strd	r2, r3, [r1]
	SysTick -> CTRL |= (Skipper_Clock___SYSTICK_ENABLE_INTERRUPT);
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <Skipper_Clock___Systick_Init+0x4c>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a0d      	ldr	r2, [pc, #52]	; (8000830 <Skipper_Clock___Systick_Init+0x4c>)
 80007fc:	f043 0302 	orr.w	r3, r3, #2
 8000800:	6013      	str	r3, [r2, #0]
	{
		SysTick -> CTRL |= (Skipper_Clock___SYSTICK_CLOKC_SOURCE_SYSTEM_CLOCK);
	}
	else
	{
		SysTick -> CTRL &= ~(Skipper_Clock___SYSTICK_CLOKC_SOURCE_SYSTEM_CLOCK);
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <Skipper_Clock___Systick_Init+0x4c>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a0a      	ldr	r2, [pc, #40]	; (8000830 <Skipper_Clock___Systick_Init+0x4c>)
 8000808:	f023 0304 	bic.w	r3, r3, #4
 800080c:	6013      	str	r3, [r2, #0]
	}

	SysTick -> LOAD = ((Skipper_Clock___CORTEX_SYSTEM_TIMER_FREQUENCY / 2) - 1);
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <Skipper_Clock___Systick_Init+0x4c>)
 8000810:	4a08      	ldr	r2, [pc, #32]	; (8000834 <Skipper_Clock___Systick_Init+0x50>)
 8000812:	605a      	str	r2, [r3, #4]
	SysTick -> CTRL |= (Skipper_Clock___SYSTICK_ENABLE);
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <Skipper_Clock___Systick_Init+0x4c>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a05      	ldr	r2, [pc, #20]	; (8000830 <Skipper_Clock___Systick_Init+0x4c>)
 800081a:	f043 0301 	orr.w	r3, r3, #1
 800081e:	6013      	str	r3, [r2, #0]
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	20000020 	.word	0x20000020
 8000830:	e000e010 	.word	0xe000e010
 8000834:	0044aa1f 	.word	0x0044aa1f

08000838 <Skipper_Clock___Micros>:

uint64_t Skipper_Clock___Micros()
{
 8000838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800083c:	b08e      	sub	sp, #56	; 0x38
 800083e:	af00      	add	r7, sp, #0
	uint32_t half_Second_Value 		= (SysTick -> LOAD) + 1;
 8000840:	4b32      	ldr	r3, [pc, #200]	; (800090c <Skipper_Clock___Micros+0xd4>)
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	3301      	adds	r3, #1
 8000846:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t current_Value 	 		= (SysTick -> VAL) + 1;
 8000848:	4b30      	ldr	r3, [pc, #192]	; (800090c <Skipper_Clock___Micros+0xd4>)
 800084a:	689b      	ldr	r3, [r3, #8]
 800084c:	3301      	adds	r3, #1
 800084e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t current_SysTick_Time 	= half_Second_Value - current_Value;
 8000850:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000854:	1ad3      	subs	r3, r2, r3
 8000856:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint64_t additional_Time		= (((uint64_t)current_SysTick_Time * 500000) / half_Second_Value);
 8000858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800085a:	2200      	movs	r2, #0
 800085c:	469a      	mov	sl, r3
 800085e:	4693      	mov	fp, r2
 8000860:	4652      	mov	r2, sl
 8000862:	465b      	mov	r3, fp
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	f04f 0100 	mov.w	r1, #0
 800086c:	0159      	lsls	r1, r3, #5
 800086e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8000872:	0150      	lsls	r0, r2, #5
 8000874:	4602      	mov	r2, r0
 8000876:	460b      	mov	r3, r1
 8000878:	ebb2 040a 	subs.w	r4, r2, sl
 800087c:	eb63 050b 	sbc.w	r5, r3, fp
 8000880:	f04f 0200 	mov.w	r2, #0
 8000884:	f04f 0300 	mov.w	r3, #0
 8000888:	01eb      	lsls	r3, r5, #7
 800088a:	ea43 6354 	orr.w	r3, r3, r4, lsr #25
 800088e:	01e2      	lsls	r2, r4, #7
 8000890:	ebb2 0804 	subs.w	r8, r2, r4
 8000894:	eb63 0905 	sbc.w	r9, r3, r5
 8000898:	f04f 0200 	mov.w	r2, #0
 800089c:	f04f 0300 	mov.w	r3, #0
 80008a0:	ea4f 13c9 	mov.w	r3, r9, lsl #7
 80008a4:	ea43 6358 	orr.w	r3, r3, r8, lsr #25
 80008a8:	ea4f 12c8 	mov.w	r2, r8, lsl #7
 80008ac:	ebb2 0108 	subs.w	r1, r2, r8
 80008b0:	6039      	str	r1, [r7, #0]
 80008b2:	eb63 0309 	sbc.w	r3, r3, r9
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80008bc:	460b      	mov	r3, r1
 80008be:	eb13 030a 	adds.w	r3, r3, sl
 80008c2:	61bb      	str	r3, [r7, #24]
 80008c4:	4613      	mov	r3, r2
 80008c6:	eb43 030b 	adc.w	r3, r3, fp
 80008ca:	61fb      	str	r3, [r7, #28]
 80008cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008ce:	2200      	movs	r2, #0
 80008d0:	613b      	str	r3, [r7, #16]
 80008d2:	617a      	str	r2, [r7, #20]
 80008d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80008d8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80008dc:	f7ff fc84 	bl	80001e8 <__aeabi_uldivmod>
 80008e0:	4602      	mov	r2, r0
 80008e2:	460b      	mov	r3, r1
 80008e4:	e9c7 2308 	strd	r2, r3, [r7, #32]
	return(Skipper_Clock___Micros_Storage + additional_Time);
 80008e8:	4b09      	ldr	r3, [pc, #36]	; (8000910 <Skipper_Clock___Micros+0xd8>)
 80008ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80008ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80008f2:	1884      	adds	r4, r0, r2
 80008f4:	60bc      	str	r4, [r7, #8]
 80008f6:	eb41 0303 	adc.w	r3, r1, r3
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8000900:	4610      	mov	r0, r2
 8000902:	4619      	mov	r1, r3
 8000904:	3738      	adds	r7, #56	; 0x38
 8000906:	46bd      	mov	sp, r7
 8000908:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800090c:	e000e010 	.word	0xe000e010
 8000910:	20000020 	.word	0x20000020

08000914 <Skipper_Clock___Delay_ms>:

void Skipper_Clock___Delay_ms(uint64_t delay)
{
 8000914:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000918:	b088      	sub	sp, #32
 800091a:	af00      	add	r7, sp, #0
 800091c:	e9c7 0102 	strd	r0, r1, [r7, #8]
	uint64_t current_Time 	= Skipper_Clock___Micros();
 8000920:	f7ff ff8a 	bl	8000838 <Skipper_Clock___Micros>
 8000924:	e9c7 0106 	strd	r0, r1, [r7, #24]
	uint64_t stop_Time		= current_Time + (delay*1000);
 8000928:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800092c:	4602      	mov	r2, r0
 800092e:	460b      	mov	r3, r1
 8000930:	f04f 0a00 	mov.w	sl, #0
 8000934:	f04f 0b00 	mov.w	fp, #0
 8000938:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800093c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8000940:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8000944:	4652      	mov	r2, sl
 8000946:	465b      	mov	r3, fp
 8000948:	1a14      	subs	r4, r2, r0
 800094a:	eb63 0501 	sbc.w	r5, r3, r1
 800094e:	f04f 0200 	mov.w	r2, #0
 8000952:	f04f 0300 	mov.w	r3, #0
 8000956:	00ab      	lsls	r3, r5, #2
 8000958:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800095c:	00a2      	lsls	r2, r4, #2
 800095e:	4614      	mov	r4, r2
 8000960:	461d      	mov	r5, r3
 8000962:	eb14 0800 	adds.w	r8, r4, r0
 8000966:	eb45 0901 	adc.w	r9, r5, r1
 800096a:	f04f 0200 	mov.w	r2, #0
 800096e:	f04f 0300 	mov.w	r3, #0
 8000972:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000976:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800097a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800097e:	4690      	mov	r8, r2
 8000980:	4699      	mov	r9, r3
 8000982:	4640      	mov	r0, r8
 8000984:	4649      	mov	r1, r9
 8000986:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800098a:	1814      	adds	r4, r2, r0
 800098c:	603c      	str	r4, [r7, #0]
 800098e:	414b      	adcs	r3, r1
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000996:	e9c7 3404 	strd	r3, r4, [r7, #16]
	while(Skipper_Clock___Micros() < stop_Time);
 800099a:	bf00      	nop
 800099c:	f7ff ff4c 	bl	8000838 <Skipper_Clock___Micros>
 80009a0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80009a4:	4290      	cmp	r0, r2
 80009a6:	eb71 0303 	sbcs.w	r3, r1, r3
 80009aa:	d3f7      	bcc.n	800099c <Skipper_Clock___Delay_ms+0x88>
}
 80009ac:	bf00      	nop
 80009ae:	bf00      	nop
 80009b0:	3720      	adds	r7, #32
 80009b2:	46bd      	mov	sp, r7
 80009b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080009b8 <SysTick_Handler>:
	uint64_t stop_Time		= current_Time + delay;
	while(Skipper_Clock___Micros() < stop_Time);
}

void SysTick_Handler()
{
 80009b8:	b490      	push	{r4, r7}
 80009ba:	af00      	add	r7, sp, #0
	Skipper_Clock___Micros_Storage += 500000;
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <SysTick_Handler+0x20>)
 80009be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009c2:	4c06      	ldr	r4, [pc, #24]	; (80009dc <SysTick_Handler+0x24>)
 80009c4:	1910      	adds	r0, r2, r4
 80009c6:	f143 0100 	adc.w	r1, r3, #0
 80009ca:	4b03      	ldr	r3, [pc, #12]	; (80009d8 <SysTick_Handler+0x20>)
 80009cc:	e9c3 0100 	strd	r0, r1, [r3]
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc90      	pop	{r4, r7}
 80009d6:	4770      	bx	lr
 80009d8:	20000020 	.word	0x20000020
 80009dc:	0007a120 	.word	0x0007a120

080009e0 <GPIO_init>:
#include <stdint.h>										// Include C library for fixed-width integer types
#include <stm32f4xx.h>									// Include STM32F4 specific definitions
#include <Skipper_Clock.h>								// Include Skipper clock configuration

void GPIO_init(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
	RCC->AHB1ENR 	|= (RCC_AHB1ENR_GPIODEN); 			// Enable GPIOD clock
 80009e4:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <GPIO_init+0x58>)
 80009e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e8:	4a13      	ldr	r2, [pc, #76]	; (8000a38 <GPIO_init+0x58>)
 80009ea:	f043 0308 	orr.w	r3, r3, #8
 80009ee:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR 	|= (RCC_AHB1ENR_GPIOAEN); 			// Enable GPIOA clock
 80009f0:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <GPIO_init+0x58>)
 80009f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f4:	4a10      	ldr	r2, [pc, #64]	; (8000a38 <GPIO_init+0x58>)
 80009f6:	f043 0301 	orr.w	r3, r3, #1
 80009fa:	6313      	str	r3, [r2, #48]	; 0x30

	//Enable on board LED
	GPIOD -> MODER 	|= (GPIO_MODER_MODER4_0); 			// Set PD4 to output
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <GPIO_init+0x5c>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a0e      	ldr	r2, [pc, #56]	; (8000a3c <GPIO_init+0x5c>)
 8000a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a06:	6013      	str	r3, [r2, #0]
	GPIOD -> ODR 	|= (GPIO_ODR_ODR_4);				// Set PD4 HIGH
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <GPIO_init+0x5c>)
 8000a0a:	695b      	ldr	r3, [r3, #20]
 8000a0c:	4a0b      	ldr	r2, [pc, #44]	; (8000a3c <GPIO_init+0x5c>)
 8000a0e:	f043 0310 	orr.w	r3, r3, #16
 8000a12:	6153      	str	r3, [r2, #20]

	GPIOA -> MODER 	|= (GPIO_MODER_MODER4_0); 			// Set PA4 to output
 8000a14:	4b0a      	ldr	r3, [pc, #40]	; (8000a40 <GPIO_init+0x60>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a09      	ldr	r2, [pc, #36]	; (8000a40 <GPIO_init+0x60>)
 8000a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a1e:	6013      	str	r3, [r2, #0]
	GPIOA -> ODR 	|= (GPIO_ODR_ODR_4);				// Set PA4 HIGH
 8000a20:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <GPIO_init+0x60>)
 8000a22:	695b      	ldr	r3, [r3, #20]
 8000a24:	4a06      	ldr	r2, [pc, #24]	; (8000a40 <GPIO_init+0x60>)
 8000a26:	f043 0310 	orr.w	r3, r3, #16
 8000a2a:	6153      	str	r3, [r2, #20]
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	40020c00 	.word	0x40020c00
 8000a40:	40020000 	.word	0x40020000

08000a44 <main>:

int main(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	Skipper_Clock___Init();
 8000a48:	f7ff fe7a 	bl	8000740 <Skipper_Clock___Init>
	Skipper_Clock___Systick_Init();
 8000a4c:	f7ff feca 	bl	80007e4 <Skipper_Clock___Systick_Init>
	GPIO_init();										// Initiate the GPIO's to be used in this program
 8000a50:	f7ff ffc6 	bl	80009e0 <GPIO_init>
	for(;;)
	{

		Skipper_Clock___Delay_ms(5);
 8000a54:	f04f 0005 	mov.w	r0, #5
 8000a58:	f04f 0100 	mov.w	r1, #0
 8000a5c:	f7ff ff5a 	bl	8000914 <Skipper_Clock___Delay_ms>
		GPIOA -> ODR 	|= (GPIO_ODR_ODR_4);				// Set PA4 HIGH
 8000a60:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <main+0x44>)
 8000a62:	695b      	ldr	r3, [r3, #20]
 8000a64:	4a08      	ldr	r2, [pc, #32]	; (8000a88 <main+0x44>)
 8000a66:	f043 0310 	orr.w	r3, r3, #16
 8000a6a:	6153      	str	r3, [r2, #20]
		Skipper_Clock___Delay_ms(5);
 8000a6c:	f04f 0005 	mov.w	r0, #5
 8000a70:	f04f 0100 	mov.w	r1, #0
 8000a74:	f7ff ff4e 	bl	8000914 <Skipper_Clock___Delay_ms>
		GPIOA -> ODR 	&= ~(GPIO_ODR_ODR_4);				// Set PA4 HIGH
 8000a78:	4b03      	ldr	r3, [pc, #12]	; (8000a88 <main+0x44>)
 8000a7a:	695b      	ldr	r3, [r3, #20]
 8000a7c:	4a02      	ldr	r2, [pc, #8]	; (8000a88 <main+0x44>)
 8000a7e:	f023 0310 	bic.w	r3, r3, #16
 8000a82:	6153      	str	r3, [r2, #20]
		Skipper_Clock___Delay_ms(5);
 8000a84:	e7e6      	b.n	8000a54 <main+0x10>
 8000a86:	bf00      	nop
 8000a88:	40020000 	.word	0x40020000

08000a8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <SystemInit+0x20>)
 8000a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a96:	4a05      	ldr	r2, [pc, #20]	; (8000aac <SystemInit+0x20>)
 8000a98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
   ldr   r0, =_estack
 8000ab0:	480d      	ldr	r0, [pc, #52]	; (8000ae8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ab2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ab4:	f7ff ffea 	bl	8000a8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ab8:	480c      	ldr	r0, [pc, #48]	; (8000aec <LoopForever+0x6>)
  ldr r1, =_edata
 8000aba:	490d      	ldr	r1, [pc, #52]	; (8000af0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000abc:	4a0d      	ldr	r2, [pc, #52]	; (8000af4 <LoopForever+0xe>)
  movs r3, #0
 8000abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac0:	e002      	b.n	8000ac8 <LoopCopyDataInit>

08000ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ac6:	3304      	adds	r3, #4

08000ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000acc:	d3f9      	bcc.n	8000ac2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ace:	4a0a      	ldr	r2, [pc, #40]	; (8000af8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ad0:	4c0a      	ldr	r4, [pc, #40]	; (8000afc <LoopForever+0x16>)
  movs r3, #0
 8000ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad4:	e001      	b.n	8000ada <LoopFillZerobss>

08000ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad8:	3204      	adds	r2, #4

08000ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000adc:	d3fb      	bcc.n	8000ad6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ade:	f000 f811 	bl	8000b04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ae2:	f7ff ffaf 	bl	8000a44 <main>

08000ae6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ae6:	e7fe      	b.n	8000ae6 <LoopForever>
   ldr   r0, =_estack
 8000ae8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000aec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000af4:	08000b74 	.word	0x08000b74
  ldr r2, =_sbss
 8000af8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000afc:	20000028 	.word	0x20000028

08000b00 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b00:	e7fe      	b.n	8000b00 <ADC_IRQHandler>
	...

08000b04 <__libc_init_array>:
 8000b04:	b570      	push	{r4, r5, r6, lr}
 8000b06:	4d0d      	ldr	r5, [pc, #52]	; (8000b3c <__libc_init_array+0x38>)
 8000b08:	4c0d      	ldr	r4, [pc, #52]	; (8000b40 <__libc_init_array+0x3c>)
 8000b0a:	1b64      	subs	r4, r4, r5
 8000b0c:	10a4      	asrs	r4, r4, #2
 8000b0e:	2600      	movs	r6, #0
 8000b10:	42a6      	cmp	r6, r4
 8000b12:	d109      	bne.n	8000b28 <__libc_init_array+0x24>
 8000b14:	4d0b      	ldr	r5, [pc, #44]	; (8000b44 <__libc_init_array+0x40>)
 8000b16:	4c0c      	ldr	r4, [pc, #48]	; (8000b48 <__libc_init_array+0x44>)
 8000b18:	f000 f818 	bl	8000b4c <_init>
 8000b1c:	1b64      	subs	r4, r4, r5
 8000b1e:	10a4      	asrs	r4, r4, #2
 8000b20:	2600      	movs	r6, #0
 8000b22:	42a6      	cmp	r6, r4
 8000b24:	d105      	bne.n	8000b32 <__libc_init_array+0x2e>
 8000b26:	bd70      	pop	{r4, r5, r6, pc}
 8000b28:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b2c:	4798      	blx	r3
 8000b2e:	3601      	adds	r6, #1
 8000b30:	e7ee      	b.n	8000b10 <__libc_init_array+0xc>
 8000b32:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b36:	4798      	blx	r3
 8000b38:	3601      	adds	r6, #1
 8000b3a:	e7f2      	b.n	8000b22 <__libc_init_array+0x1e>
 8000b3c:	08000b6c 	.word	0x08000b6c
 8000b40:	08000b6c 	.word	0x08000b6c
 8000b44:	08000b6c 	.word	0x08000b6c
 8000b48:	08000b70 	.word	0x08000b70

08000b4c <_init>:
 8000b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b4e:	bf00      	nop
 8000b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b52:	bc08      	pop	{r3}
 8000b54:	469e      	mov	lr, r3
 8000b56:	4770      	bx	lr

08000b58 <_fini>:
 8000b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b5a:	bf00      	nop
 8000b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b5e:	bc08      	pop	{r3}
 8000b60:	469e      	mov	lr, r3
 8000b62:	4770      	bx	lr

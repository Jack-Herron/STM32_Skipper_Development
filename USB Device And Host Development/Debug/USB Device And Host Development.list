
USB Device And Host Development.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021ac  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002354  08002354  00012354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002364  08002364  00020004  2**0
                  CONTENTS
  4 .ARM          00000008  08002364  08002364  00012364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800236c  0800236c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800236c  0800236c  0001236c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002370  08002370  00012370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002374  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          000002bc  20000008  20000008  00020008  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200002c4  200002c4  00020008  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 14 .debug_info   00004323  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000fc4  00000000  00000000  0002439a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000400  00000000  00000000  00025360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000002de  00000000  00000000  00025760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00019ceb  00000000  00000000  00025a3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000057cf  00000000  00000000  0003f729  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0008f4a2  00000000  00000000  00044ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000efc  00000000  00000000  000d439c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  000d5298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000008 	.word	0x20000008
 80001c4:	00000000 	.word	0x00000000
 80001c8:	0800233c 	.word	0x0800233c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	0800233c 	.word	0x0800233c

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b970 	b.w	80004e0 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9e08      	ldr	r6, [sp, #32]
 800021e:	460d      	mov	r5, r1
 8000220:	4604      	mov	r4, r0
 8000222:	460f      	mov	r7, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14a      	bne.n	80002be <__udivmoddi4+0xa6>
 8000228:	428a      	cmp	r2, r1
 800022a:	4694      	mov	ip, r2
 800022c:	d965      	bls.n	80002fa <__udivmoddi4+0xe2>
 800022e:	fab2 f382 	clz	r3, r2
 8000232:	b143      	cbz	r3, 8000246 <__udivmoddi4+0x2e>
 8000234:	fa02 fc03 	lsl.w	ip, r2, r3
 8000238:	f1c3 0220 	rsb	r2, r3, #32
 800023c:	409f      	lsls	r7, r3
 800023e:	fa20 f202 	lsr.w	r2, r0, r2
 8000242:	4317      	orrs	r7, r2
 8000244:	409c      	lsls	r4, r3
 8000246:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024a:	fa1f f58c 	uxth.w	r5, ip
 800024e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000252:	0c22      	lsrs	r2, r4, #16
 8000254:	fb0e 7711 	mls	r7, lr, r1, r7
 8000258:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800025c:	fb01 f005 	mul.w	r0, r1, r5
 8000260:	4290      	cmp	r0, r2
 8000262:	d90a      	bls.n	800027a <__udivmoddi4+0x62>
 8000264:	eb1c 0202 	adds.w	r2, ip, r2
 8000268:	f101 37ff 	add.w	r7, r1, #4294967295
 800026c:	f080 811c 	bcs.w	80004a8 <__udivmoddi4+0x290>
 8000270:	4290      	cmp	r0, r2
 8000272:	f240 8119 	bls.w	80004a8 <__udivmoddi4+0x290>
 8000276:	3902      	subs	r1, #2
 8000278:	4462      	add	r2, ip
 800027a:	1a12      	subs	r2, r2, r0
 800027c:	b2a4      	uxth	r4, r4
 800027e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000282:	fb0e 2210 	mls	r2, lr, r0, r2
 8000286:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028a:	fb00 f505 	mul.w	r5, r0, r5
 800028e:	42a5      	cmp	r5, r4
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x90>
 8000292:	eb1c 0404 	adds.w	r4, ip, r4
 8000296:	f100 32ff 	add.w	r2, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x294>
 800029e:	42a5      	cmp	r5, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x294>
 80002a4:	4464      	add	r4, ip
 80002a6:	3802      	subs	r0, #2
 80002a8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ac:	1b64      	subs	r4, r4, r5
 80002ae:	2100      	movs	r1, #0
 80002b0:	b11e      	cbz	r6, 80002ba <__udivmoddi4+0xa2>
 80002b2:	40dc      	lsrs	r4, r3
 80002b4:	2300      	movs	r3, #0
 80002b6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0xbc>
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	f000 80ed 	beq.w	80004a2 <__udivmoddi4+0x28a>
 80002c8:	2100      	movs	r1, #0
 80002ca:	e9c6 0500 	strd	r0, r5, [r6]
 80002ce:	4608      	mov	r0, r1
 80002d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d4:	fab3 f183 	clz	r1, r3
 80002d8:	2900      	cmp	r1, #0
 80002da:	d149      	bne.n	8000370 <__udivmoddi4+0x158>
 80002dc:	42ab      	cmp	r3, r5
 80002de:	d302      	bcc.n	80002e6 <__udivmoddi4+0xce>
 80002e0:	4282      	cmp	r2, r0
 80002e2:	f200 80f8 	bhi.w	80004d6 <__udivmoddi4+0x2be>
 80002e6:	1a84      	subs	r4, r0, r2
 80002e8:	eb65 0203 	sbc.w	r2, r5, r3
 80002ec:	2001      	movs	r0, #1
 80002ee:	4617      	mov	r7, r2
 80002f0:	2e00      	cmp	r6, #0
 80002f2:	d0e2      	beq.n	80002ba <__udivmoddi4+0xa2>
 80002f4:	e9c6 4700 	strd	r4, r7, [r6]
 80002f8:	e7df      	b.n	80002ba <__udivmoddi4+0xa2>
 80002fa:	b902      	cbnz	r2, 80002fe <__udivmoddi4+0xe6>
 80002fc:	deff      	udf	#255	; 0xff
 80002fe:	fab2 f382 	clz	r3, r2
 8000302:	2b00      	cmp	r3, #0
 8000304:	f040 8090 	bne.w	8000428 <__udivmoddi4+0x210>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2101      	movs	r1, #1
 8000314:	fbb2 f5f7 	udiv	r5, r2, r7
 8000318:	fb07 2015 	mls	r0, r7, r5, r2
 800031c:	0c22      	lsrs	r2, r4, #16
 800031e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000322:	fb0e f005 	mul.w	r0, lr, r5
 8000326:	4290      	cmp	r0, r2
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x124>
 800032a:	eb1c 0202 	adds.w	r2, ip, r2
 800032e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x122>
 8000334:	4290      	cmp	r0, r2
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2b8>
 800033a:	4645      	mov	r5, r8
 800033c:	1a12      	subs	r2, r2, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb2 f0f7 	udiv	r0, r2, r7
 8000344:	fb07 2210 	mls	r2, r7, r0, r2
 8000348:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x14e>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 32ff 	add.w	r2, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x14c>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2c2>
 8000364:	4610      	mov	r0, r2
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800036e:	e79f      	b.n	80002b0 <__udivmoddi4+0x98>
 8000370:	f1c1 0720 	rsb	r7, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa05 f401 	lsl.w	r4, r5, r1
 8000382:	fa20 f307 	lsr.w	r3, r0, r7
 8000386:	40fd      	lsrs	r5, r7
 8000388:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038c:	4323      	orrs	r3, r4
 800038e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	fb09 5518 	mls	r5, r9, r8, r5
 800039a:	0c1c      	lsrs	r4, r3, #16
 800039c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a0:	fb08 f50e 	mul.w	r5, r8, lr
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	fa00 f001 	lsl.w	r0, r0, r1
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b0>
 80003b0:	eb1c 0404 	adds.w	r4, ip, r4
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2b4>
 80003bc:	42a5      	cmp	r5, r4
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2b4>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4464      	add	r4, ip
 80003c8:	1b64      	subs	r4, r4, r5
 80003ca:	b29d      	uxth	r5, r3
 80003cc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d0:	fb09 4413 	mls	r4, r9, r3, r4
 80003d4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003dc:	45a6      	cmp	lr, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1da>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2ac>
 80003ea:	45a6      	cmp	lr, r4
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2ac>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	4464      	add	r4, ip
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fba3 9502 	umull	r9, r5, r3, r2
 80003fa:	eba4 040e 	sub.w	r4, r4, lr
 80003fe:	42ac      	cmp	r4, r5
 8000400:	46c8      	mov	r8, r9
 8000402:	46ae      	mov	lr, r5
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x29c>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x298>
 8000408:	b156      	cbz	r6, 8000420 <__udivmoddi4+0x208>
 800040a:	ebb0 0208 	subs.w	r2, r0, r8
 800040e:	eb64 040e 	sbc.w	r4, r4, lr
 8000412:	fa04 f707 	lsl.w	r7, r4, r7
 8000416:	40ca      	lsrs	r2, r1
 8000418:	40cc      	lsrs	r4, r1
 800041a:	4317      	orrs	r7, r2
 800041c:	e9c6 7400 	strd	r7, r4, [r6]
 8000420:	4618      	mov	r0, r3
 8000422:	2100      	movs	r1, #0
 8000424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000428:	f1c3 0120 	rsb	r1, r3, #32
 800042c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000430:	fa20 f201 	lsr.w	r2, r0, r1
 8000434:	fa25 f101 	lsr.w	r1, r5, r1
 8000438:	409d      	lsls	r5, r3
 800043a:	432a      	orrs	r2, r5
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb1 f0f7 	udiv	r0, r1, r7
 8000448:	fb07 1510 	mls	r5, r7, r0, r1
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000452:	fb00 f50e 	mul.w	r5, r0, lr
 8000456:	428d      	cmp	r5, r1
 8000458:	fa04 f403 	lsl.w	r4, r4, r3
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x258>
 800045e:	eb1c 0101 	adds.w	r1, ip, r1
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b0>
 8000468:	428d      	cmp	r5, r1
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b0>
 800046c:	3802      	subs	r0, #2
 800046e:	4461      	add	r1, ip
 8000470:	1b49      	subs	r1, r1, r5
 8000472:	b292      	uxth	r2, r2
 8000474:	fbb1 f5f7 	udiv	r5, r1, r7
 8000478:	fb07 1115 	mls	r1, r7, r5, r1
 800047c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000480:	fb05 f10e 	mul.w	r1, r5, lr
 8000484:	4291      	cmp	r1, r2
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x282>
 8000488:	eb1c 0202 	adds.w	r2, ip, r2
 800048c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2a8>
 8000492:	4291      	cmp	r1, r2
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2a8>
 8000496:	3d02      	subs	r5, #2
 8000498:	4462      	add	r2, ip
 800049a:	1a52      	subs	r2, r2, r1
 800049c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0xfc>
 80004a2:	4631      	mov	r1, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e708      	b.n	80002ba <__udivmoddi4+0xa2>
 80004a8:	4639      	mov	r1, r7
 80004aa:	e6e6      	b.n	800027a <__udivmoddi4+0x62>
 80004ac:	4610      	mov	r0, r2
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x90>
 80004b0:	4548      	cmp	r0, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f0>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004bc:	3b01      	subs	r3, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f0>
 80004c0:	4645      	mov	r5, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x282>
 80004c4:	462b      	mov	r3, r5
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1da>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x258>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b0>
 80004d0:	3d02      	subs	r5, #2
 80004d2:	4462      	add	r2, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x124>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e70a      	b.n	80002f0 <__udivmoddi4+0xd8>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x14e>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <Skipper_Clock___Get_RCC_CFGR_APB_Value_From_Prescaler_Value>:
#include "../Inc/Skipper_Clock.h"

static uint64_t Skipper_Clock___Micros_Storage;

uint8_t Skipper_Clock___Get_RCC_CFGR_APB_Value_From_Prescaler_Value(uint8_t Prescaler_Value)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	71fb      	strb	r3, [r7, #7]
	uint8_t APB_Value = 0;
 80004ee:	2300      	movs	r3, #0
 80004f0:	73fb      	strb	r3, [r7, #15]

	switch(Prescaler_Value)
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	3b01      	subs	r3, #1
 80004f6:	2b0f      	cmp	r3, #15
 80004f8:	d831      	bhi.n	800055e <Skipper_Clock___Get_RCC_CFGR_APB_Value_From_Prescaler_Value+0x7a>
 80004fa:	a201      	add	r2, pc, #4	; (adr r2, 8000500 <Skipper_Clock___Get_RCC_CFGR_APB_Value_From_Prescaler_Value+0x1c>)
 80004fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000500:	08000541 	.word	0x08000541
 8000504:	08000547 	.word	0x08000547
 8000508:	0800055f 	.word	0x0800055f
 800050c:	0800054d 	.word	0x0800054d
 8000510:	0800055f 	.word	0x0800055f
 8000514:	0800055f 	.word	0x0800055f
 8000518:	0800055f 	.word	0x0800055f
 800051c:	08000553 	.word	0x08000553
 8000520:	0800055f 	.word	0x0800055f
 8000524:	0800055f 	.word	0x0800055f
 8000528:	0800055f 	.word	0x0800055f
 800052c:	0800055f 	.word	0x0800055f
 8000530:	0800055f 	.word	0x0800055f
 8000534:	0800055f 	.word	0x0800055f
 8000538:	0800055f 	.word	0x0800055f
 800053c:	08000559 	.word	0x08000559
	{
		case Skipper_Clock___APB_DIV_1:
			APB_Value = Skipper_Clock___RCC_CFGR_APB_DIV_1;
 8000540:	2300      	movs	r3, #0
 8000542:	73fb      	strb	r3, [r7, #15]
			break;
 8000544:	e00b      	b.n	800055e <Skipper_Clock___Get_RCC_CFGR_APB_Value_From_Prescaler_Value+0x7a>

		case Skipper_Clock___APB_DIV_2:
			APB_Value = Skipper_Clock___RCC_CFGR_APB_DIV_2;
 8000546:	2304      	movs	r3, #4
 8000548:	73fb      	strb	r3, [r7, #15]
			break;
 800054a:	e008      	b.n	800055e <Skipper_Clock___Get_RCC_CFGR_APB_Value_From_Prescaler_Value+0x7a>

		case Skipper_Clock___APB_DIV_4:
			APB_Value = Skipper_Clock___RCC_CFGR_APB_DIV_4;
 800054c:	2305      	movs	r3, #5
 800054e:	73fb      	strb	r3, [r7, #15]
			break;
 8000550:	e005      	b.n	800055e <Skipper_Clock___Get_RCC_CFGR_APB_Value_From_Prescaler_Value+0x7a>

		case Skipper_Clock___APB_DIV_8:
			APB_Value = Skipper_Clock___RCC_CFGR_APB_DIV_8;
 8000552:	2306      	movs	r3, #6
 8000554:	73fb      	strb	r3, [r7, #15]
			break;
 8000556:	e002      	b.n	800055e <Skipper_Clock___Get_RCC_CFGR_APB_Value_From_Prescaler_Value+0x7a>

		case Skipper_Clock___APB_DIV_16:
			APB_Value = Skipper_Clock___RCC_CFGR_APB_DIV_16;
 8000558:	2307      	movs	r3, #7
 800055a:	73fb      	strb	r3, [r7, #15]
			break;
 800055c:	bf00      	nop
	}

	return(APB_Value);
 800055e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000560:	4618      	mov	r0, r3
 8000562:	3714      	adds	r7, #20
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr

0800056c <Skipper_Clock___Get_RCC_CFGR_AHB_Value_From_Prescaler_Value>:

uint8_t Skipper_Clock___Get_RCC_CFGR_AHB_Value_From_Prescaler_Value(uint16_t Prescaler_Value)
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	80fb      	strh	r3, [r7, #6]
	uint8_t AHB_Value = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	73fb      	strb	r3, [r7, #15]

	switch(Prescaler_Value)
 800057a:	88fb      	ldrh	r3, [r7, #6]
 800057c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000580:	d051      	beq.n	8000626 <Skipper_Clock___Get_RCC_CFGR_AHB_Value_From_Prescaler_Value+0xba>
 8000582:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000586:	dc51      	bgt.n	800062c <Skipper_Clock___Get_RCC_CFGR_AHB_Value_From_Prescaler_Value+0xc0>
 8000588:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800058c:	d048      	beq.n	8000620 <Skipper_Clock___Get_RCC_CFGR_AHB_Value_From_Prescaler_Value+0xb4>
 800058e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000592:	dc4b      	bgt.n	800062c <Skipper_Clock___Get_RCC_CFGR_AHB_Value_From_Prescaler_Value+0xc0>
 8000594:	2b80      	cmp	r3, #128	; 0x80
 8000596:	d040      	beq.n	800061a <Skipper_Clock___Get_RCC_CFGR_AHB_Value_From_Prescaler_Value+0xae>
 8000598:	2b80      	cmp	r3, #128	; 0x80
 800059a:	dc47      	bgt.n	800062c <Skipper_Clock___Get_RCC_CFGR_AHB_Value_From_Prescaler_Value+0xc0>
 800059c:	2b10      	cmp	r3, #16
 800059e:	dc27      	bgt.n	80005f0 <Skipper_Clock___Get_RCC_CFGR_AHB_Value_From_Prescaler_Value+0x84>
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	dd43      	ble.n	800062c <Skipper_Clock___Get_RCC_CFGR_AHB_Value_From_Prescaler_Value+0xc0>
 80005a4:	3b01      	subs	r3, #1
 80005a6:	2b0f      	cmp	r3, #15
 80005a8:	d840      	bhi.n	800062c <Skipper_Clock___Get_RCC_CFGR_AHB_Value_From_Prescaler_Value+0xc0>
 80005aa:	a201      	add	r2, pc, #4	; (adr r2, 80005b0 <Skipper_Clock___Get_RCC_CFGR_AHB_Value_From_Prescaler_Value+0x44>)
 80005ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005b0:	080005f7 	.word	0x080005f7
 80005b4:	080005fd 	.word	0x080005fd
 80005b8:	0800062d 	.word	0x0800062d
 80005bc:	08000603 	.word	0x08000603
 80005c0:	0800062d 	.word	0x0800062d
 80005c4:	0800062d 	.word	0x0800062d
 80005c8:	0800062d 	.word	0x0800062d
 80005cc:	08000609 	.word	0x08000609
 80005d0:	0800062d 	.word	0x0800062d
 80005d4:	0800062d 	.word	0x0800062d
 80005d8:	0800062d 	.word	0x0800062d
 80005dc:	0800062d 	.word	0x0800062d
 80005e0:	0800062d 	.word	0x0800062d
 80005e4:	0800062d 	.word	0x0800062d
 80005e8:	0800062d 	.word	0x0800062d
 80005ec:	0800060f 	.word	0x0800060f
 80005f0:	2b40      	cmp	r3, #64	; 0x40
 80005f2:	d00f      	beq.n	8000614 <Skipper_Clock___Get_RCC_CFGR_AHB_Value_From_Prescaler_Value+0xa8>
 80005f4:	e01a      	b.n	800062c <Skipper_Clock___Get_RCC_CFGR_AHB_Value_From_Prescaler_Value+0xc0>
	{
		case Skipper_Clock___AHB_DIV_1:
			AHB_Value = Skipper_Clock___RCC_CFGR_AHB_DIV_1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	73fb      	strb	r3, [r7, #15]
			break;
 80005fa:	e017      	b.n	800062c <Skipper_Clock___Get_RCC_CFGR_AHB_Value_From_Prescaler_Value+0xc0>

		case Skipper_Clock___AHB_DIV_2:
			AHB_Value = Skipper_Clock___RCC_CFGR_AHB_DIV_2;
 80005fc:	2308      	movs	r3, #8
 80005fe:	73fb      	strb	r3, [r7, #15]
			break;
 8000600:	e014      	b.n	800062c <Skipper_Clock___Get_RCC_CFGR_AHB_Value_From_Prescaler_Value+0xc0>

		case Skipper_Clock___AHB_DIV_4:
			AHB_Value = Skipper_Clock___RCC_CFGR_AHB_DIV_4;
 8000602:	2309      	movs	r3, #9
 8000604:	73fb      	strb	r3, [r7, #15]
			break;
 8000606:	e011      	b.n	800062c <Skipper_Clock___Get_RCC_CFGR_AHB_Value_From_Prescaler_Value+0xc0>

		case Skipper_Clock___AHB_DIV_8:
			AHB_Value = Skipper_Clock___RCC_CFGR_AHB_DIV_8;
 8000608:	230a      	movs	r3, #10
 800060a:	73fb      	strb	r3, [r7, #15]
			break;
 800060c:	e00e      	b.n	800062c <Skipper_Clock___Get_RCC_CFGR_AHB_Value_From_Prescaler_Value+0xc0>

		case Skipper_Clock___AHB_DIV_16:
			AHB_Value = Skipper_Clock___RCC_CFGR_AHB_DIV_16;
 800060e:	230b      	movs	r3, #11
 8000610:	73fb      	strb	r3, [r7, #15]
			break;
 8000612:	e00b      	b.n	800062c <Skipper_Clock___Get_RCC_CFGR_AHB_Value_From_Prescaler_Value+0xc0>

		case Skipper_Clock___AHB_DIV_64:
			AHB_Value = Skipper_Clock___RCC_CFGR_AHB_DIV_64;
 8000614:	230c      	movs	r3, #12
 8000616:	73fb      	strb	r3, [r7, #15]
			break;
 8000618:	e008      	b.n	800062c <Skipper_Clock___Get_RCC_CFGR_AHB_Value_From_Prescaler_Value+0xc0>

		case Skipper_Clock___AHB_DIV_128:
			AHB_Value = Skipper_Clock___RCC_CFGR_AHB_DIV_128;
 800061a:	230d      	movs	r3, #13
 800061c:	73fb      	strb	r3, [r7, #15]
			break;
 800061e:	e005      	b.n	800062c <Skipper_Clock___Get_RCC_CFGR_AHB_Value_From_Prescaler_Value+0xc0>

		case Skipper_Clock___AHB_DIV_256:
			AHB_Value = Skipper_Clock___RCC_CFGR_AHB_DIV_256;
 8000620:	230e      	movs	r3, #14
 8000622:	73fb      	strb	r3, [r7, #15]
			break;
 8000624:	e002      	b.n	800062c <Skipper_Clock___Get_RCC_CFGR_AHB_Value_From_Prescaler_Value+0xc0>

		case Skipper_Clock___AHB_DIV_512:
			AHB_Value = Skipper_Clock___RCC_CFGR_AHB_DIV_512;
 8000626:	230f      	movs	r3, #15
 8000628:	73fb      	strb	r3, [r7, #15]
			break;
 800062a:	bf00      	nop
	}

	return(AHB_Value);
 800062c:	7bfb      	ldrb	r3, [r7, #15]
}
 800062e:	4618      	mov	r0, r3
 8000630:	3714      	adds	r7, #20
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop

0800063c <Skipper_Clock___Turn_On_HSE>:

void Skipper_Clock___Turn_On_HSE()
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
	RCC -> CR 		|= 	(RCC_CR_HSEON);
 8000640:	4b09      	ldr	r3, [pc, #36]	; (8000668 <Skipper_Clock___Turn_On_HSE+0x2c>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a08      	ldr	r2, [pc, #32]	; (8000668 <Skipper_Clock___Turn_On_HSE+0x2c>)
 8000646:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800064a:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY));
 800064c:	bf00      	nop
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <Skipper_Clock___Turn_On_HSE+0x2c>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000656:	2b00      	cmp	r3, #0
 8000658:	d0f9      	beq.n	800064e <Skipper_Clock___Turn_On_HSE+0x12>
}
 800065a:	bf00      	nop
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	40023800 	.word	0x40023800

0800066c <Skipper_Clock___Turn_On_PLL>:

void Skipper_Clock___Turn_On_PLL()
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
	RCC -> CR |= RCC_CR_PLLON;
 8000670:	4b09      	ldr	r3, [pc, #36]	; (8000698 <Skipper_Clock___Turn_On_PLL+0x2c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a08      	ldr	r2, [pc, #32]	; (8000698 <Skipper_Clock___Turn_On_PLL+0x2c>)
 8000676:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800067a:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY));
 800067c:	bf00      	nop
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <Skipper_Clock___Turn_On_PLL+0x2c>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000686:	2b00      	cmp	r3, #0
 8000688:	d0f9      	beq.n	800067e <Skipper_Clock___Turn_On_PLL+0x12>
}
 800068a:	bf00      	nop
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	40023800 	.word	0x40023800

0800069c <Skipper_Clock___Turn_Off_HSI>:

void Skipper_Clock___Turn_Off_HSI()
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
	RCC -> CR &= ~(RCC_CR_HSION);
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <Skipper_Clock___Turn_Off_HSI+0x2c>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a08      	ldr	r2, [pc, #32]	; (80006c8 <Skipper_Clock___Turn_Off_HSI+0x2c>)
 80006a6:	f023 0301 	bic.w	r3, r3, #1
 80006aa:	6013      	str	r3, [r2, #0]
	while(RCC -> CR & RCC_CR_HSIRDY);
 80006ac:	bf00      	nop
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <Skipper_Clock___Turn_Off_HSI+0x2c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f003 0302 	and.w	r3, r3, #2
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d1f9      	bne.n	80006ae <Skipper_Clock___Turn_Off_HSI+0x12>
}
 80006ba:	bf00      	nop
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800

080006cc <Skipper_Clock___Set_MUX_Source>:

void Skipper_Clock___Set_MUX_Source(uint8_t MUX_Source)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
	if(MUX_Source == Skipper_Clock___MUX_USE_PLL)
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	2b02      	cmp	r3, #2
 80006da:	d10d      	bne.n	80006f8 <Skipper_Clock___Set_MUX_Source+0x2c>
	{
		RCC -> CFGR |= (RCC_CFGR_SW_PLL);
 80006dc:	4b17      	ldr	r3, [pc, #92]	; (800073c <Skipper_Clock___Set_MUX_Source+0x70>)
 80006de:	689b      	ldr	r3, [r3, #8]
 80006e0:	4a16      	ldr	r2, [pc, #88]	; (800073c <Skipper_Clock___Set_MUX_Source+0x70>)
 80006e2:	f043 0302 	orr.w	r3, r3, #2
 80006e6:	6093      	str	r3, [r2, #8]
		while(!(RCC -> CFGR & RCC_CFGR_SWS_PLL));
 80006e8:	bf00      	nop
 80006ea:	4b14      	ldr	r3, [pc, #80]	; (800073c <Skipper_Clock___Set_MUX_Source+0x70>)
 80006ec:	689b      	ldr	r3, [r3, #8]
 80006ee:	f003 0308 	and.w	r3, r3, #8
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0f9      	beq.n	80006ea <Skipper_Clock___Set_MUX_Source+0x1e>
	else if(MUX_Source == Skipper_Clock___MUX_USE_HSI)
	{
		RCC -> CFGR |= (RCC_CFGR_SW_HSI);
		while(!(RCC -> CFGR & RCC_CFGR_SWS_HSI));
	}
}
 80006f6:	e01b      	b.n	8000730 <Skipper_Clock___Set_MUX_Source+0x64>
	else if(MUX_Source == Skipper_Clock___MUX_USE_HSE)
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d10d      	bne.n	800071a <Skipper_Clock___Set_MUX_Source+0x4e>
		RCC -> CFGR |= (RCC_CFGR_SW_HSE);
 80006fe:	4b0f      	ldr	r3, [pc, #60]	; (800073c <Skipper_Clock___Set_MUX_Source+0x70>)
 8000700:	689b      	ldr	r3, [r3, #8]
 8000702:	4a0e      	ldr	r2, [pc, #56]	; (800073c <Skipper_Clock___Set_MUX_Source+0x70>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	6093      	str	r3, [r2, #8]
		while(!(RCC -> CFGR & RCC_CFGR_SWS_HSE));
 800070a:	bf00      	nop
 800070c:	4b0b      	ldr	r3, [pc, #44]	; (800073c <Skipper_Clock___Set_MUX_Source+0x70>)
 800070e:	689b      	ldr	r3, [r3, #8]
 8000710:	f003 0304 	and.w	r3, r3, #4
 8000714:	2b00      	cmp	r3, #0
 8000716:	d0f9      	beq.n	800070c <Skipper_Clock___Set_MUX_Source+0x40>
}
 8000718:	e00a      	b.n	8000730 <Skipper_Clock___Set_MUX_Source+0x64>
	else if(MUX_Source == Skipper_Clock___MUX_USE_HSI)
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	2b01      	cmp	r3, #1
 800071e:	d107      	bne.n	8000730 <Skipper_Clock___Set_MUX_Source+0x64>
		RCC -> CFGR |= (RCC_CFGR_SW_HSI);
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <Skipper_Clock___Set_MUX_Source+0x70>)
 8000722:	4a06      	ldr	r2, [pc, #24]	; (800073c <Skipper_Clock___Set_MUX_Source+0x70>)
 8000724:	689b      	ldr	r3, [r3, #8]
 8000726:	6093      	str	r3, [r2, #8]
		while(!(RCC -> CFGR & RCC_CFGR_SWS_HSI));
 8000728:	bf00      	nop
 800072a:	4b04      	ldr	r3, [pc, #16]	; (800073c <Skipper_Clock___Set_MUX_Source+0x70>)
 800072c:	689b      	ldr	r3, [r3, #8]
 800072e:	e7fc      	b.n	800072a <Skipper_Clock___Set_MUX_Source+0x5e>
}
 8000730:	bf00      	nop
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	40023800 	.word	0x40023800

08000740 <Skipper_Clock___Init>:

void Skipper_Clock___Init()
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
	if((Skipper_Clock___MUX_SOURCE == Skipper_Clock___MUX_USE_HSE) || (Skipper_Clock___PLL_SOURCE == Skipper_Clock___PLL_USE_HSE))
	{
		Skipper_Clock___Turn_On_HSE();
 8000746:	f7ff ff79 	bl	800063c <Skipper_Clock___Turn_On_HSE>
	}

	PWR -> CR |= PWR_CR_VOS;
 800074a:	4b23      	ldr	r3, [pc, #140]	; (80007d8 <Skipper_Clock___Init+0x98>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a22      	ldr	r2, [pc, #136]	; (80007d8 <Skipper_Clock___Init+0x98>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000754:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= (FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS);
 8000756:	4b21      	ldr	r3, [pc, #132]	; (80007dc <Skipper_Clock___Init+0x9c>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a20      	ldr	r2, [pc, #128]	; (80007dc <Skipper_Clock___Init+0x9c>)
 800075c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000760:	f043 0305 	orr.w	r3, r3, #5
 8000764:	6013      	str	r3, [r2, #0]

	RCC->PLLCFGR = 0;
 8000766:	4b1e      	ldr	r3, [pc, #120]	; (80007e0 <Skipper_Clock___Init+0xa0>)
 8000768:	2200      	movs	r2, #0
 800076a:	605a      	str	r2, [r3, #4]
	RCC -> PLLCFGR |= 	(Skipper_Clock___PLL_Q 				<< RCC_PLLCFGR_PLLQ_Pos) 	|
 800076c:	4b1c      	ldr	r3, [pc, #112]	; (80007e0 <Skipper_Clock___Init+0xa0>)
 800076e:	685a      	ldr	r2, [r3, #4]
 8000770:	491b      	ldr	r1, [pc, #108]	; (80007e0 <Skipper_Clock___Init+0xa0>)
 8000772:	4b1c      	ldr	r3, [pc, #112]	; (80007e4 <Skipper_Clock___Init+0xa4>)
 8000774:	4313      	orrs	r3, r2
 8000776:	604b      	str	r3, [r1, #4]
						(Skipper_Clock___PLL_N 				<< RCC_PLLCFGR_PLLN_Pos)		|
						(Skipper_Clock___PLL_M 				<< RCC_PLLCFGR_PLLM_Pos)		;

	if(Skipper_Clock___PLL_SOURCE == Skipper_Clock___PLL_USE_HSE)
	{
		RCC -> PLLCFGR 	|= 	(RCC_PLLCFGR_PLLSRC_HSE);
 8000778:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <Skipper_Clock___Init+0xa0>)
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	4a18      	ldr	r2, [pc, #96]	; (80007e0 <Skipper_Clock___Init+0xa0>)
 800077e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000782:	6053      	str	r3, [r2, #4]
	else
	{
		RCC -> PLLCFGR 	&= 	~(RCC_PLLCFGR_PLLSRC_HSE);
	}

	uint8_t RCC_CFGR_AHB_Value = Skipper_Clock___Get_RCC_CFGR_AHB_Value_From_Prescaler_Value(Skipper_Clock___AHB_PRESCALER);
 8000784:	2001      	movs	r0, #1
 8000786:	f7ff fef1 	bl	800056c <Skipper_Clock___Get_RCC_CFGR_AHB_Value_From_Prescaler_Value>
 800078a:	4603      	mov	r3, r0
 800078c:	71fb      	strb	r3, [r7, #7]
	uint8_t RCC_CFGR_APB1_Value = Skipper_Clock___Get_RCC_CFGR_APB_Value_From_Prescaler_Value(Skipper_Clock___APB1_PRESCALER);
 800078e:	2002      	movs	r0, #2
 8000790:	f7ff fea8 	bl	80004e4 <Skipper_Clock___Get_RCC_CFGR_APB_Value_From_Prescaler_Value>
 8000794:	4603      	mov	r3, r0
 8000796:	71bb      	strb	r3, [r7, #6]
	uint8_t RCC_CFGR_APB2_Value = Skipper_Clock___Get_RCC_CFGR_APB_Value_From_Prescaler_Value(Skipper_Clock___APB2_PRESCALER);
 8000798:	2001      	movs	r0, #1
 800079a:	f7ff fea3 	bl	80004e4 <Skipper_Clock___Get_RCC_CFGR_APB_Value_From_Prescaler_Value>
 800079e:	4603      	mov	r3, r0
 80007a0:	717b      	strb	r3, [r7, #5]

	RCC -> CFGR |= 		(RCC_CFGR_AHB_Value  << RCC_CFGR_HPRE_Pos) 	|
 80007a2:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <Skipper_Clock___Init+0xa0>)
 80007a4:	689b      	ldr	r3, [r3, #8]
 80007a6:	79fa      	ldrb	r2, [r7, #7]
 80007a8:	0111      	lsls	r1, r2, #4
						(RCC_CFGR_APB1_Value << RCC_CFGR_PPRE1_Pos) |
 80007aa:	79ba      	ldrb	r2, [r7, #6]
 80007ac:	0292      	lsls	r2, r2, #10
	RCC -> CFGR |= 		(RCC_CFGR_AHB_Value  << RCC_CFGR_HPRE_Pos) 	|
 80007ae:	4311      	orrs	r1, r2
						(RCC_CFGR_APB2_Value << RCC_CFGR_PPRE2_Pos)	;
 80007b0:	797a      	ldrb	r2, [r7, #5]
 80007b2:	0352      	lsls	r2, r2, #13
						(RCC_CFGR_APB1_Value << RCC_CFGR_PPRE1_Pos) |
 80007b4:	430a      	orrs	r2, r1
 80007b6:	4611      	mov	r1, r2
	RCC -> CFGR |= 		(RCC_CFGR_AHB_Value  << RCC_CFGR_HPRE_Pos) 	|
 80007b8:	4a09      	ldr	r2, [pc, #36]	; (80007e0 <Skipper_Clock___Init+0xa0>)
 80007ba:	430b      	orrs	r3, r1
 80007bc:	6093      	str	r3, [r2, #8]

	Skipper_Clock___Turn_On_PLL();
 80007be:	f7ff ff55 	bl	800066c <Skipper_Clock___Turn_On_PLL>

	Skipper_Clock___Set_MUX_Source(Skipper_Clock___MUX_SOURCE);
 80007c2:	2002      	movs	r0, #2
 80007c4:	f7ff ff82 	bl	80006cc <Skipper_Clock___Set_MUX_Source>

	if((Skipper_Clock___MUX_SOURCE != Skipper_Clock___MUX_USE_HSI) && (Skipper_Clock___PLL_SOURCE != Skipper_Clock___PLL_USE_HSI))
	{
		Skipper_Clock___Turn_Off_HSI();
 80007c8:	f7ff ff68 	bl	800069c <Skipper_Clock___Turn_Off_HSI>
	}
	SystemCoreClockUpdate();
 80007cc:	f000 f992 	bl	8000af4 <SystemCoreClockUpdate>
}
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40007000 	.word	0x40007000
 80007dc:	40023c00 	.word	0x40023c00
 80007e0:	40023800 	.word	0x40023800
 80007e4:	03001208 	.word	0x03001208

080007e8 <Skipper_Clock___Systick_Init>:

void Skipper_Clock___Systick_Init()
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
	Skipper_Clock___Micros_Storage = 0;
 80007ec:	4910      	ldr	r1, [pc, #64]	; (8000830 <Skipper_Clock___Systick_Init+0x48>)
 80007ee:	f04f 0200 	mov.w	r2, #0
 80007f2:	f04f 0300 	mov.w	r3, #0
 80007f6:	e9c1 2300 	strd	r2, r3, [r1]
	SysTick -> CTRL |= (Skipper_Clock___SYSTICK_ENABLE_INTERRUPT);
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <Skipper_Clock___Systick_Init+0x4c>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a0d      	ldr	r2, [pc, #52]	; (8000834 <Skipper_Clock___Systick_Init+0x4c>)
 8000800:	f043 0302 	orr.w	r3, r3, #2
 8000804:	6013      	str	r3, [r2, #0]
	{
		SysTick -> CTRL |= (Skipper_Clock___SYSTICK_CLOKC_SOURCE_SYSTEM_CLOCK);
	}
	else
	{
		SysTick -> CTRL &= ~(Skipper_Clock___SYSTICK_CLOKC_SOURCE_SYSTEM_CLOCK);
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <Skipper_Clock___Systick_Init+0x4c>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a0a      	ldr	r2, [pc, #40]	; (8000834 <Skipper_Clock___Systick_Init+0x4c>)
 800080c:	f023 0304 	bic.w	r3, r3, #4
 8000810:	6013      	str	r3, [r2, #0]
	}

	SysTick -> LOAD = ((Skipper_Clock___CORTEX_SYSTEM_TIMER_FREQUENCY / 2) - 1);
 8000812:	4b08      	ldr	r3, [pc, #32]	; (8000834 <Skipper_Clock___Systick_Init+0x4c>)
 8000814:	4a08      	ldr	r2, [pc, #32]	; (8000838 <Skipper_Clock___Systick_Init+0x50>)
 8000816:	605a      	str	r2, [r3, #4]
	SysTick -> CTRL |= (Skipper_Clock___SYSTICK_ENABLE);
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <Skipper_Clock___Systick_Init+0x4c>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a05      	ldr	r2, [pc, #20]	; (8000834 <Skipper_Clock___Systick_Init+0x4c>)
 800081e:	f043 0301 	orr.w	r3, r3, #1
 8000822:	6013      	str	r3, [r2, #0]
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	20000028 	.word	0x20000028
 8000834:	e000e010 	.word	0xe000e010
 8000838:	0044aa1f 	.word	0x0044aa1f

0800083c <Skipper_Clock___Micros>:

uint64_t Skipper_Clock___Micros()
{
 800083c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000840:	b08e      	sub	sp, #56	; 0x38
 8000842:	af00      	add	r7, sp, #0
	uint32_t half_Second_Value 		= (SysTick -> LOAD) + 1;
 8000844:	4b32      	ldr	r3, [pc, #200]	; (8000910 <Skipper_Clock___Micros+0xd4>)
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	3301      	adds	r3, #1
 800084a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t current_Value 	 		= (SysTick -> VAL) + 1;
 800084c:	4b30      	ldr	r3, [pc, #192]	; (8000910 <Skipper_Clock___Micros+0xd4>)
 800084e:	689b      	ldr	r3, [r3, #8]
 8000850:	3301      	adds	r3, #1
 8000852:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t current_SysTick_Time 	= half_Second_Value - current_Value;
 8000854:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000858:	1ad3      	subs	r3, r2, r3
 800085a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint64_t additional_Time		= (((uint64_t)current_SysTick_Time * 500000) / half_Second_Value);
 800085c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800085e:	2200      	movs	r2, #0
 8000860:	469a      	mov	sl, r3
 8000862:	4693      	mov	fp, r2
 8000864:	4652      	mov	r2, sl
 8000866:	465b      	mov	r3, fp
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	f04f 0100 	mov.w	r1, #0
 8000870:	0159      	lsls	r1, r3, #5
 8000872:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8000876:	0150      	lsls	r0, r2, #5
 8000878:	4602      	mov	r2, r0
 800087a:	460b      	mov	r3, r1
 800087c:	ebb2 040a 	subs.w	r4, r2, sl
 8000880:	eb63 050b 	sbc.w	r5, r3, fp
 8000884:	f04f 0200 	mov.w	r2, #0
 8000888:	f04f 0300 	mov.w	r3, #0
 800088c:	01eb      	lsls	r3, r5, #7
 800088e:	ea43 6354 	orr.w	r3, r3, r4, lsr #25
 8000892:	01e2      	lsls	r2, r4, #7
 8000894:	ebb2 0804 	subs.w	r8, r2, r4
 8000898:	eb63 0905 	sbc.w	r9, r3, r5
 800089c:	f04f 0200 	mov.w	r2, #0
 80008a0:	f04f 0300 	mov.w	r3, #0
 80008a4:	ea4f 13c9 	mov.w	r3, r9, lsl #7
 80008a8:	ea43 6358 	orr.w	r3, r3, r8, lsr #25
 80008ac:	ea4f 12c8 	mov.w	r2, r8, lsl #7
 80008b0:	ebb2 0108 	subs.w	r1, r2, r8
 80008b4:	6039      	str	r1, [r7, #0]
 80008b6:	eb63 0309 	sbc.w	r3, r3, r9
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80008c0:	460b      	mov	r3, r1
 80008c2:	eb13 030a 	adds.w	r3, r3, sl
 80008c6:	61bb      	str	r3, [r7, #24]
 80008c8:	4613      	mov	r3, r2
 80008ca:	eb43 030b 	adc.w	r3, r3, fp
 80008ce:	61fb      	str	r3, [r7, #28]
 80008d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008d2:	2200      	movs	r2, #0
 80008d4:	613b      	str	r3, [r7, #16]
 80008d6:	617a      	str	r2, [r7, #20]
 80008d8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80008dc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80008e0:	f7ff fc82 	bl	80001e8 <__aeabi_uldivmod>
 80008e4:	4602      	mov	r2, r0
 80008e6:	460b      	mov	r3, r1
 80008e8:	e9c7 2308 	strd	r2, r3, [r7, #32]
	return(Skipper_Clock___Micros_Storage + additional_Time);
 80008ec:	4b09      	ldr	r3, [pc, #36]	; (8000914 <Skipper_Clock___Micros+0xd8>)
 80008ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80008f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80008f6:	1884      	adds	r4, r0, r2
 80008f8:	60bc      	str	r4, [r7, #8]
 80008fa:	eb41 0303 	adc.w	r3, r1, r3
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8000904:	4610      	mov	r0, r2
 8000906:	4619      	mov	r1, r3
 8000908:	3738      	adds	r7, #56	; 0x38
 800090a:	46bd      	mov	sp, r7
 800090c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000910:	e000e010 	.word	0xe000e010
 8000914:	20000028 	.word	0x20000028

08000918 <Skipper_Clock___Delay_ms>:

void Skipper_Clock___Delay_ms(uint64_t delay)
{
 8000918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800091c:	b088      	sub	sp, #32
 800091e:	af00      	add	r7, sp, #0
 8000920:	e9c7 0102 	strd	r0, r1, [r7, #8]
	uint64_t current_Time 	= Skipper_Clock___Micros();
 8000924:	f7ff ff8a 	bl	800083c <Skipper_Clock___Micros>
 8000928:	e9c7 0106 	strd	r0, r1, [r7, #24]
	uint64_t stop_Time		= current_Time + (delay*1000);
 800092c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000930:	4602      	mov	r2, r0
 8000932:	460b      	mov	r3, r1
 8000934:	f04f 0a00 	mov.w	sl, #0
 8000938:	f04f 0b00 	mov.w	fp, #0
 800093c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8000940:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8000944:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8000948:	4652      	mov	r2, sl
 800094a:	465b      	mov	r3, fp
 800094c:	1a14      	subs	r4, r2, r0
 800094e:	eb63 0501 	sbc.w	r5, r3, r1
 8000952:	f04f 0200 	mov.w	r2, #0
 8000956:	f04f 0300 	mov.w	r3, #0
 800095a:	00ab      	lsls	r3, r5, #2
 800095c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8000960:	00a2      	lsls	r2, r4, #2
 8000962:	4614      	mov	r4, r2
 8000964:	461d      	mov	r5, r3
 8000966:	eb14 0800 	adds.w	r8, r4, r0
 800096a:	eb45 0901 	adc.w	r9, r5, r1
 800096e:	f04f 0200 	mov.w	r2, #0
 8000972:	f04f 0300 	mov.w	r3, #0
 8000976:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800097a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800097e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000982:	4690      	mov	r8, r2
 8000984:	4699      	mov	r9, r3
 8000986:	4640      	mov	r0, r8
 8000988:	4649      	mov	r1, r9
 800098a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800098e:	1814      	adds	r4, r2, r0
 8000990:	603c      	str	r4, [r7, #0]
 8000992:	414b      	adcs	r3, r1
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	e9d7 3400 	ldrd	r3, r4, [r7]
 800099a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	while(Skipper_Clock___Micros() < stop_Time);
 800099e:	bf00      	nop
 80009a0:	f7ff ff4c 	bl	800083c <Skipper_Clock___Micros>
 80009a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80009a8:	4290      	cmp	r0, r2
 80009aa:	eb71 0303 	sbcs.w	r3, r1, r3
 80009ae:	d3f7      	bcc.n	80009a0 <Skipper_Clock___Delay_ms+0x88>
}
 80009b0:	bf00      	nop
 80009b2:	bf00      	nop
 80009b4:	3720      	adds	r7, #32
 80009b6:	46bd      	mov	sp, r7
 80009b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080009bc <SysTick_Handler>:
	uint64_t stop_Time		= current_Time + delay;
	while(Skipper_Clock___Micros() < stop_Time);
}

void SysTick_Handler()
{
 80009bc:	b490      	push	{r4, r7}
 80009be:	af00      	add	r7, sp, #0
	Skipper_Clock___Micros_Storage += 500000;
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <SysTick_Handler+0x20>)
 80009c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009c6:	4c06      	ldr	r4, [pc, #24]	; (80009e0 <SysTick_Handler+0x24>)
 80009c8:	1910      	adds	r0, r2, r4
 80009ca:	f143 0100 	adc.w	r1, r3, #0
 80009ce:	4b03      	ldr	r3, [pc, #12]	; (80009dc <SysTick_Handler+0x20>)
 80009d0:	e9c3 0100 	strd	r0, r1, [r3]
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc90      	pop	{r4, r7}
 80009da:	4770      	bx	lr
 80009dc:	20000028 	.word	0x20000028
 80009e0:	0007a120 	.word	0x0007a120

080009e4 <GPIO_init>:
#include <Skipper_Clock.h>			// Include Skipper clock configuration
#include <USB_Host.h>

#include "../USB_CDC_DEVICE/Core/Inc/USB_CDC_Device.h"

void GPIO_init(void){
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= (1<<3); 		// enable GPIOD clock
 80009e8:	4b2f      	ldr	r3, [pc, #188]	; (8000aa8 <GPIO_init+0xc4>)
 80009ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ec:	4a2e      	ldr	r2, [pc, #184]	; (8000aa8 <GPIO_init+0xc4>)
 80009ee:	f043 0308 	orr.w	r3, r3, #8
 80009f2:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= (1<<2); 		// enable GPIOC clock
 80009f4:	4b2c      	ldr	r3, [pc, #176]	; (8000aa8 <GPIO_init+0xc4>)
 80009f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f8:	4a2b      	ldr	r2, [pc, #172]	; (8000aa8 <GPIO_init+0xc4>)
 80009fa:	f043 0304 	orr.w	r3, r3, #4
 80009fe:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= (1<<0); 		// enable GPIOA clock
 8000a00:	4b29      	ldr	r3, [pc, #164]	; (8000aa8 <GPIO_init+0xc4>)
 8000a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a04:	4a28      	ldr	r2, [pc, #160]	; (8000aa8 <GPIO_init+0xc4>)
 8000a06:	f043 0301 	orr.w	r3, r3, #1
 8000a0a:	6313      	str	r3, [r2, #48]	; 0x30
	//Enable on board LED
	GPIOD->MODER |= (1<<8); 		// set PD4 to output
 8000a0c:	4b27      	ldr	r3, [pc, #156]	; (8000aac <GPIO_init+0xc8>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a26      	ldr	r2, [pc, #152]	; (8000aac <GPIO_init+0xc8>)
 8000a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a16:	6013      	str	r3, [r2, #0]
	GPIOD->ODR &= ~(1<<4);			// set PD4 HIGH
 8000a18:	4b24      	ldr	r3, [pc, #144]	; (8000aac <GPIO_init+0xc8>)
 8000a1a:	695b      	ldr	r3, [r3, #20]
 8000a1c:	4a23      	ldr	r2, [pc, #140]	; (8000aac <GPIO_init+0xc8>)
 8000a1e:	f023 0310 	bic.w	r3, r3, #16
 8000a22:	6153      	str	r3, [r2, #20]

	GPIOA->MODER |= (1<<18);
 8000a24:	4b22      	ldr	r3, [pc, #136]	; (8000ab0 <GPIO_init+0xcc>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a21      	ldr	r2, [pc, #132]	; (8000ab0 <GPIO_init+0xcc>)
 8000a2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a2e:	6013      	str	r3, [r2, #0]
	GPIOA->ODR |= (1<<9);
 8000a30:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <GPIO_init+0xcc>)
 8000a32:	695b      	ldr	r3, [r3, #20]
 8000a34:	4a1e      	ldr	r2, [pc, #120]	; (8000ab0 <GPIO_init+0xcc>)
 8000a36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a3a:	6153      	str	r3, [r2, #20]

	GPIOA->MODER |= (1<<8); 		// set PA4 to output
 8000a3c:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <GPIO_init+0xcc>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a1b      	ldr	r2, [pc, #108]	; (8000ab0 <GPIO_init+0xcc>)
 8000a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a46:	6013      	str	r3, [r2, #0]
	GPIOA->ODR &= ~(1<<4);			// set PA4 HIGH
 8000a48:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <GPIO_init+0xcc>)
 8000a4a:	695b      	ldr	r3, [r3, #20]
 8000a4c:	4a18      	ldr	r2, [pc, #96]	; (8000ab0 <GPIO_init+0xcc>)
 8000a4e:	f023 0310 	bic.w	r3, r3, #16
 8000a52:	6153      	str	r3, [r2, #20]

	GPIOA->MODER |= (1<<6); 		// set PA3 to output
 8000a54:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <GPIO_init+0xcc>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a15      	ldr	r2, [pc, #84]	; (8000ab0 <GPIO_init+0xcc>)
 8000a5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a5e:	6013      	str	r3, [r2, #0]
	GPIOA->ODR &= ~(1<<3);			// set PA3 HIGH
 8000a60:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <GPIO_init+0xcc>)
 8000a62:	695b      	ldr	r3, [r3, #20]
 8000a64:	4a12      	ldr	r2, [pc, #72]	; (8000ab0 <GPIO_init+0xcc>)
 8000a66:	f023 0308 	bic.w	r3, r3, #8
 8000a6a:	6153      	str	r3, [r2, #20]

	GPIOA->MODER |= (1<<4); 		// set PA2 to output
 8000a6c:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <GPIO_init+0xcc>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a0f      	ldr	r2, [pc, #60]	; (8000ab0 <GPIO_init+0xcc>)
 8000a72:	f043 0310 	orr.w	r3, r3, #16
 8000a76:	6013      	str	r3, [r2, #0]
	GPIOA->ODR &= ~(1<<2);			// set PA2 HIGH
 8000a78:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <GPIO_init+0xcc>)
 8000a7a:	695b      	ldr	r3, [r3, #20]
 8000a7c:	4a0c      	ldr	r2, [pc, #48]	; (8000ab0 <GPIO_init+0xcc>)
 8000a7e:	f023 0304 	bic.w	r3, r3, #4
 8000a82:	6153      	str	r3, [r2, #20]

	GPIOC->MODER |= (1<<0); 		// set PA2 to output
 8000a84:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <GPIO_init+0xd0>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a0a      	ldr	r2, [pc, #40]	; (8000ab4 <GPIO_init+0xd0>)
 8000a8a:	f043 0301 	orr.w	r3, r3, #1
 8000a8e:	6013      	str	r3, [r2, #0]
	GPIOC->ODR &= ~(1<<0);			// set PA2 LOW
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <GPIO_init+0xd0>)
 8000a92:	695b      	ldr	r3, [r3, #20]
 8000a94:	4a07      	ldr	r2, [pc, #28]	; (8000ab4 <GPIO_init+0xd0>)
 8000a96:	f023 0301 	bic.w	r3, r3, #1
 8000a9a:	6153      	str	r3, [r2, #20]

}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40020c00 	.word	0x40020c00
 8000ab0:	40020000 	.word	0x40020000
 8000ab4:	40020800 	.word	0x40020800

08000ab8 <main>:

int main(void) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	Skipper_Clock___Init();			// initiate the clock
 8000abc:	f7ff fe40 	bl	8000740 <Skipper_Clock___Init>
	Skipper_Clock___Systick_Init();
 8000ac0:	f7ff fe92 	bl	80007e8 <Skipper_Clock___Systick_Init>
	GPIO_init();					//initiate the GPIO to be used in this program.
 8000ac4:	f7ff ff8e 	bl	80009e4 <GPIO_init>
	//USB_Host___Init(0);
	USB_CDC_Device___Init(1);
 8000ac8:	2001      	movs	r0, #1
 8000aca:	f000 f8bb 	bl	8000c44 <USB_CDC_Device___Init>

	for(;;)
 8000ace:	e7fe      	b.n	8000ace <main+0x16>

08000ad0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <SystemInit+0x20>)
 8000ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ada:	4a05      	ldr	r2, [pc, #20]	; (8000af0 <SystemInit+0x20>)
 8000adc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ae0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b087      	sub	sp, #28
 8000af8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	2300      	movs	r3, #0
 8000b00:	617b      	str	r3, [r7, #20]
 8000b02:	2302      	movs	r3, #2
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	2300      	movs	r3, #0
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000b0e:	4b34      	ldr	r3, [pc, #208]	; (8000be0 <SystemCoreClockUpdate+0xec>)
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	f003 030c 	and.w	r3, r3, #12
 8000b16:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	2b08      	cmp	r3, #8
 8000b1c:	d011      	beq.n	8000b42 <SystemCoreClockUpdate+0x4e>
 8000b1e:	693b      	ldr	r3, [r7, #16]
 8000b20:	2b08      	cmp	r3, #8
 8000b22:	d844      	bhi.n	8000bae <SystemCoreClockUpdate+0xba>
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d003      	beq.n	8000b32 <SystemCoreClockUpdate+0x3e>
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	2b04      	cmp	r3, #4
 8000b2e:	d004      	beq.n	8000b3a <SystemCoreClockUpdate+0x46>
 8000b30:	e03d      	b.n	8000bae <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000b32:	4b2c      	ldr	r3, [pc, #176]	; (8000be4 <SystemCoreClockUpdate+0xf0>)
 8000b34:	4a2c      	ldr	r2, [pc, #176]	; (8000be8 <SystemCoreClockUpdate+0xf4>)
 8000b36:	601a      	str	r2, [r3, #0]
      break;
 8000b38:	e03d      	b.n	8000bb6 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000b3a:	4b2a      	ldr	r3, [pc, #168]	; (8000be4 <SystemCoreClockUpdate+0xf0>)
 8000b3c:	4a2a      	ldr	r2, [pc, #168]	; (8000be8 <SystemCoreClockUpdate+0xf4>)
 8000b3e:	601a      	str	r2, [r3, #0]
      break;
 8000b40:	e039      	b.n	8000bb6 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000b42:	4b27      	ldr	r3, [pc, #156]	; (8000be0 <SystemCoreClockUpdate+0xec>)
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	0d9b      	lsrs	r3, r3, #22
 8000b48:	f003 0301 	and.w	r3, r3, #1
 8000b4c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b4e:	4b24      	ldr	r3, [pc, #144]	; (8000be0 <SystemCoreClockUpdate+0xec>)
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000b56:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d00c      	beq.n	8000b78 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000b5e:	4a22      	ldr	r2, [pc, #136]	; (8000be8 <SystemCoreClockUpdate+0xf4>)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b66:	4a1e      	ldr	r2, [pc, #120]	; (8000be0 <SystemCoreClockUpdate+0xec>)
 8000b68:	6852      	ldr	r2, [r2, #4]
 8000b6a:	0992      	lsrs	r2, r2, #6
 8000b6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000b70:	fb02 f303 	mul.w	r3, r2, r3
 8000b74:	617b      	str	r3, [r7, #20]
 8000b76:	e00b      	b.n	8000b90 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000b78:	4a1b      	ldr	r2, [pc, #108]	; (8000be8 <SystemCoreClockUpdate+0xf4>)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b80:	4a17      	ldr	r2, [pc, #92]	; (8000be0 <SystemCoreClockUpdate+0xec>)
 8000b82:	6852      	ldr	r2, [r2, #4]
 8000b84:	0992      	lsrs	r2, r2, #6
 8000b86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000b8a:	fb02 f303 	mul.w	r3, r2, r3
 8000b8e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000b90:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <SystemCoreClockUpdate+0xec>)
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	0c1b      	lsrs	r3, r3, #16
 8000b96:	f003 0303 	and.w	r3, r3, #3
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000ba0:	697a      	ldr	r2, [r7, #20]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ba8:	4a0e      	ldr	r2, [pc, #56]	; (8000be4 <SystemCoreClockUpdate+0xf0>)
 8000baa:	6013      	str	r3, [r2, #0]
      break;
 8000bac:	e003      	b.n	8000bb6 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8000bae:	4b0d      	ldr	r3, [pc, #52]	; (8000be4 <SystemCoreClockUpdate+0xf0>)
 8000bb0:	4a0d      	ldr	r2, [pc, #52]	; (8000be8 <SystemCoreClockUpdate+0xf4>)
 8000bb2:	601a      	str	r2, [r3, #0]
      break;
 8000bb4:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <SystemCoreClockUpdate+0xec>)
 8000bb8:	689b      	ldr	r3, [r3, #8]
 8000bba:	091b      	lsrs	r3, r3, #4
 8000bbc:	f003 030f 	and.w	r3, r3, #15
 8000bc0:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <SystemCoreClockUpdate+0xf8>)
 8000bc2:	5cd3      	ldrb	r3, [r2, r3]
 8000bc4:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000bc6:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <SystemCoreClockUpdate+0xf0>)
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8000bd0:	4a04      	ldr	r2, [pc, #16]	; (8000be4 <SystemCoreClockUpdate+0xf0>)
 8000bd2:	6013      	str	r3, [r2, #0]
}
 8000bd4:	bf00      	nop
 8000bd6:	371c      	adds	r7, #28
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	40023800 	.word	0x40023800
 8000be4:	20000000 	.word	0x20000000
 8000be8:	00f42400 	.word	0x00f42400
 8000bec:	08002354 	.word	0x08002354

08000bf0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
   ldr   r0, =_estack
 8000bf0:	480d      	ldr	r0, [pc, #52]	; (8000c28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bf2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bf4:	f7ff ff6c 	bl	8000ad0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bf8:	480c      	ldr	r0, [pc, #48]	; (8000c2c <LoopForever+0x6>)
  ldr r1, =_edata
 8000bfa:	490d      	ldr	r1, [pc, #52]	; (8000c30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bfc:	4a0d      	ldr	r2, [pc, #52]	; (8000c34 <LoopForever+0xe>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c00:	e002      	b.n	8000c08 <LoopCopyDataInit>

08000c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c06:	3304      	adds	r3, #4

08000c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c0c:	d3f9      	bcc.n	8000c02 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0e:	4a0a      	ldr	r2, [pc, #40]	; (8000c38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c10:	4c0a      	ldr	r4, [pc, #40]	; (8000c3c <LoopForever+0x16>)
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c14:	e001      	b.n	8000c1a <LoopFillZerobss>

08000c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c18:	3204      	adds	r2, #4

08000c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c1c:	d3fb      	bcc.n	8000c16 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c1e:	f001 fb69 	bl	80022f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c22:	f7ff ff49 	bl	8000ab8 <main>

08000c26 <LoopForever>:

LoopForever:
    b LoopForever
 8000c26:	e7fe      	b.n	8000c26 <LoopForever>
   ldr   r0, =_estack
 8000c28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c30:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000c34:	08002374 	.word	0x08002374
  ldr r2, =_sbss
 8000c38:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000c3c:	200002c4 	.word	0x200002c4

08000c40 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c40:	e7fe      	b.n	8000c40 <ADC_IRQHandler>
	...

08000c44 <USB_CDC_Device___Init>:
#include <USB_LL_Interrupts_Device.h>

void USB_CDC_Device___RX_Callback(USB_LL_Interrupts_Device___RX_CALLBACK_PARAMETERS);

void USB_CDC_Device___Init(uint8_t port_Number)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b088      	sub	sp, #32
 8000c48:	af02      	add	r7, sp, #8
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71fb      	strb	r3, [r7, #7]
	USB_LL_Device___FIFO_Config_TypeDef FIFO_Config = {0};
 8000c4e:	f107 0308 	add.w	r3, r7, #8
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	819a      	strh	r2, [r3, #12]

	FIFO_Config.RX_FIFO_Depth = 0x80;
 8000c5c:	2380      	movs	r3, #128	; 0x80
 8000c5e:	813b      	strh	r3, [r7, #8]
	FIFO_Config.Endpoint_TX_FIFO_Depth[0] = 0x80;
 8000c60:	2380      	movs	r3, #128	; 0x80
 8000c62:	817b      	strh	r3, [r7, #10]
	FIFO_Config.Endpoint_TX_FIFO_Depth[1] = 0x80;
 8000c64:	2380      	movs	r3, #128	; 0x80
 8000c66:	81bb      	strh	r3, [r7, #12]
	FIFO_Config.Endpoint_TX_FIFO_Depth[2] = 0x80;
 8000c68:	2380      	movs	r3, #128	; 0x80
 8000c6a:	81fb      	strh	r3, [r7, #14]

	USB_LL_Hardware___GPIO_Init(port_Number);
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f000 f960 	bl	8000f34 <USB_LL_Hardware___GPIO_Init>
	USB_LL_Hardware___Init(port_Number, USB_LL_Hardware___DEVICE_MODE);
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	2100      	movs	r1, #0
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f000 f9af 	bl	8000fdc <USB_LL_Hardware___Init>
	USB_LL_Device___Set_FIFO_Size(port_Number, FIFO_Config);
 8000c7e:	79f8      	ldrb	r0, [r7, #7]
 8000c80:	8abb      	ldrh	r3, [r7, #20]
 8000c82:	f8ad 3000 	strh.w	r3, [sp]
 8000c86:	f107 0308 	add.w	r3, r7, #8
 8000c8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c8c:	f000 f81a 	bl	8000cc4 <USB_LL_Device___Set_FIFO_Size>
	USB_LL_Interrupts_Device___Set_RX_Callback(port_Number, USB_CDC_Device___RX_Callback);
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	4904      	ldr	r1, [pc, #16]	; (8000ca4 <USB_CDC_Device___Init+0x60>)
 8000c94:	4618      	mov	r0, r3
 8000c96:	f000 ff8f 	bl	8001bb8 <USB_LL_Interrupts_Device___Set_RX_Callback>
}
 8000c9a:	bf00      	nop
 8000c9c:	3718      	adds	r7, #24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	08000ca9 	.word	0x08000ca9

08000ca8 <USB_CDC_Device___RX_Callback>:

void USB_CDC_Device___RX_Callback(USB_LL_Interrupts_Device___RX_CALLBACK_PARAMETERS)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	6039      	str	r1, [r7, #0]
 8000cb2:	71fb      	strb	r3, [r7, #7]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	80bb      	strh	r3, [r7, #4]

}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <USB_LL_Device___Set_FIFO_Size>:
#include "../../USB_LL_CORE/Inc/USB_LL_Definitions.h"
#include "../../USB_LL_CORE/Inc/USB_LL_Hardware.h"
#include "../../USB_LL_CORE/Inc/USB_LL_Interrupts.h"

void USB_LL_Device___Set_FIFO_Size(uint8_t port_Number, USB_LL_Device___FIFO_Config_TypeDef FIFO_Config)
{
 8000cc4:	b084      	sub	sp, #16
 8000cc6:	b590      	push	{r4, r7, lr}
 8000cc8:	b087      	sub	sp, #28
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	4604      	mov	r4, r0
 8000cce:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8000cd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000cd6:	4623      	mov	r3, r4
 8000cd8:	71fb      	strb	r3, [r7, #7]
	USB_OTG_GlobalTypeDef* USB = USB_LL_Hardware___Get_USB(port_Number);
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f000 f8bf 	bl	8000e60 <USB_LL_Hardware___Get_USB>
 8000ce2:	60f8      	str	r0, [r7, #12]
	uint32_t Start_Address = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
	uint8_t num_Endpoints;

	if(port_Number == USB_LL_Device___PORT_ZERO)
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d102      	bne.n	8000cf4 <USB_LL_Device___Set_FIFO_Size+0x30>
	{
		num_Endpoints = USB_LL_Device___PORT_ZERO_NUM_ENDPOINTS;
 8000cee:	2304      	movs	r3, #4
 8000cf0:	74fb      	strb	r3, [r7, #19]
 8000cf2:	e001      	b.n	8000cf8 <USB_LL_Device___Set_FIFO_Size+0x34>
	}
	else
	{
		num_Endpoints = USB_LL_Device___PORT_ONE_NUM_ENDPOINTS;
 8000cf4:	2306      	movs	r3, #6
 8000cf6:	74fb      	strb	r3, [r7, #19]
	}

	USB -> GRXFSIZ = (FIFO_Config.RX_FIFO_Depth);
 8000cf8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	625a      	str	r2, [r3, #36]	; 0x24
	Start_Address += FIFO_Config.RX_FIFO_Depth;
 8000d00:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000d02:	461a      	mov	r2, r3
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	4413      	add	r3, r2
 8000d08:	617b      	str	r3, [r7, #20]
	USB -> DIEPTXF0_HNPTXFSIZ = ((FIFO_Config.Endpoint_TX_FIFO_Depth[0] << USB_OTG_TX0FD_Pos) | (Start_Address << USB_OTG_TX0FSA_Pos));
 8000d0a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000d0c:	041b      	lsls	r3, r3, #16
 8000d0e:	461a      	mov	r2, r3
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	431a      	orrs	r2, r3
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	629a      	str	r2, [r3, #40]	; 0x28
	Start_Address += FIFO_Config.Endpoint_TX_FIFO_Depth[0];
 8000d18:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	4413      	add	r3, r2
 8000d20:	617b      	str	r3, [r7, #20]

	for(uint8_t i = 0; i < num_Endpoints; i++)
 8000d22:	2300      	movs	r3, #0
 8000d24:	74bb      	strb	r3, [r7, #18]
 8000d26:	e02c      	b.n	8000d82 <USB_LL_Device___Set_FIFO_Size+0xbe>
	{
		if(FIFO_Config.Endpoint_TX_FIFO_Depth[i+1])
 8000d28:	7cbb      	ldrb	r3, [r7, #18]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	3328      	adds	r3, #40	; 0x28
 8000d30:	443b      	add	r3, r7
 8000d32:	88db      	ldrh	r3, [r3, #6]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d01a      	beq.n	8000d6e <USB_LL_Device___Set_FIFO_Size+0xaa>
		{
			USB -> DIEPTXF[i] 	= 	((FIFO_Config.Endpoint_TX_FIFO_Depth[i+1] << USB_OTG_DIEPTXF_INEPTXFD_Pos) | (Start_Address << USB_OTG_DIEPTXF_INEPTXSA_Pos));
 8000d38:	7cbb      	ldrb	r3, [r7, #18]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	3328      	adds	r3, #40	; 0x28
 8000d40:	443b      	add	r3, r7
 8000d42:	88db      	ldrh	r3, [r3, #6]
 8000d44:	041b      	lsls	r3, r3, #16
 8000d46:	4619      	mov	r1, r3
 8000d48:	7cbb      	ldrb	r3, [r7, #18]
 8000d4a:	697a      	ldr	r2, [r7, #20]
 8000d4c:	430a      	orrs	r2, r1
 8000d4e:	68f9      	ldr	r1, [r7, #12]
 8000d50:	3340      	adds	r3, #64	; 0x40
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	440b      	add	r3, r1
 8000d56:	605a      	str	r2, [r3, #4]
			Start_Address 		+= 	FIFO_Config.Endpoint_TX_FIFO_Depth[i+1];
 8000d58:	7cbb      	ldrb	r3, [r7, #18]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	3328      	adds	r3, #40	; 0x28
 8000d60:	443b      	add	r3, r7
 8000d62:	88db      	ldrh	r3, [r3, #6]
 8000d64:	461a      	mov	r2, r3
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	4413      	add	r3, r2
 8000d6a:	617b      	str	r3, [r7, #20]
 8000d6c:	e006      	b.n	8000d7c <USB_LL_Device___Set_FIFO_Size+0xb8>
		}
		else
		{
			USB -> DIEPTXF[i] = 0;
 8000d6e:	7cbb      	ldrb	r3, [r7, #18]
 8000d70:	68fa      	ldr	r2, [r7, #12]
 8000d72:	3340      	adds	r3, #64	; 0x40
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	4413      	add	r3, r2
 8000d78:	2200      	movs	r2, #0
 8000d7a:	605a      	str	r2, [r3, #4]
	for(uint8_t i = 0; i < num_Endpoints; i++)
 8000d7c:	7cbb      	ldrb	r3, [r7, #18]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	74bb      	strb	r3, [r7, #18]
 8000d82:	7cba      	ldrb	r2, [r7, #18]
 8000d84:	7cfb      	ldrb	r3, [r7, #19]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d3ce      	bcc.n	8000d28 <USB_LL_Device___Set_FIFO_Size+0x64>
		}
	}
}
 8000d8a:	bf00      	nop
 8000d8c:	bf00      	nop
 8000d8e:	371c      	adds	r7, #28
 8000d90:	46bd      	mov	sp, r7
 8000d92:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000d96:	b004      	add	sp, #16
 8000d98:	4770      	bx	lr
	...

08000d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	db0b      	blt.n	8000dc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	f003 021f 	and.w	r2, r3, #31
 8000db4:	4907      	ldr	r1, [pc, #28]	; (8000dd4 <__NVIC_EnableIRQ+0x38>)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	095b      	lsrs	r3, r3, #5
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	e000e100 	.word	0xe000e100

08000dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	6039      	str	r1, [r7, #0]
 8000de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	db0a      	blt.n	8000e02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	490c      	ldr	r1, [pc, #48]	; (8000e24 <__NVIC_SetPriority+0x4c>)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	0112      	lsls	r2, r2, #4
 8000df8:	b2d2      	uxtb	r2, r2
 8000dfa:	440b      	add	r3, r1
 8000dfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e00:	e00a      	b.n	8000e18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	4908      	ldr	r1, [pc, #32]	; (8000e28 <__NVIC_SetPriority+0x50>)
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	f003 030f 	and.w	r3, r3, #15
 8000e0e:	3b04      	subs	r3, #4
 8000e10:	0112      	lsls	r2, r2, #4
 8000e12:	b2d2      	uxtb	r2, r2
 8000e14:	440b      	add	r3, r1
 8000e16:	761a      	strb	r2, [r3, #24]
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000e100 	.word	0xe000e100
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <USB_LL_Hardware___Get_USB_BASE>:
#endif

// ------------------- FETCH USB REGISTER STRUCTURE FUNCTIONS ------------------------

uint32_t USB_LL_Hardware___Get_USB_BASE(uint8_t port_number)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
	if (port_number == USB_LL_Hardware___PORT_0)
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d102      	bne.n	8000e42 <USB_LL_Hardware___Get_USB_BASE+0x16>
	{
	    return (USB_OTG_FS_PERIPH_BASE);
 8000e3c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e40:	e005      	b.n	8000e4e <USB_LL_Hardware___Get_USB_BASE+0x22>
	}
	else if (port_number == USB_LL_Hardware___PORT_1)
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d101      	bne.n	8000e4c <USB_LL_Hardware___Get_USB_BASE+0x20>
	{
	    return (USB_OTG_HS_PERIPH_BASE);
 8000e48:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <USB_LL_Hardware___Get_USB_BASE+0x30>)
 8000e4a:	e000      	b.n	8000e4e <USB_LL_Hardware___Get_USB_BASE+0x22>
	}
	else
	{
		return(0);
 8000e4c:	2300      	movs	r3, #0
	}
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	40040000 	.word	0x40040000

08000e60 <USB_LL_Hardware___Get_USB>:

USB_OTG_GlobalTypeDef* USB_LL_Hardware___Get_USB(uint8_t port_Number)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
	return((USB_OTG_GlobalTypeDef *) USB_LL_Hardware___Get_USB_BASE(port_Number));
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ffdd 	bl	8000e2c <USB_LL_Hardware___Get_USB_BASE>
 8000e72:	4603      	mov	r3, r0
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <USB_LL_Hardware___Get_USB_Device>:

USB_OTG_DeviceTypeDef* USB_LL_Hardware___Get_USB_Device(uint8_t port_Number)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
	return((USB_OTG_DeviceTypeDef *) (USB_LL_Hardware___Get_USB_BASE(port_Number) + USB_OTG_DEVICE_BASE));
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff ffcf 	bl	8000e2c <USB_LL_Hardware___Get_USB_BASE>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <USB_LL_Hardware___Get_USB_Host>:

USB_OTG_HostTypeDef* USB_LL_Hardware___Get_USB_Host(uint8_t port_Number)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	71fb      	strb	r3, [r7, #7]
	return((USB_OTG_HostTypeDef *) (USB_LL_Hardware___Get_USB_BASE(port_Number) + USB_OTG_HOST_BASE));
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ffbf 	bl	8000e2c <USB_LL_Hardware___Get_USB_BASE>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <USB_LL_Hardware___Get_USB_Host_Port>:

USB_OTG_HostPortTypeDef* USB_LL_Hardware___Get_USB_Host_Port(uint8_t port_Number)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71fb      	strb	r3, [r7, #7]
	return((USB_OTG_HostPortTypeDef *) (USB_LL_Hardware___Get_USB_BASE(port_Number) + USB_OTG_HOST_PORT_BASE));
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff ffaf 	bl	8000e2c <USB_LL_Hardware___Get_USB_BASE>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <USB_LL_Hardware___Get_USB_Host_Channel>:

USB_OTG_HostChannelTypeDef* USB_LL_Hardware___Get_USB_Host_Channel(uint8_t port_Number, uint8_t channel_Number)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	460a      	mov	r2, r1
 8000ee6:	71fb      	strb	r3, [r7, #7]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	71bb      	strb	r3, [r7, #6]
	return((USB_OTG_HostChannelTypeDef *) (USB_LL_Hardware___Get_USB_BASE(port_Number) + USB_OTG_HOST_CHANNEL_BASE + (channel_Number * USB_OTG_HOST_CHANNEL_SIZE)));
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff ff9c 	bl	8000e2c <USB_LL_Hardware___Get_USB_BASE>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	79bb      	ldrb	r3, [r7, #6]
 8000ef8:	015b      	lsls	r3, r3, #5
 8000efa:	4413      	add	r3, r2
 8000efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <USB_LL_Hardware___Get_USB_Device_OUT>:
{
	return((USB_OTG_INEndpointTypeDef *) (USB_LL_Hardware___Get_USB_BASE(port_Number) + USB_OTG_IN_ENDPOINT_BASE + (endpoint_Number * USB_OTG_EP_REG_SIZE)));
}

USB_OTG_OUTEndpointTypeDef* USB_LL_Hardware___Get_USB_Device_OUT(uint8_t port_Number, uint8_t endpoint_Number)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	460a      	mov	r2, r1
 8000f12:	71fb      	strb	r3, [r7, #7]
 8000f14:	4613      	mov	r3, r2
 8000f16:	71bb      	strb	r3, [r7, #6]
	return((USB_OTG_OUTEndpointTypeDef *) (USB_LL_Hardware___Get_USB_BASE(port_Number) + USB_OTG_OUT_ENDPOINT_BASE + (endpoint_Number * USB_OTG_EP_REG_SIZE)));
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff ff86 	bl	8000e2c <USB_LL_Hardware___Get_USB_BASE>
 8000f20:	4602      	mov	r2, r0
 8000f22:	79bb      	ldrb	r3, [r7, #6]
 8000f24:	015b      	lsls	r3, r3, #5
 8000f26:	4413      	add	r3, r2
 8000f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <USB_LL_Hardware___GPIO_Init>:
// -----------------------------------------------------------------------------------

// ---------------------------- USB INIT FUNCTIONS -----------------------------------

void USB_LL_Hardware___GPIO_Init(uint8_t port_Number)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
	if(port_Number == USB_LL_Hardware___PORT_0)
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d11e      	bne.n	8000f82 <USB_LL_Hardware___GPIO_Init+0x4e>
	{
		RCC -> AHB1ENR 	|= (RCC_AHB1ENR_GPIOAEN);
 8000f44:	4b22      	ldr	r3, [pc, #136]	; (8000fd0 <USB_LL_Hardware___GPIO_Init+0x9c>)
 8000f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f48:	4a21      	ldr	r2, [pc, #132]	; (8000fd0 <USB_LL_Hardware___GPIO_Init+0x9c>)
 8000f4a:	f043 0301 	orr.w	r3, r3, #1
 8000f4e:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOA -> MODER 	|= (USB_LL_Hardware___GPIO_ALTERNATE_MODE 	<< GPIO_MODER_MODE11_Pos);
 8000f50:	4b20      	ldr	r3, [pc, #128]	; (8000fd4 <USB_LL_Hardware___GPIO_Init+0xa0>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a1f      	ldr	r2, [pc, #124]	; (8000fd4 <USB_LL_Hardware___GPIO_Init+0xa0>)
 8000f56:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f5a:	6013      	str	r3, [r2, #0]
		GPIOA -> MODER 	|= (USB_LL_Hardware___GPIO_ALTERNATE_MODE 	<< GPIO_MODER_MODE12_Pos);
 8000f5c:	4b1d      	ldr	r3, [pc, #116]	; (8000fd4 <USB_LL_Hardware___GPIO_Init+0xa0>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a1c      	ldr	r2, [pc, #112]	; (8000fd4 <USB_LL_Hardware___GPIO_Init+0xa0>)
 8000f62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f66:	6013      	str	r3, [r2, #0]
		GPIOA -> AFR[1] |= (USB_LL_Hardware___GPIO_Alt_FUNCTION_10 	<< GPIO_AFRH_AFSEL11_Pos);
 8000f68:	4b1a      	ldr	r3, [pc, #104]	; (8000fd4 <USB_LL_Hardware___GPIO_Init+0xa0>)
 8000f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6c:	4a19      	ldr	r2, [pc, #100]	; (8000fd4 <USB_LL_Hardware___GPIO_Init+0xa0>)
 8000f6e:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 8000f72:	6253      	str	r3, [r2, #36]	; 0x24
		GPIOA -> AFR[1] |= (USB_LL_Hardware___GPIO_Alt_FUNCTION_10 	<< GPIO_AFRH_AFSEL12_Pos);
 8000f74:	4b17      	ldr	r3, [pc, #92]	; (8000fd4 <USB_LL_Hardware___GPIO_Init+0xa0>)
 8000f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f78:	4a16      	ldr	r2, [pc, #88]	; (8000fd4 <USB_LL_Hardware___GPIO_Init+0xa0>)
 8000f7a:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8000f7e:	6253      	str	r3, [r2, #36]	; 0x24
		GPIOB -> MODER 	|= (USB_LL_Hardware___GPIO_ALTERNATE_MODE 	<< GPIO_MODER_MODE14_Pos);
		GPIOB -> MODER 	|= (USB_LL_Hardware___GPIO_ALTERNATE_MODE 	<< GPIO_MODER_MODE15_Pos);
		GPIOB -> AFR[1] |= (USB_LL_Hardware___GPIO_Alt_FUNCTION_12 	<< GPIO_AFRH_AFSEL14_Pos);
		GPIOB -> AFR[1] |= (USB_LL_Hardware___GPIO_Alt_FUNCTION_12 	<< GPIO_AFRH_AFSEL15_Pos);
	}
}
 8000f80:	e020      	b.n	8000fc4 <USB_LL_Hardware___GPIO_Init+0x90>
	else if(port_Number == USB_LL_Hardware___PORT_1)
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d11d      	bne.n	8000fc4 <USB_LL_Hardware___GPIO_Init+0x90>
		RCC -> AHB1ENR 	|= (RCC_AHB1ENR_GPIOBEN);
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <USB_LL_Hardware___GPIO_Init+0x9c>)
 8000f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8c:	4a10      	ldr	r2, [pc, #64]	; (8000fd0 <USB_LL_Hardware___GPIO_Init+0x9c>)
 8000f8e:	f043 0302 	orr.w	r3, r3, #2
 8000f92:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOB -> MODER 	|= (USB_LL_Hardware___GPIO_ALTERNATE_MODE 	<< GPIO_MODER_MODE14_Pos);
 8000f94:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <USB_LL_Hardware___GPIO_Init+0xa4>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a0f      	ldr	r2, [pc, #60]	; (8000fd8 <USB_LL_Hardware___GPIO_Init+0xa4>)
 8000f9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000f9e:	6013      	str	r3, [r2, #0]
		GPIOB -> MODER 	|= (USB_LL_Hardware___GPIO_ALTERNATE_MODE 	<< GPIO_MODER_MODE15_Pos);
 8000fa0:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <USB_LL_Hardware___GPIO_Init+0xa4>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a0c      	ldr	r2, [pc, #48]	; (8000fd8 <USB_LL_Hardware___GPIO_Init+0xa4>)
 8000fa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000faa:	6013      	str	r3, [r2, #0]
		GPIOB -> AFR[1] |= (USB_LL_Hardware___GPIO_Alt_FUNCTION_12 	<< GPIO_AFRH_AFSEL14_Pos);
 8000fac:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <USB_LL_Hardware___GPIO_Init+0xa4>)
 8000fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb0:	4a09      	ldr	r2, [pc, #36]	; (8000fd8 <USB_LL_Hardware___GPIO_Init+0xa4>)
 8000fb2:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 8000fb6:	6253      	str	r3, [r2, #36]	; 0x24
		GPIOB -> AFR[1] |= (USB_LL_Hardware___GPIO_Alt_FUNCTION_12 	<< GPIO_AFRH_AFSEL15_Pos);
 8000fb8:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <USB_LL_Hardware___GPIO_Init+0xa4>)
 8000fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fbc:	4a06      	ldr	r2, [pc, #24]	; (8000fd8 <USB_LL_Hardware___GPIO_Init+0xa4>)
 8000fbe:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000fc2:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40020000 	.word	0x40020000
 8000fd8:	40020400 	.word	0x40020400

08000fdc <USB_LL_Hardware___Init>:

void USB_LL_Hardware___Init(uint8_t port_Number, uint8_t port_Mode)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	460a      	mov	r2, r1
 8000fe6:	71fb      	strb	r3, [r7, #7]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	71bb      	strb	r3, [r7, #6]
	USB_OTG_GlobalTypeDef* USB = USB_LL_Hardware___Get_USB(port_Number);
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff ff36 	bl	8000e60 <USB_LL_Hardware___Get_USB>
 8000ff4:	6178      	str	r0, [r7, #20]

	if(port_Number == USB_LL_Hardware___PORT_0)
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d10d      	bne.n	8001018 <USB_LL_Hardware___Init+0x3c>
	{
		RCC->AHB2ENR |= (RCC_AHB2ENR_OTGFSEN);
 8000ffc:	4b5a      	ldr	r3, [pc, #360]	; (8001168 <USB_LL_Hardware___Init+0x18c>)
 8000ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001000:	4a59      	ldr	r2, [pc, #356]	; (8001168 <USB_LL_Hardware___Init+0x18c>)
 8001002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001006:	6353      	str	r3, [r2, #52]	; 0x34
		NVIC_SetPriority (OTG_FS_IRQn, 1);
 8001008:	2101      	movs	r1, #1
 800100a:	2043      	movs	r0, #67	; 0x43
 800100c:	f7ff fee4 	bl	8000dd8 <__NVIC_SetPriority>
		NVIC_EnableIRQ (OTG_FS_IRQn);
 8001010:	2043      	movs	r0, #67	; 0x43
 8001012:	f7ff fec3 	bl	8000d9c <__NVIC_EnableIRQ>
 8001016:	e00f      	b.n	8001038 <USB_LL_Hardware___Init+0x5c>
	}
	else if(port_Number == USB_LL_Hardware___PORT_1)
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d10c      	bne.n	8001038 <USB_LL_Hardware___Init+0x5c>
	{
		RCC->AHB1ENR |= (RCC_AHB1ENR_OTGHSEN);
 800101e:	4b52      	ldr	r3, [pc, #328]	; (8001168 <USB_LL_Hardware___Init+0x18c>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a51      	ldr	r2, [pc, #324]	; (8001168 <USB_LL_Hardware___Init+0x18c>)
 8001024:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
		NVIC_SetPriority (OTG_HS_IRQn, 1);
 800102a:	2101      	movs	r1, #1
 800102c:	204d      	movs	r0, #77	; 0x4d
 800102e:	f7ff fed3 	bl	8000dd8 <__NVIC_SetPriority>
		NVIC_EnableIRQ (OTG_HS_IRQn);
 8001032:	204d      	movs	r0, #77	; 0x4d
 8001034:	f7ff feb2 	bl	8000d9c <__NVIC_EnableIRQ>
	}

	Skipper_Clock___Delay_ms(USB_LL_Hardware___USB_ENABLE_DELAY);
 8001038:	f04f 0080 	mov.w	r0, #128	; 0x80
 800103c:	f04f 0100 	mov.w	r1, #0
 8001040:	f7ff fc6a 	bl	8000918 <Skipper_Clock___Delay_ms>

	USB -> GAHBCFG &= ~(USB_OTG_GAHBCFG_DMAEN);
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	f023 0220 	bic.w	r2, r3, #32
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	609a      	str	r2, [r3, #8]
	USB -> GUSBCFG &= ~(USB_OTG_GUSBCFG_HNPCAP);
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	60da      	str	r2, [r3, #12]
	USB -> GUSBCFG &= ~(USB_OTG_GUSBCFG_SRPCAP);
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	60da      	str	r2, [r3, #12]
	USB -> GUSBCFG &= ~(USB_OTG_GUSBCFG_TRDT_Msk);
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	60da      	str	r2, [r3, #12]
	USB -> GUSBCFG |=  (USB_LL_Hardware___TRDT_Value << USB_OTG_GUSBCFG_TRDT_Pos);
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	f443 52c0 	orr.w	r2, r3, #6144	; 0x1800
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	60da      	str	r2, [r3, #12]
	USB -> GUSBCFG |=  (USB_OTG_GUSBCFG_PHYSEL);
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	60da      	str	r2, [r3, #12]

	if(port_Mode == USB_LL_Hardware___HOST_MODE)
 800108c:	79bb      	ldrb	r3, [r7, #6]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d122      	bne.n	80010d8 <USB_LL_Hardware___Init+0xfc>
	{
		USB_OTG_HostPortTypeDef* 	USB_Host_Port 	= USB_LL_Hardware___Get_USB_Host_Port(port_Number);
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ff11 	bl	8000ebc <USB_LL_Hardware___Get_USB_Host_Port>
 800109a:	60f8      	str	r0, [r7, #12]
		USB_OTG_HostTypeDef* 		USB_Host 		= USB_LL_Hardware___Get_USB_Host(port_Number);
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fefc 	bl	8000e9c <USB_LL_Hardware___Get_USB_Host>
 80010a4:	60b8      	str	r0, [r7, #8]

		USB -> 				GUSBCFG 	|= 	(USB_OTG_GUSBCFG_FHMOD);
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	60da      	str	r2, [r3, #12]

		Skipper_Clock___Delay_ms(USB_LL_Hardware___CHANGE_MODE_DELAY);
 80010b2:	f04f 0019 	mov.w	r0, #25
 80010b6:	f04f 0100 	mov.w	r1, #0
 80010ba:	f7ff fc2d 	bl	8000918 <Skipper_Clock___Delay_ms>

		USB_Host -> 		HCFG 		|= 	(USB_LL_Hardware___HCFG_SELECT_48Mhz_PHY_FREQUENCY 	<<	USB_OTG_HCFG_FSLSPCS_Pos);
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f043 0201 	orr.w	r2, r3, #1
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	601a      	str	r2, [r3, #0]
		USB_Host_Port -> 	HPRT 		|= 	(USB_LL_Hardware___HPRT_Port_Power_Enabled 			<< 	USB_OTG_HPRT_PPWR_Pos);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	e02b      	b.n	8001130 <USB_LL_Hardware___Init+0x154>
	}
	else if(port_Mode == USB_LL_Hardware___DEVICE_MODE)
 80010d8:	79bb      	ldrb	r3, [r7, #6]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d128      	bne.n	8001130 <USB_LL_Hardware___Init+0x154>
	{
		USB_OTG_DeviceTypeDef* USB_Device = USB_LL_Hardware___Get_USB_Device(port_Number);
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fecb 	bl	8000e7c <USB_LL_Hardware___Get_USB_Device>
 80010e6:	6138      	str	r0, [r7, #16]

		USB_Device 	-> 		DIEPMSK		= 	USB_LL_Interrupts___IN_ENDPOINT_INTERRUPTS_MASK;
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	220b      	movs	r2, #11
 80010ec:	611a      	str	r2, [r3, #16]
		USB_Device 	-> 		DOEPMSK 	= 	USB_LL_Interrupts___OUT_ENDPOINT_INTERRUPTS_MASK;
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	220b      	movs	r2, #11
 80010f2:	615a      	str	r2, [r3, #20]
		USB 	   	-> 		GUSBCFG		|= 	USB_OTG_GUSBCFG_FDMOD;
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	60da      	str	r2, [r3, #12]
		USB 		-> 		GCCFG 		|= 	USB_OTG_GCCFG_NOVBUSSENS;
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001104:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	639a      	str	r2, [r3, #56]	; 0x38

		Skipper_Clock___Delay_ms(USB_LL_Hardware___CHANGE_MODE_DELAY);
 800110c:	f04f 0019 	mov.w	r0, #25
 8001110:	f04f 0100 	mov.w	r1, #0
 8001114:	f7ff fc00 	bl	8000918 <Skipper_Clock___Delay_ms>

		USB_Device 	-> 		DCFG 		|= 	 (USB_LL_Hardware___DCFG_SELECT_48Mhz_PHY_FREQUENCY << USB_OTG_DCFG_DSPD_Pos);
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f043 0203 	orr.w	r2, r3, #3
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	601a      	str	r2, [r3, #0]
		USB_Device 	-> 		DCFG 		&= 	~(USB_OTG_DCFG_NZLSOHSK);
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f023 0204 	bic.w	r2, r3, #4
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	601a      	str	r2, [r3, #0]
	}

	USB -> GINTMSK 	 = (USB_LL_Interrupts___GLOBAL_INTERRUPTS_MASK);
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	4a0e      	ldr	r2, [pc, #56]	; (800116c <USB_LL_Hardware___Init+0x190>)
 8001134:	619a      	str	r2, [r3, #24]
	USB -> GCCFG 	|= (USB_OTG_GCCFG_PWRDWN);
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800113a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	639a      	str	r2, [r3, #56]	; 0x38
	USB -> GINTSTS = (USB_OTG_GINTSTS_USBRST);
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001148:	615a      	str	r2, [r3, #20]
	USB -> GINTSTS = (USB_OTG_GINTSTS_ENUMDNE);
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001150:	615a      	str	r2, [r3, #20]
	USB -> GAHBCFG 	|= (USB_OTG_GAHBCFG_GINT);
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f043 0201 	orr.w	r2, r3, #1
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	609a      	str	r2, [r3, #8]
}
 800115e:	bf00      	nop
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40023800 	.word	0x40023800
 800116c:	a33c7c98 	.word	0xa33c7c98

08001170 <USB_LL_Hardware___FIFO_Transfer_In>:

// -----------------------------------------------------------------------------------

void USB_LL_Hardware___FIFO_Transfer_In(uint8_t* Source, uint32_t* Destination, uint32_t transfer_Size)
{
 8001170:	b480      	push	{r7}
 8001172:	b08b      	sub	sp, #44	; 0x2c
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
	uint32_t 	full_Copies 	= 	transfer_Size / USB_LL_Hardware___NUMBER_OF_BYTES_IN_WORD_32;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	089b      	lsrs	r3, r3, #2
 8001180:	61bb      	str	r3, [r7, #24]
	uint8_t 	remainder 		= 	transfer_Size % USB_LL_Hardware___NUMBER_OF_BYTES_IN_WORD_32;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	f003 0303 	and.w	r3, r3, #3
 800118a:	75fb      	strb	r3, [r7, #23]

	for(uint16_t i = 0; i < full_Copies; i++)
 800118c:	2300      	movs	r3, #0
 800118e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001190:	e00c      	b.n	80011ac <USB_LL_Hardware___FIFO_Transfer_In+0x3c>
	{
		Destination[i] = ((uint32_t*)Source)[i];
 8001192:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	68fa      	ldr	r2, [r7, #12]
 8001198:	441a      	add	r2, r3
 800119a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	68b9      	ldr	r1, [r7, #8]
 80011a0:	440b      	add	r3, r1
 80011a2:	6812      	ldr	r2, [r2, #0]
 80011a4:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < full_Copies; i++)
 80011a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011a8:	3301      	adds	r3, #1
 80011aa:	84fb      	strh	r3, [r7, #38]	; 0x26
 80011ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d8ee      	bhi.n	8001192 <USB_LL_Hardware___FIFO_Transfer_In+0x22>
	}

	if(remainder > 0)
 80011b4:	7dfb      	ldrb	r3, [r7, #23]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d023      	beq.n	8001202 <USB_LL_Hardware___FIFO_Transfer_In+0x92>
	{
		uint32_t final32 = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	623b      	str	r3, [r7, #32]
		for(uint8_t i = 0; i < remainder; i++)
 80011be:	2300      	movs	r3, #0
 80011c0:	77fb      	strb	r3, [r7, #31]
 80011c2:	e014      	b.n	80011ee <USB_LL_Hardware___FIFO_Transfer_In+0x7e>
		{
			final32 |= Source[transfer_Size - (remainder - i)] << (i * USB_LL_Hardware___NUMBER_OF_BITS_IN_BYTE);
 80011c4:	7dfa      	ldrb	r2, [r7, #23]
 80011c6:	7ffb      	ldrb	r3, [r7, #31]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	461a      	mov	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	1a9b      	subs	r3, r3, r2
 80011d0:	68fa      	ldr	r2, [r7, #12]
 80011d2:	4413      	add	r3, r2
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	461a      	mov	r2, r3
 80011d8:	7ffb      	ldrb	r3, [r7, #31]
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	461a      	mov	r2, r3
 80011e2:	6a3b      	ldr	r3, [r7, #32]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	623b      	str	r3, [r7, #32]
		for(uint8_t i = 0; i < remainder; i++)
 80011e8:	7ffb      	ldrb	r3, [r7, #31]
 80011ea:	3301      	adds	r3, #1
 80011ec:	77fb      	strb	r3, [r7, #31]
 80011ee:	7ffa      	ldrb	r2, [r7, #31]
 80011f0:	7dfb      	ldrb	r3, [r7, #23]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d3e6      	bcc.n	80011c4 <USB_LL_Hardware___FIFO_Transfer_In+0x54>
		}
		Destination[full_Copies] = final32;
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	68ba      	ldr	r2, [r7, #8]
 80011fc:	4413      	add	r3, r2
 80011fe:	6a3a      	ldr	r2, [r7, #32]
 8001200:	601a      	str	r2, [r3, #0]
	}
}
 8001202:	bf00      	nop
 8001204:	372c      	adds	r7, #44	; 0x2c
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <USB_LL_Hardware___FIFO_Transfer_Out>:

void USB_LL_Hardware___FIFO_Transfer_Out(uint32_t* Source, uint8_t* Destination, uint32_t transfer_Size)
{
 800120e:	b480      	push	{r7}
 8001210:	b08b      	sub	sp, #44	; 0x2c
 8001212:	af00      	add	r7, sp, #0
 8001214:	60f8      	str	r0, [r7, #12]
 8001216:	60b9      	str	r1, [r7, #8]
 8001218:	607a      	str	r2, [r7, #4]
	uint32_t 	full_Copies 	= 	transfer_Size / USB_LL_Hardware___NUMBER_OF_BYTES_IN_WORD_32;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	089b      	lsrs	r3, r3, #2
 800121e:	61fb      	str	r3, [r7, #28]
	uint8_t 	remainder 		= 	transfer_Size % USB_LL_Hardware___NUMBER_OF_BYTES_IN_WORD_32;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	76fb      	strb	r3, [r7, #27]

	for(uint32_t i = 0; i < full_Copies; i++)
 800122a:	2300      	movs	r3, #0
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
 800122e:	e00c      	b.n	800124a <USB_LL_Hardware___FIFO_Transfer_Out+0x3c>
	{
		((uint32_t*)Destination)[i] = Source[i];
 8001230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	68fa      	ldr	r2, [r7, #12]
 8001236:	441a      	add	r2, r3
 8001238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	68b9      	ldr	r1, [r7, #8]
 800123e:	440b      	add	r3, r1
 8001240:	6812      	ldr	r2, [r2, #0]
 8001242:	601a      	str	r2, [r3, #0]
	for(uint32_t i = 0; i < full_Copies; i++)
 8001244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001246:	3301      	adds	r3, #1
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
 800124a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	429a      	cmp	r2, r3
 8001250:	d3ee      	bcc.n	8001230 <USB_LL_Hardware___FIFO_Transfer_Out+0x22>
	}

	if (remainder > 0)
 8001252:	7efb      	ldrb	r3, [r7, #27]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d024      	beq.n	80012a2 <USB_LL_Hardware___FIFO_Transfer_Out+0x94>
	{
		uint32_t final32 = Source[full_Copies];
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	68fa      	ldr	r2, [r7, #12]
 800125e:	4413      	add	r3, r2
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	617b      	str	r3, [r7, #20]

		for (uint8_t i = 0; i < remainder; i++)
 8001264:	2300      	movs	r3, #0
 8001266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800126a:	e015      	b.n	8001298 <USB_LL_Hardware___FIFO_Transfer_Out+0x8a>
		{
			Destination[transfer_Size - (remainder - i)] = (final32 >> (i * USB_LL_Hardware___NUMBER_OF_BITS_IN_BYTE)) & 0xff;
 800126c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	fa22 f103 	lsr.w	r1, r2, r3
 8001278:	7efa      	ldrb	r2, [r7, #27]
 800127a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	461a      	mov	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	1a9b      	subs	r3, r3, r2
 8001286:	68ba      	ldr	r2, [r7, #8]
 8001288:	4413      	add	r3, r2
 800128a:	b2ca      	uxtb	r2, r1
 800128c:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < remainder; i++)
 800128e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001292:	3301      	adds	r3, #1
 8001294:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001298:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800129c:	7efb      	ldrb	r3, [r7, #27]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d3e4      	bcc.n	800126c <USB_LL_Hardware___FIFO_Transfer_Out+0x5e>
		}
	}
}
 80012a2:	bf00      	nop
 80012a4:	372c      	adds	r7, #44	; 0x2c
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <USB_LL_Host___Reset_Port>:
static USB_LL_Host___Host_Port_TypeDef USB_LL_Host___Host_Port[USB_LL_Definitions___NUMBER_OF_PORTS];

// ---------------------------- USB HOST CONTROL SECTION -----------------------------

void USB_LL_Host___Reset_Port(uint8_t port_Number)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b084      	sub	sp, #16
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	4603      	mov	r3, r0
 80012b6:	71fb      	strb	r3, [r7, #7]
	USB_OTG_HostPortTypeDef* USB_Host_Port = USB_LL_Hardware___Get_USB_Host_Port(port_Number);
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fdfe 	bl	8000ebc <USB_LL_Hardware___Get_USB_Host_Port>
 80012c0:	60f8      	str	r0, [r7, #12]
	USB_Host_Port -> HPRT = (USB_Host_Port -> HPRT & ~(USB_LL_Host___HPRT_RC_W1_BITS)) | (USB_OTG_HPRT_PRST);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f423 7397 	bic.w	r3, r3, #302	; 0x12e
 80012ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	601a      	str	r2, [r3, #0]
	Skipper_Clock___Delay_ms(USB_LL_Host___HOST_RESET_DELAY);
 80012d2:	f04f 0019 	mov.w	r0, #25
 80012d6:	f04f 0100 	mov.w	r1, #0
 80012da:	f7ff fb1d 	bl	8000918 <Skipper_Clock___Delay_ms>
	USB_Host_Port -> HPRT = (USB_Host_Port -> HPRT & ~(USB_LL_Host___HPRT_RC_W1_BITS)) & ~(USB_OTG_HPRT_PRST);;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f423 7297 	bic.w	r2, r3, #302	; 0x12e
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	601a      	str	r2, [r3, #0]
}
 80012ea:	bf00      	nop
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <USB_LL_Host___Channel_Get_Retries_Remaining>:
// -----------------------------------------------------------------------------------

// ---------------------------- USB CHANNEL_CONTROL_SECTION --------------------------

uint16_t USB_LL_Host___Channel_Get_Retries_Remaining(uint8_t port_Number, uint8_t channel_Number)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	460a      	mov	r2, r1
 80012fe:	71fb      	strb	r3, [r7, #7]
 8001300:	4613      	mov	r3, r2
 8001302:	71bb      	strb	r3, [r7, #6]
	return (USB_LL_Host___Host_Port[port_Number].channel_Buffer[channel_Number].retries_Remaining);
 8001304:	79f9      	ldrb	r1, [r7, #7]
 8001306:	79bb      	ldrb	r3, [r7, #6]
 8001308:	4809      	ldr	r0, [pc, #36]	; (8001330 <USB_LL_Host___Channel_Get_Retries_Remaining+0x3c>)
 800130a:	461a      	mov	r2, r3
 800130c:	0052      	lsls	r2, r2, #1
 800130e:	441a      	add	r2, r3
 8001310:	00d3      	lsls	r3, r2, #3
 8001312:	461a      	mov	r2, r3
 8001314:	460b      	mov	r3, r1
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	440b      	add	r3, r1
 800131a:	015b      	lsls	r3, r3, #5
 800131c:	4413      	add	r3, r2
 800131e:	4403      	add	r3, r0
 8001320:	330a      	adds	r3, #10
 8001322:	881b      	ldrh	r3, [r3, #0]
}
 8001324:	4618      	mov	r0, r3
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	20000030 	.word	0x20000030

08001334 <USB_LL_Host___Channel_Set_Retries_Remaining>:

void USB_LL_Host___Channel_Set_Retries_Remaining(uint8_t port_Number, uint8_t channel_Number, uint16_t number_Of_Retries)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	71fb      	strb	r3, [r7, #7]
 800133e:	460b      	mov	r3, r1
 8001340:	71bb      	strb	r3, [r7, #6]
 8001342:	4613      	mov	r3, r2
 8001344:	80bb      	strh	r3, [r7, #4]
	USB_LL_Host___Host_Port[port_Number].channel_Buffer[channel_Number].retries_Remaining = number_Of_Retries;
 8001346:	79f9      	ldrb	r1, [r7, #7]
 8001348:	79bb      	ldrb	r3, [r7, #6]
 800134a:	480a      	ldr	r0, [pc, #40]	; (8001374 <USB_LL_Host___Channel_Set_Retries_Remaining+0x40>)
 800134c:	461a      	mov	r2, r3
 800134e:	0052      	lsls	r2, r2, #1
 8001350:	441a      	add	r2, r3
 8001352:	00d3      	lsls	r3, r2, #3
 8001354:	461a      	mov	r2, r3
 8001356:	460b      	mov	r3, r1
 8001358:	00db      	lsls	r3, r3, #3
 800135a:	440b      	add	r3, r1
 800135c:	015b      	lsls	r3, r3, #5
 800135e:	4413      	add	r3, r2
 8001360:	4403      	add	r3, r0
 8001362:	330a      	adds	r3, #10
 8001364:	88ba      	ldrh	r2, [r7, #4]
 8001366:	801a      	strh	r2, [r3, #0]
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	20000030 	.word	0x20000030

08001378 <USB_LL_Host___Channel_Get_Retry_After_Halt>:

uint8_t USB_LL_Host___Channel_Get_Retry_After_Halt(uint8_t port_Number, uint8_t channel_Number)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	460a      	mov	r2, r1
 8001382:	71fb      	strb	r3, [r7, #7]
 8001384:	4613      	mov	r3, r2
 8001386:	71bb      	strb	r3, [r7, #6]
	return (USB_LL_Host___Host_Port[port_Number].channel_Buffer[channel_Number].retry_After_Halt);
 8001388:	79f9      	ldrb	r1, [r7, #7]
 800138a:	79bb      	ldrb	r3, [r7, #6]
 800138c:	4809      	ldr	r0, [pc, #36]	; (80013b4 <USB_LL_Host___Channel_Get_Retry_After_Halt+0x3c>)
 800138e:	461a      	mov	r2, r3
 8001390:	0052      	lsls	r2, r2, #1
 8001392:	441a      	add	r2, r3
 8001394:	00d3      	lsls	r3, r2, #3
 8001396:	461a      	mov	r2, r3
 8001398:	460b      	mov	r3, r1
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	440b      	add	r3, r1
 800139e:	015b      	lsls	r3, r3, #5
 80013a0:	4413      	add	r3, r2
 80013a2:	4403      	add	r3, r0
 80013a4:	330c      	adds	r3, #12
 80013a6:	781b      	ldrb	r3, [r3, #0]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	20000030 	.word	0x20000030

080013b8 <USB_LL_Host___Channel_Get_Transfer_Size>:

uint32_t USB_LL_Host___Channel_Get_Transfer_Size(uint8_t port_Number, uint8_t channel_Number)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	460a      	mov	r2, r1
 80013c2:	71fb      	strb	r3, [r7, #7]
 80013c4:	4613      	mov	r3, r2
 80013c6:	71bb      	strb	r3, [r7, #6]
	return (USB_LL_Host___Host_Port[port_Number].channel_Buffer[channel_Number].transfer_Size);
 80013c8:	79f9      	ldrb	r1, [r7, #7]
 80013ca:	79bb      	ldrb	r3, [r7, #6]
 80013cc:	4809      	ldr	r0, [pc, #36]	; (80013f4 <USB_LL_Host___Channel_Get_Transfer_Size+0x3c>)
 80013ce:	461a      	mov	r2, r3
 80013d0:	0052      	lsls	r2, r2, #1
 80013d2:	441a      	add	r2, r3
 80013d4:	00d3      	lsls	r3, r2, #3
 80013d6:	461a      	mov	r2, r3
 80013d8:	460b      	mov	r3, r1
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	440b      	add	r3, r1
 80013de:	015b      	lsls	r3, r3, #5
 80013e0:	4413      	add	r3, r2
 80013e2:	4403      	add	r3, r0
 80013e4:	681b      	ldr	r3, [r3, #0]
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	20000030 	.word	0x20000030

080013f8 <USB_LL_Host___Channel_Get_Transfer_Progress>:
{
	USB_LL_Host___Host_Port[port_Number].channel_Buffer[channel_Number].transfer_Size =	transfer_Size;
}

uint32_t USB_LL_Host___Channel_Get_Transfer_Progress(uint8_t port_Number, uint8_t channel_Number)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	460a      	mov	r2, r1
 8001402:	71fb      	strb	r3, [r7, #7]
 8001404:	4613      	mov	r3, r2
 8001406:	71bb      	strb	r3, [r7, #6]
	return (USB_LL_Host___Host_Port[port_Number].channel_Buffer[channel_Number].transfer_Progress);
 8001408:	79f9      	ldrb	r1, [r7, #7]
 800140a:	79bb      	ldrb	r3, [r7, #6]
 800140c:	4809      	ldr	r0, [pc, #36]	; (8001434 <USB_LL_Host___Channel_Get_Transfer_Progress+0x3c>)
 800140e:	461a      	mov	r2, r3
 8001410:	0052      	lsls	r2, r2, #1
 8001412:	441a      	add	r2, r3
 8001414:	00d3      	lsls	r3, r2, #3
 8001416:	461a      	mov	r2, r3
 8001418:	460b      	mov	r3, r1
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	440b      	add	r3, r1
 800141e:	015b      	lsls	r3, r3, #5
 8001420:	4413      	add	r3, r2
 8001422:	4403      	add	r3, r0
 8001424:	3304      	adds	r3, #4
 8001426:	681b      	ldr	r3, [r3, #0]
}
 8001428:	4618      	mov	r0, r3
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	20000030 	.word	0x20000030

08001438 <USB_LL_Host___Channel_Get_Buffer_Pointer>:

	return (transfer_Size - transfer_Progress);
}

uint8_t* USB_LL_Host___Channel_Get_Buffer_Pointer(uint8_t port_Number, uint8_t channel_Number)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	460a      	mov	r2, r1
 8001442:	71fb      	strb	r3, [r7, #7]
 8001444:	4613      	mov	r3, r2
 8001446:	71bb      	strb	r3, [r7, #6]
	return (USB_LL_Host___Host_Port[port_Number].channel_Buffer[channel_Number].p_Buffer);
 8001448:	79f9      	ldrb	r1, [r7, #7]
 800144a:	79bb      	ldrb	r3, [r7, #6]
 800144c:	4809      	ldr	r0, [pc, #36]	; (8001474 <USB_LL_Host___Channel_Get_Buffer_Pointer+0x3c>)
 800144e:	461a      	mov	r2, r3
 8001450:	0052      	lsls	r2, r2, #1
 8001452:	441a      	add	r2, r3
 8001454:	00d3      	lsls	r3, r2, #3
 8001456:	461a      	mov	r2, r3
 8001458:	460b      	mov	r3, r1
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	440b      	add	r3, r1
 800145e:	015b      	lsls	r3, r3, #5
 8001460:	4413      	add	r3, r2
 8001462:	4403      	add	r3, r0
 8001464:	3310      	adds	r3, #16
 8001466:	681b      	ldr	r3, [r3, #0]
}
 8001468:	4618      	mov	r0, r3
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	20000030 	.word	0x20000030

08001478 <USB_LL_Host___Channel_Get_Packet_Size>:
{
	USB_LL_Host___Host_Port[port_Number].channel_Buffer[channel_Number].p_Buffer = buffer_Pointer;
}

uint16_t USB_LL_Host___Channel_Get_Packet_Size(uint8_t port_Number, uint8_t channel_Number)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	460a      	mov	r2, r1
 8001482:	71fb      	strb	r3, [r7, #7]
 8001484:	4613      	mov	r3, r2
 8001486:	71bb      	strb	r3, [r7, #6]
	return (USB_LL_Host___Host_Port[port_Number].channel_Buffer[channel_Number].packet_Size);
 8001488:	79f9      	ldrb	r1, [r7, #7]
 800148a:	79bb      	ldrb	r3, [r7, #6]
 800148c:	4809      	ldr	r0, [pc, #36]	; (80014b4 <USB_LL_Host___Channel_Get_Packet_Size+0x3c>)
 800148e:	461a      	mov	r2, r3
 8001490:	0052      	lsls	r2, r2, #1
 8001492:	441a      	add	r2, r3
 8001494:	00d3      	lsls	r3, r2, #3
 8001496:	461a      	mov	r2, r3
 8001498:	460b      	mov	r3, r1
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	440b      	add	r3, r1
 800149e:	015b      	lsls	r3, r3, #5
 80014a0:	4413      	add	r3, r2
 80014a2:	4403      	add	r3, r0
 80014a4:	3308      	adds	r3, #8
 80014a6:	881b      	ldrh	r3, [r3, #0]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	20000030 	.word	0x20000030

080014b8 <USB_LL_Host___Channel_Get_Transfer_Direction>:

uint8_t USB_LL_Host___Channel_Get_Transfer_Direction(uint8_t port_Number, uint8_t channel_Number)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	460a      	mov	r2, r1
 80014c2:	71fb      	strb	r3, [r7, #7]
 80014c4:	4613      	mov	r3, r2
 80014c6:	71bb      	strb	r3, [r7, #6]
	return (USB_LL_Host___Host_Port[port_Number].channel_Buffer[channel_Number].transfer_Direction);
 80014c8:	79f9      	ldrb	r1, [r7, #7]
 80014ca:	79bb      	ldrb	r3, [r7, #6]
 80014cc:	4809      	ldr	r0, [pc, #36]	; (80014f4 <USB_LL_Host___Channel_Get_Transfer_Direction+0x3c>)
 80014ce:	461a      	mov	r2, r3
 80014d0:	0052      	lsls	r2, r2, #1
 80014d2:	441a      	add	r2, r3
 80014d4:	00d3      	lsls	r3, r2, #3
 80014d6:	461a      	mov	r2, r3
 80014d8:	460b      	mov	r3, r1
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	440b      	add	r3, r1
 80014de:	015b      	lsls	r3, r3, #5
 80014e0:	4413      	add	r3, r2
 80014e2:	4403      	add	r3, r0
 80014e4:	330d      	adds	r3, #13
 80014e6:	781b      	ldrb	r3, [r3, #0]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	20000030 	.word	0x20000030

080014f8 <USB_LL_Host___Channel_RX_POP>:
	USB -> GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
	while(USB -> GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH);
}

int8_t USB_LL_Host___Channel_RX_POP(uint8_t port_Number, uint8_t channel_Number, uint32_t RX_Status)
{
 80014f8:	b590      	push	{r4, r7, lr}
 80014fa:	b087      	sub	sp, #28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	603a      	str	r2, [r7, #0]
 8001502:	71fb      	strb	r3, [r7, #7]
 8001504:	460b      	mov	r3, r1
 8001506:	71bb      	strb	r3, [r7, #6]
	uint32_t 	USB_offset 				= USB_LL_Hardware___Get_USB_BASE(port_Number);
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff fc8e 	bl	8000e2c <USB_LL_Hardware___Get_USB_BASE>
 8001510:	6178      	str	r0, [r7, #20]
	uint32_t 	transfer_Size 			= USB_LL_Hardware___GET_BIT_SEGMENT(RX_Status,USB_OTG_GRXSTSP_BCNT_Msk,USB_OTG_GRXSTSP_BCNT_Pos);
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	091b      	lsrs	r3, r3, #4
 8001516:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800151a:	613b      	str	r3, [r7, #16]
	uint32_t* 	fifo 					= (uint32_t*)(USB_offset + USB_OTG_FIFO_BASE + (USB_OTG_FIFO_SIZE * channel_Number));
 800151c:	79bb      	ldrb	r3, [r7, #6]
 800151e:	031a      	lsls	r2, r3, #12
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	4413      	add	r3, r2
 8001524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001528:	60fb      	str	r3, [r7, #12]
	uint8_t* 	p_Buffer	  			= USB_LL_Host___Host_Port[port_Number].channel_Buffer[channel_Number].p_Buffer + USB_LL_Host___Host_Port[port_Number].channel_Buffer[channel_Number].buffer_Fill_Level;
 800152a:	79f9      	ldrb	r1, [r7, #7]
 800152c:	79bb      	ldrb	r3, [r7, #6]
 800152e:	4839      	ldr	r0, [pc, #228]	; (8001614 <USB_LL_Host___Channel_RX_POP+0x11c>)
 8001530:	461a      	mov	r2, r3
 8001532:	0052      	lsls	r2, r2, #1
 8001534:	441a      	add	r2, r3
 8001536:	00d3      	lsls	r3, r2, #3
 8001538:	461a      	mov	r2, r3
 800153a:	460b      	mov	r3, r1
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	440b      	add	r3, r1
 8001540:	015b      	lsls	r3, r3, #5
 8001542:	4413      	add	r3, r2
 8001544:	4403      	add	r3, r0
 8001546:	3310      	adds	r3, #16
 8001548:	6818      	ldr	r0, [r3, #0]
 800154a:	79f9      	ldrb	r1, [r7, #7]
 800154c:	79bb      	ldrb	r3, [r7, #6]
 800154e:	4c31      	ldr	r4, [pc, #196]	; (8001614 <USB_LL_Host___Channel_RX_POP+0x11c>)
 8001550:	461a      	mov	r2, r3
 8001552:	0052      	lsls	r2, r2, #1
 8001554:	441a      	add	r2, r3
 8001556:	00d3      	lsls	r3, r2, #3
 8001558:	461a      	mov	r2, r3
 800155a:	460b      	mov	r3, r1
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	440b      	add	r3, r1
 8001560:	015b      	lsls	r3, r3, #5
 8001562:	4413      	add	r3, r2
 8001564:	4423      	add	r3, r4
 8001566:	3314      	adds	r3, #20
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4403      	add	r3, r0
 800156c:	60bb      	str	r3, [r7, #8]

	if((USB_LL_Host___Host_Port[port_Number].channel_Buffer[channel_Number].buffer_Fill_Level + transfer_Size) <= USB_LL_Host___Host_Port[port_Number].channel_Buffer[channel_Number].transfer_Size)
 800156e:	79f9      	ldrb	r1, [r7, #7]
 8001570:	79bb      	ldrb	r3, [r7, #6]
 8001572:	4828      	ldr	r0, [pc, #160]	; (8001614 <USB_LL_Host___Channel_RX_POP+0x11c>)
 8001574:	461a      	mov	r2, r3
 8001576:	0052      	lsls	r2, r2, #1
 8001578:	441a      	add	r2, r3
 800157a:	00d3      	lsls	r3, r2, #3
 800157c:	461a      	mov	r2, r3
 800157e:	460b      	mov	r3, r1
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	440b      	add	r3, r1
 8001584:	015b      	lsls	r3, r3, #5
 8001586:	4413      	add	r3, r2
 8001588:	4403      	add	r3, r0
 800158a:	3314      	adds	r3, #20
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	18d0      	adds	r0, r2, r3
 8001592:	79f9      	ldrb	r1, [r7, #7]
 8001594:	79bb      	ldrb	r3, [r7, #6]
 8001596:	4c1f      	ldr	r4, [pc, #124]	; (8001614 <USB_LL_Host___Channel_RX_POP+0x11c>)
 8001598:	461a      	mov	r2, r3
 800159a:	0052      	lsls	r2, r2, #1
 800159c:	441a      	add	r2, r3
 800159e:	00d3      	lsls	r3, r2, #3
 80015a0:	461a      	mov	r2, r3
 80015a2:	460b      	mov	r3, r1
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	440b      	add	r3, r1
 80015a8:	015b      	lsls	r3, r3, #5
 80015aa:	4413      	add	r3, r2
 80015ac:	4423      	add	r3, r4
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4298      	cmp	r0, r3
 80015b2:	d828      	bhi.n	8001606 <USB_LL_Host___Channel_RX_POP+0x10e>
	{
		USB_LL_Hardware___FIFO_Transfer_Out(fifo, p_Buffer, transfer_Size);
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	68b9      	ldr	r1, [r7, #8]
 80015b8:	68f8      	ldr	r0, [r7, #12]
 80015ba:	f7ff fe28 	bl	800120e <USB_LL_Hardware___FIFO_Transfer_Out>
		USB_LL_Host___Host_Port[port_Number].channel_Buffer[channel_Number].buffer_Fill_Level += transfer_Size;
 80015be:	79f9      	ldrb	r1, [r7, #7]
 80015c0:	79bb      	ldrb	r3, [r7, #6]
 80015c2:	4814      	ldr	r0, [pc, #80]	; (8001614 <USB_LL_Host___Channel_RX_POP+0x11c>)
 80015c4:	461a      	mov	r2, r3
 80015c6:	0052      	lsls	r2, r2, #1
 80015c8:	441a      	add	r2, r3
 80015ca:	00d3      	lsls	r3, r2, #3
 80015cc:	461a      	mov	r2, r3
 80015ce:	460b      	mov	r3, r1
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	440b      	add	r3, r1
 80015d4:	015b      	lsls	r3, r3, #5
 80015d6:	4413      	add	r3, r2
 80015d8:	4403      	add	r3, r0
 80015da:	3314      	adds	r3, #20
 80015dc:	6818      	ldr	r0, [r3, #0]
 80015de:	79f9      	ldrb	r1, [r7, #7]
 80015e0:	79bb      	ldrb	r3, [r7, #6]
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	4410      	add	r0, r2
 80015e6:	4c0b      	ldr	r4, [pc, #44]	; (8001614 <USB_LL_Host___Channel_RX_POP+0x11c>)
 80015e8:	461a      	mov	r2, r3
 80015ea:	0052      	lsls	r2, r2, #1
 80015ec:	441a      	add	r2, r3
 80015ee:	00d3      	lsls	r3, r2, #3
 80015f0:	461a      	mov	r2, r3
 80015f2:	460b      	mov	r3, r1
 80015f4:	00db      	lsls	r3, r3, #3
 80015f6:	440b      	add	r3, r1
 80015f8:	015b      	lsls	r3, r3, #5
 80015fa:	4413      	add	r3, r2
 80015fc:	4423      	add	r3, r4
 80015fe:	3314      	adds	r3, #20
 8001600:	6018      	str	r0, [r3, #0]
	else
	{
		return(USB_LL_Host___EXIT_FAILURE_BUFFER_OVERFLOW);
	}

	return(USB_LL_Host___EXIT_SUCCESS);
 8001602:	2301      	movs	r3, #1
 8001604:	e001      	b.n	800160a <USB_LL_Host___Channel_RX_POP+0x112>
		return(USB_LL_Host___EXIT_FAILURE_BUFFER_OVERFLOW);
 8001606:	f06f 0301 	mvn.w	r3, #1
}
 800160a:	4618      	mov	r0, r3
 800160c:	371c      	adds	r7, #28
 800160e:	46bd      	mov	sp, r7
 8001610:	bd90      	pop	{r4, r7, pc}
 8001612:	bf00      	nop
 8001614:	20000030 	.word	0x20000030

08001618 <USB_LL_Host___Channel_Get_Fifo_Pointer>:

uint32_t* USB_LL_Host___Channel_Get_Fifo_Pointer(uint8_t port_Number, uint8_t channel_Number)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	460a      	mov	r2, r1
 8001622:	71fb      	strb	r3, [r7, #7]
 8001624:	4613      	mov	r3, r2
 8001626:	71bb      	strb	r3, [r7, #6]
	uint32_t USB_offset = USB_LL_Hardware___Get_USB_BASE(port_Number);
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff fbfe 	bl	8000e2c <USB_LL_Hardware___Get_USB_BASE>
 8001630:	60f8      	str	r0, [r7, #12]
	return((uint32_t*)(USB_offset + USB_OTG_FIFO_BASE + (USB_OTG_FIFO_SIZE * channel_Number)));
 8001632:	79bb      	ldrb	r3, [r7, #6]
 8001634:	031a      	lsls	r2, r3, #12
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	4413      	add	r3, r2
 800163a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
}
 800163e:	4618      	mov	r0, r3
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <USB_LL_Host___Channel_Halt>:

void USB_LL_Host___Channel_Halt(uint8_t port_Number, uint8_t channel_Number)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b084      	sub	sp, #16
 800164a:	af00      	add	r7, sp, #0
 800164c:	4603      	mov	r3, r0
 800164e:	460a      	mov	r2, r1
 8001650:	71fb      	strb	r3, [r7, #7]
 8001652:	4613      	mov	r3, r2
 8001654:	71bb      	strb	r3, [r7, #6]
	USB_OTG_HostChannelTypeDef* USB_Host_Channel = USB_LL_Hardware___Get_USB_Host_Channel(port_Number, channel_Number);
 8001656:	79ba      	ldrb	r2, [r7, #6]
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	4611      	mov	r1, r2
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff fc3d 	bl	8000edc <USB_LL_Hardware___Get_USB_Host_Channel>
 8001662:	60f8      	str	r0, [r7, #12]
	USB_Host_Channel -> HCCHAR |= (USB_OTG_HCCHAR_CHDIS | USB_OTG_HCCHAR_CHENA);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	601a      	str	r2, [r3, #0]
}
 8001670:	bf00      	nop
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <USB_LL_Host___Transfer_Next_Packet>:
	USB_OTG_HostChannelTypeDef* USB_Host_Channel = USB_LL_Hardware___Get_USB_Host_Channel(port_Number, channel_Number);
	USB_Host_Channel -> HCTSIZ = (transfer_Size_In_Bytes << USB_OTG_HCTSIZ_XFRSIZ_Pos | packet_Count << USB_OTG_HCTSIZ_PKTCNT_Pos | packet_ID << USB_OTG_HCTSIZ_DPID_Pos);
}

void USB_LL_Host___Transfer_Next_Packet(uint8_t port_Number, uint8_t channel_Number)
{
 8001678:	b590      	push	{r4, r7, lr}
 800167a:	b087      	sub	sp, #28
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	460a      	mov	r2, r1
 8001682:	71fb      	strb	r3, [r7, #7]
 8001684:	4613      	mov	r3, r2
 8001686:	71bb      	strb	r3, [r7, #6]
	uint32_t* FIFO_Pointer 				= USB_LL_Host___Channel_Get_Fifo_Pointer(port_Number, channel_Number);
 8001688:	79ba      	ldrb	r2, [r7, #6]
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	4611      	mov	r1, r2
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff ffc2 	bl	8001618 <USB_LL_Host___Channel_Get_Fifo_Pointer>
 8001694:	6178      	str	r0, [r7, #20]
	uint32_t  transfer_Size_Remaining 	= USB_LL_Host___Channel_Get_Transfer_Size(port_Number, channel_Number) - USB_LL_Host___Channel_Get_Transfer_Progress(port_Number, channel_Number);
 8001696:	79ba      	ldrb	r2, [r7, #6]
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	4611      	mov	r1, r2
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fe8b 	bl	80013b8 <USB_LL_Host___Channel_Get_Transfer_Size>
 80016a2:	4604      	mov	r4, r0
 80016a4:	79ba      	ldrb	r2, [r7, #6]
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	4611      	mov	r1, r2
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff fea4 	bl	80013f8 <USB_LL_Host___Channel_Get_Transfer_Progress>
 80016b0:	4603      	mov	r3, r0
 80016b2:	1ae3      	subs	r3, r4, r3
 80016b4:	613b      	str	r3, [r7, #16]
	uint16_t  transfer_Size 			= USB_LL_Host___GET_MIN(transfer_Size_Remaining, USB_LL_Host___Channel_Get_Packet_Size(port_Number, channel_Number));
 80016b6:	79ba      	ldrb	r2, [r7, #6]
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	4611      	mov	r1, r2
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fedb 	bl	8001478 <USB_LL_Host___Channel_Get_Packet_Size>
 80016c2:	4603      	mov	r3, r0
 80016c4:	461a      	mov	r2, r3
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d907      	bls.n	80016dc <USB_LL_Host___Transfer_Next_Packet+0x64>
 80016cc:	79ba      	ldrb	r2, [r7, #6]
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	4611      	mov	r1, r2
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fed0 	bl	8001478 <USB_LL_Host___Channel_Get_Packet_Size>
 80016d8:	4603      	mov	r3, r0
 80016da:	e001      	b.n	80016e0 <USB_LL_Host___Transfer_Next_Packet+0x68>
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	81fb      	strh	r3, [r7, #14]
	uint8_t*  buffer_Pointer			= USB_LL_Host___Channel_Get_Buffer_Pointer(port_Number, channel_Number);
 80016e2:	79ba      	ldrb	r2, [r7, #6]
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	4611      	mov	r1, r2
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fea5 	bl	8001438 <USB_LL_Host___Channel_Get_Buffer_Pointer>
 80016ee:	60b8      	str	r0, [r7, #8]

	USB_LL_Hardware___FIFO_Transfer_In(buffer_Pointer, FIFO_Pointer, transfer_Size);
 80016f0:	89fb      	ldrh	r3, [r7, #14]
 80016f2:	461a      	mov	r2, r3
 80016f4:	6979      	ldr	r1, [r7, #20]
 80016f6:	68b8      	ldr	r0, [r7, #8]
 80016f8:	f7ff fd3a 	bl	8001170 <USB_LL_Hardware___FIFO_Transfer_In>
}
 80016fc:	bf00      	nop
 80016fe:	371c      	adds	r7, #28
 8001700:	46bd      	mov	sp, r7
 8001702:	bd90      	pop	{r4, r7, pc}

08001704 <USB_LL_Host___Channel_Begin_Transfer_In>:

void USB_LL_Host___Channel_Begin_Transfer_In(uint8_t port_Number, uint8_t channel_Number)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	460a      	mov	r2, r1
 800170e:	71fb      	strb	r3, [r7, #7]
 8001710:	4613      	mov	r3, r2
 8001712:	71bb      	strb	r3, [r7, #6]
	USB_OTG_HostChannelTypeDef *USB_Host_Channel = USB_LL_Hardware___Get_USB_Host_Channel(port_Number, channel_Number);
 8001714:	79ba      	ldrb	r2, [r7, #6]
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	4611      	mov	r1, r2
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff fbde 	bl	8000edc <USB_LL_Hardware___Get_USB_Host_Channel>
 8001720:	60f8      	str	r0, [r7, #12]
	USB_Host_Channel->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	601a      	str	r2, [r3, #0]
}
 800172e:	bf00      	nop
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <USB_LL_Host___Channel_Begin_Transfer_Out>:

void USB_LL_Host___Channel_Begin_Transfer_Out(uint8_t port_Number, uint8_t channel_Number)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b084      	sub	sp, #16
 800173a:	af00      	add	r7, sp, #0
 800173c:	4603      	mov	r3, r0
 800173e:	460a      	mov	r2, r1
 8001740:	71fb      	strb	r3, [r7, #7]
 8001742:	4613      	mov	r3, r2
 8001744:	71bb      	strb	r3, [r7, #6]
	USB_OTG_HostChannelTypeDef *USB_Host_Channel = USB_LL_Hardware___Get_USB_Host_Channel(port_Number, channel_Number);
 8001746:	79ba      	ldrb	r2, [r7, #6]
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	4611      	mov	r1, r2
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff fbc5 	bl	8000edc <USB_LL_Hardware___Get_USB_Host_Channel>
 8001752:	60f8      	str	r0, [r7, #12]
	USB_Host_Channel->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	601a      	str	r2, [r3, #0]

	USB_LL_Host___Transfer_Next_Packet(port_Number, channel_Number);
 8001760:	79ba      	ldrb	r2, [r7, #6]
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	4611      	mov	r1, r2
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff ff86 	bl	8001678 <USB_LL_Host___Transfer_Next_Packet>
}
 800176c:	bf00      	nop
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <USB_LL_Host___Channel_Out_Packet_Acknowledged>:

void USB_LL_Host___Channel_Out_Packet_Acknowledged(uint8_t port_Number, uint8_t channel_Number)
{
 8001774:	b5b0      	push	{r4, r5, r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	460a      	mov	r2, r1
 800177e:	71fb      	strb	r3, [r7, #7]
 8001780:	4613      	mov	r3, r2
 8001782:	71bb      	strb	r3, [r7, #6]
	uint16_t  packet_Size 				= USB_LL_Host___Channel_Get_Packet_Size(port_Number, channel_Number);
 8001784:	79ba      	ldrb	r2, [r7, #6]
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	4611      	mov	r1, r2
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff fe74 	bl	8001478 <USB_LL_Host___Channel_Get_Packet_Size>
 8001790:	4603      	mov	r3, r0
 8001792:	81fb      	strh	r3, [r7, #14]
	uint16_t  size_Transfered 			= USB_LL_Host___GET_MIN(packet_Size, (USB_LL_Host___Channel_Get_Transfer_Size(port_Number, channel_Number) - USB_LL_Host___Channel_Get_Transfer_Progress(port_Number, channel_Number)));
 8001794:	89fc      	ldrh	r4, [r7, #14]
 8001796:	79ba      	ldrb	r2, [r7, #6]
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	4611      	mov	r1, r2
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff fe0b 	bl	80013b8 <USB_LL_Host___Channel_Get_Transfer_Size>
 80017a2:	4605      	mov	r5, r0
 80017a4:	79ba      	ldrb	r2, [r7, #6]
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	4611      	mov	r1, r2
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff fe24 	bl	80013f8 <USB_LL_Host___Channel_Get_Transfer_Progress>
 80017b0:	4603      	mov	r3, r0
 80017b2:	1aeb      	subs	r3, r5, r3
 80017b4:	429c      	cmp	r4, r3
 80017b6:	d912      	bls.n	80017de <USB_LL_Host___Channel_Out_Packet_Acknowledged+0x6a>
 80017b8:	79ba      	ldrb	r2, [r7, #6]
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	4611      	mov	r1, r2
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff fdfa 	bl	80013b8 <USB_LL_Host___Channel_Get_Transfer_Size>
 80017c4:	4603      	mov	r3, r0
 80017c6:	b29c      	uxth	r4, r3
 80017c8:	79ba      	ldrb	r2, [r7, #6]
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	4611      	mov	r1, r2
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff fe12 	bl	80013f8 <USB_LL_Host___Channel_Get_Transfer_Progress>
 80017d4:	4603      	mov	r3, r0
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	1ae3      	subs	r3, r4, r3
 80017da:	b29b      	uxth	r3, r3
 80017dc:	e000      	b.n	80017e0 <USB_LL_Host___Channel_Out_Packet_Acknowledged+0x6c>
 80017de:	89fb      	ldrh	r3, [r7, #14]
 80017e0:	81bb      	strh	r3, [r7, #12]

	USB_LL_Host___Host_Port[port_Number].channel_Buffer[channel_Number].transfer_Progress += size_Transfered;
 80017e2:	79f9      	ldrb	r1, [r7, #7]
 80017e4:	79bb      	ldrb	r3, [r7, #6]
 80017e6:	481f      	ldr	r0, [pc, #124]	; (8001864 <USB_LL_Host___Channel_Out_Packet_Acknowledged+0xf0>)
 80017e8:	461a      	mov	r2, r3
 80017ea:	0052      	lsls	r2, r2, #1
 80017ec:	441a      	add	r2, r3
 80017ee:	00d3      	lsls	r3, r2, #3
 80017f0:	461a      	mov	r2, r3
 80017f2:	460b      	mov	r3, r1
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	440b      	add	r3, r1
 80017f8:	015b      	lsls	r3, r3, #5
 80017fa:	4413      	add	r3, r2
 80017fc:	4403      	add	r3, r0
 80017fe:	3304      	adds	r3, #4
 8001800:	6818      	ldr	r0, [r3, #0]
 8001802:	89ba      	ldrh	r2, [r7, #12]
 8001804:	79f9      	ldrb	r1, [r7, #7]
 8001806:	79bb      	ldrb	r3, [r7, #6]
 8001808:	4410      	add	r0, r2
 800180a:	4c16      	ldr	r4, [pc, #88]	; (8001864 <USB_LL_Host___Channel_Out_Packet_Acknowledged+0xf0>)
 800180c:	461a      	mov	r2, r3
 800180e:	0052      	lsls	r2, r2, #1
 8001810:	441a      	add	r2, r3
 8001812:	00d3      	lsls	r3, r2, #3
 8001814:	461a      	mov	r2, r3
 8001816:	460b      	mov	r3, r1
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	440b      	add	r3, r1
 800181c:	015b      	lsls	r3, r3, #5
 800181e:	4413      	add	r3, r2
 8001820:	4423      	add	r3, r4
 8001822:	3304      	adds	r3, #4
 8001824:	6018      	str	r0, [r3, #0]

	uint16_t  transfer_Size_Remaining 	= USB_LL_Host___Channel_Get_Transfer_Size(port_Number, channel_Number) - USB_LL_Host___Channel_Get_Transfer_Progress(port_Number, channel_Number);
 8001826:	79ba      	ldrb	r2, [r7, #6]
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	4611      	mov	r1, r2
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fdc3 	bl	80013b8 <USB_LL_Host___Channel_Get_Transfer_Size>
 8001832:	4603      	mov	r3, r0
 8001834:	b29c      	uxth	r4, r3
 8001836:	79ba      	ldrb	r2, [r7, #6]
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	4611      	mov	r1, r2
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff fddb 	bl	80013f8 <USB_LL_Host___Channel_Get_Transfer_Progress>
 8001842:	4603      	mov	r3, r0
 8001844:	b29b      	uxth	r3, r3
 8001846:	1ae3      	subs	r3, r4, r3
 8001848:	817b      	strh	r3, [r7, #10]

	if(transfer_Size_Remaining > 0)
 800184a:	897b      	ldrh	r3, [r7, #10]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d005      	beq.n	800185c <USB_LL_Host___Channel_Out_Packet_Acknowledged+0xe8>
	{
		USB_LL_Host___Transfer_Next_Packet(port_Number, channel_Number);
 8001850:	79ba      	ldrb	r2, [r7, #6]
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	4611      	mov	r1, r2
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff ff0e 	bl	8001678 <USB_LL_Host___Transfer_Next_Packet>
	}
}
 800185c:	bf00      	nop
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bdb0      	pop	{r4, r5, r7, pc}
 8001864:	20000030 	.word	0x20000030

08001868 <USB_LL_Host___Channel_In_Packet_Acknowledged>:

void USB_LL_Host___Channel_In_Packet_Acknowledged(uint8_t port_Number, uint8_t channel_Number)
{
 8001868:	b5b0      	push	{r4, r5, r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	460a      	mov	r2, r1
 8001872:	71fb      	strb	r3, [r7, #7]
 8001874:	4613      	mov	r3, r2
 8001876:	71bb      	strb	r3, [r7, #6]
	uint16_t  packet_Size 				= USB_LL_Host___Channel_Get_Packet_Size(port_Number, channel_Number);
 8001878:	79ba      	ldrb	r2, [r7, #6]
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	4611      	mov	r1, r2
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fdfa 	bl	8001478 <USB_LL_Host___Channel_Get_Packet_Size>
 8001884:	4603      	mov	r3, r0
 8001886:	81fb      	strh	r3, [r7, #14]
	uint16_t  size_Transfered 			= USB_LL_Host___GET_MIN(packet_Size, (USB_LL_Host___Channel_Get_Transfer_Size(port_Number, channel_Number) - USB_LL_Host___Channel_Get_Transfer_Progress(port_Number, channel_Number)));
 8001888:	89fc      	ldrh	r4, [r7, #14]
 800188a:	79ba      	ldrb	r2, [r7, #6]
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	4611      	mov	r1, r2
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff fd91 	bl	80013b8 <USB_LL_Host___Channel_Get_Transfer_Size>
 8001896:	4605      	mov	r5, r0
 8001898:	79ba      	ldrb	r2, [r7, #6]
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	4611      	mov	r1, r2
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff fdaa 	bl	80013f8 <USB_LL_Host___Channel_Get_Transfer_Progress>
 80018a4:	4603      	mov	r3, r0
 80018a6:	1aeb      	subs	r3, r5, r3
 80018a8:	429c      	cmp	r4, r3
 80018aa:	d912      	bls.n	80018d2 <USB_LL_Host___Channel_In_Packet_Acknowledged+0x6a>
 80018ac:	79ba      	ldrb	r2, [r7, #6]
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	4611      	mov	r1, r2
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff fd80 	bl	80013b8 <USB_LL_Host___Channel_Get_Transfer_Size>
 80018b8:	4603      	mov	r3, r0
 80018ba:	b29c      	uxth	r4, r3
 80018bc:	79ba      	ldrb	r2, [r7, #6]
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	4611      	mov	r1, r2
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fd98 	bl	80013f8 <USB_LL_Host___Channel_Get_Transfer_Progress>
 80018c8:	4603      	mov	r3, r0
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	1ae3      	subs	r3, r4, r3
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	e000      	b.n	80018d4 <USB_LL_Host___Channel_In_Packet_Acknowledged+0x6c>
 80018d2:	89fb      	ldrh	r3, [r7, #14]
 80018d4:	81bb      	strh	r3, [r7, #12]

	USB_LL_Host___Host_Port[port_Number].channel_Buffer[channel_Number].transfer_Progress += size_Transfered;
 80018d6:	79f9      	ldrb	r1, [r7, #7]
 80018d8:	79bb      	ldrb	r3, [r7, #6]
 80018da:	481f      	ldr	r0, [pc, #124]	; (8001958 <USB_LL_Host___Channel_In_Packet_Acknowledged+0xf0>)
 80018dc:	461a      	mov	r2, r3
 80018de:	0052      	lsls	r2, r2, #1
 80018e0:	441a      	add	r2, r3
 80018e2:	00d3      	lsls	r3, r2, #3
 80018e4:	461a      	mov	r2, r3
 80018e6:	460b      	mov	r3, r1
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	440b      	add	r3, r1
 80018ec:	015b      	lsls	r3, r3, #5
 80018ee:	4413      	add	r3, r2
 80018f0:	4403      	add	r3, r0
 80018f2:	3304      	adds	r3, #4
 80018f4:	6818      	ldr	r0, [r3, #0]
 80018f6:	89ba      	ldrh	r2, [r7, #12]
 80018f8:	79f9      	ldrb	r1, [r7, #7]
 80018fa:	79bb      	ldrb	r3, [r7, #6]
 80018fc:	4410      	add	r0, r2
 80018fe:	4c16      	ldr	r4, [pc, #88]	; (8001958 <USB_LL_Host___Channel_In_Packet_Acknowledged+0xf0>)
 8001900:	461a      	mov	r2, r3
 8001902:	0052      	lsls	r2, r2, #1
 8001904:	441a      	add	r2, r3
 8001906:	00d3      	lsls	r3, r2, #3
 8001908:	461a      	mov	r2, r3
 800190a:	460b      	mov	r3, r1
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	440b      	add	r3, r1
 8001910:	015b      	lsls	r3, r3, #5
 8001912:	4413      	add	r3, r2
 8001914:	4423      	add	r3, r4
 8001916:	3304      	adds	r3, #4
 8001918:	6018      	str	r0, [r3, #0]

	uint16_t  transfer_Size_Remaining 	= USB_LL_Host___Channel_Get_Transfer_Size(port_Number, channel_Number) - USB_LL_Host___Channel_Get_Transfer_Progress(port_Number, channel_Number);
 800191a:	79ba      	ldrb	r2, [r7, #6]
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	4611      	mov	r1, r2
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff fd49 	bl	80013b8 <USB_LL_Host___Channel_Get_Transfer_Size>
 8001926:	4603      	mov	r3, r0
 8001928:	b29c      	uxth	r4, r3
 800192a:	79ba      	ldrb	r2, [r7, #6]
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	4611      	mov	r1, r2
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff fd61 	bl	80013f8 <USB_LL_Host___Channel_Get_Transfer_Progress>
 8001936:	4603      	mov	r3, r0
 8001938:	b29b      	uxth	r3, r3
 800193a:	1ae3      	subs	r3, r4, r3
 800193c:	817b      	strh	r3, [r7, #10]

	if(transfer_Size_Remaining > 0)
 800193e:	897b      	ldrh	r3, [r7, #10]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d005      	beq.n	8001950 <USB_LL_Host___Channel_In_Packet_Acknowledged+0xe8>
	{
		USB_LL_Host___Channel_Begin_Transfer_In(port_Number, channel_Number);
 8001944:	79ba      	ldrb	r2, [r7, #6]
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	4611      	mov	r1, r2
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff feda 	bl	8001704 <USB_LL_Host___Channel_Begin_Transfer_In>
	}
}
 8001950:	bf00      	nop
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bdb0      	pop	{r4, r5, r7, pc}
 8001958:	20000030 	.word	0x20000030

0800195c <USB_LL_Host___Channel_Set_Retry_After_Halt>:

void USB_LL_Host___Channel_Set_Retry_After_Halt(uint8_t port_Number, uint8_t channel_Number, uint8_t value)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	71fb      	strb	r3, [r7, #7]
 8001966:	460b      	mov	r3, r1
 8001968:	71bb      	strb	r3, [r7, #6]
 800196a:	4613      	mov	r3, r2
 800196c:	717b      	strb	r3, [r7, #5]
	USB_LL_Host___Host_Port[port_Number].channel_Buffer[channel_Number].retry_After_Halt = value;
 800196e:	79f9      	ldrb	r1, [r7, #7]
 8001970:	79bb      	ldrb	r3, [r7, #6]
 8001972:	480a      	ldr	r0, [pc, #40]	; (800199c <USB_LL_Host___Channel_Set_Retry_After_Halt+0x40>)
 8001974:	461a      	mov	r2, r3
 8001976:	0052      	lsls	r2, r2, #1
 8001978:	441a      	add	r2, r3
 800197a:	00d3      	lsls	r3, r2, #3
 800197c:	461a      	mov	r2, r3
 800197e:	460b      	mov	r3, r1
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	440b      	add	r3, r1
 8001984:	015b      	lsls	r3, r3, #5
 8001986:	4413      	add	r3, r2
 8001988:	4403      	add	r3, r0
 800198a:	330c      	adds	r3, #12
 800198c:	797a      	ldrb	r2, [r7, #5]
 800198e:	701a      	strb	r2, [r3, #0]
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	20000030 	.word	0x20000030

080019a0 <USB_LL_Host___Channel_Retry_Transfer_Out>:

void USB_LL_Host___Channel_Retry_Transfer_Out(uint8_t port_Number, uint8_t channel_Number)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	460a      	mov	r2, r1
 80019aa:	71fb      	strb	r3, [r7, #7]
 80019ac:	4613      	mov	r3, r2
 80019ae:	71bb      	strb	r3, [r7, #6]
	USB_LL_Host___Channel_Begin_Transfer_Out(port_Number, channel_Number);
 80019b0:	79ba      	ldrb	r2, [r7, #6]
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	4611      	mov	r1, r2
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff febd 	bl	8001736 <USB_LL_Host___Channel_Begin_Transfer_Out>
}
 80019bc:	bf00      	nop
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <USB_LL_Host___Channel_Retry_Transfer_In>:

void USB_LL_Host___Channel_Retry_Transfer_In(uint8_t port_Number, uint8_t channel_Number)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	460a      	mov	r2, r1
 80019ce:	71fb      	strb	r3, [r7, #7]
 80019d0:	4613      	mov	r3, r2
 80019d2:	71bb      	strb	r3, [r7, #6]
	USB_LL_Host___Channel_Begin_Transfer_In(port_Number, channel_Number);
 80019d4:	79ba      	ldrb	r2, [r7, #6]
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	4611      	mov	r1, r2
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff fe92 	bl	8001704 <USB_LL_Host___Channel_Begin_Transfer_In>
}
 80019e0:	bf00      	nop
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <USB_LL_Interrupts___Start_Of_Frame_Reveived>:
#include "../Inc/USB_LL_Interrupts.h"
#include "../Inc/USB_LL_Interrupts_Device.h"
#include "../Inc/USB_LL_Interrupts_Host.h"

void USB_LL_Interrupts___Start_Of_Frame_Reveived(uint8_t port_Number)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	71fb      	strb	r3, [r7, #7]
	USB_LL_Interrupts_Host___Start_Of_Frame_Interrupt_Received(port_Number);
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f000 fa19 	bl	8001e2c <USB_LL_Interrupts_Host___Start_Of_Frame_Interrupt_Received>
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <USB_LL_Interrupts___Interrupt_Handler>:

void USB_LL_Interrupts___Interrupt_Handler(uint8_t port_Number)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
	USB_OTG_GlobalTypeDef* USB = USB_LL_Hardware___Get_USB(port_Number);
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff fa25 	bl	8000e60 <USB_LL_Hardware___Get_USB>
 8001a16:	6178      	str	r0, [r7, #20]

	while((USB -> GINTSTS) & USB_LL_Interrupts___GLOBAL_INTERRUPTS_MASK)
 8001a18:	e0b2      	b.n	8001b80 <USB_LL_Interrupts___Interrupt_Handler+0x17c>
	{
		switch(POSITION_VAL((USB -> GINTSTS) & USB_LL_Interrupts___GLOBAL_INTERRUPTS_MASK))
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	695a      	ldr	r2, [r3, #20]
 8001a1e:	4b5e      	ldr	r3, [pc, #376]	; (8001b98 <USB_LL_Interrupts___Interrupt_Handler+0x194>)
 8001a20:	4013      	ands	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	fa93 f3a3 	rbit	r3, r3
 8001a2a:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	fab3 f383 	clz	r3, r3
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	3b03      	subs	r3, #3
 8001a36:	2b1c      	cmp	r3, #28
 8001a38:	f200 80a2 	bhi.w	8001b80 <USB_LL_Interrupts___Interrupt_Handler+0x17c>
 8001a3c:	a201      	add	r2, pc, #4	; (adr r2, 8001a44 <USB_LL_Interrupts___Interrupt_Handler+0x40>)
 8001a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a42:	bf00      	nop
 8001a44:	08001ab9 	.word	0x08001ab9
 8001a48:	08001ac9 	.word	0x08001ac9
 8001a4c:	08001b81 	.word	0x08001b81
 8001a50:	08001b81 	.word	0x08001b81
 8001a54:	08001b81 	.word	0x08001b81
 8001a58:	08001b81 	.word	0x08001b81
 8001a5c:	08001b81 	.word	0x08001b81
 8001a60:	08001b01 	.word	0x08001b01
 8001a64:	08001b0b 	.word	0x08001b0b
 8001a68:	08001b15 	.word	0x08001b15
 8001a6c:	08001b1f 	.word	0x08001b1f
 8001a70:	08001b31 	.word	0x08001b31
 8001a74:	08001b3b 	.word	0x08001b3b
 8001a78:	08001b81 	.word	0x08001b81
 8001a7c:	08001b81 	.word	0x08001b81
 8001a80:	08001b81 	.word	0x08001b81
 8001a84:	08001b81 	.word	0x08001b81
 8001a88:	08001b45 	.word	0x08001b45
 8001a8c:	08001b4f 	.word	0x08001b4f
 8001a90:	08001b81 	.word	0x08001b81
 8001a94:	08001b81 	.word	0x08001b81
 8001a98:	08001b59 	.word	0x08001b59
 8001a9c:	08001b63 	.word	0x08001b63
 8001aa0:	08001b81 	.word	0x08001b81
 8001aa4:	08001b81 	.word	0x08001b81
 8001aa8:	08001b81 	.word	0x08001b81
 8001aac:	08001b6d 	.word	0x08001b6d
 8001ab0:	08001b81 	.word	0x08001b81
 8001ab4:	08001b77 	.word	0x08001b77
		{
		case USB_OTG_GINTSTS_SOF_Pos:											// SOF Received/sent Interrupt
			USB -> GINTSTS = (USB_OTG_GINTSTS_SOF);
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	2208      	movs	r2, #8
 8001abc:	615a      	str	r2, [r3, #20]
			USB_LL_Interrupts___Start_Of_Frame_Reveived(port_Number);
 8001abe:	79fb      	ldrb	r3, [r7, #7]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff ff91 	bl	80019e8 <USB_LL_Interrupts___Start_Of_Frame_Reveived>
			break;
 8001ac6:	e05b      	b.n	8001b80 <USB_LL_Interrupts___Interrupt_Handler+0x17c>

		case USB_OTG_GINTSTS_RXFLVL_Pos:										// RXFIFO nonempty (data ready to be read)
			USB -> GINTMSK &= ~(USB_OTG_GINTMSK_RXFLVLM);
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	f023 0210 	bic.w	r2, r3, #16
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	619a      	str	r2, [r3, #24]
			if(USB_LL_Hardware___GET_BIT_SEGMENT(USB -> GINTSTS, USB_OTG_GINTSTS_CMOD_Msk, USB_OTG_GINTSTS_CMOD_Pos))
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d004      	beq.n	8001aea <USB_LL_Interrupts___Interrupt_Handler+0xe6>
			{
				USB_LL_Interrupts_Host___Packet_Received(port_Number);
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f000 f8d4 	bl	8001c90 <USB_LL_Interrupts_Host___Packet_Received>
 8001ae8:	e003      	b.n	8001af2 <USB_LL_Interrupts___Interrupt_Handler+0xee>
			}
			else
			{
				USB_LL_Interrupts_Device___Packet_Received(port_Number);
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f000 f86f 	bl	8001bd0 <USB_LL_Interrupts_Device___Packet_Received>
			}
			USB -> GINTMSK |= (USB_OTG_GINTMSK_RXFLVLM);
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	f043 0210 	orr.w	r2, r3, #16
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	619a      	str	r2, [r3, #24]
			break;
 8001afe:	e03f      	b.n	8001b80 <USB_LL_Interrupts___Interrupt_Handler+0x17c>

		case USB_OTG_GINTSTS_BOUTNAKEFF_Pos:									// Global OUT NAK effective Interrupt
			break;

		case USB_OTG_GINTSTS_ESUSP_Pos:											// Early suspend (USB has been in idle state for 3ms)
			USB -> GINTSTS = (USB_OTG_GINTSTS_ESUSP);
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b06:	615a      	str	r2, [r3, #20]
			break;
 8001b08:	e03a      	b.n	8001b80 <USB_LL_Interrupts___Interrupt_Handler+0x17c>

		case USB_OTG_GINTSTS_USBSUSP_Pos:										// USB suspend (no data activity for 3ms)
			USB -> GINTSTS = (USB_OTG_GINTSTS_USBSUSP);
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b10:	615a      	str	r2, [r3, #20]
			break;
 8001b12:	e035      	b.n	8001b80 <USB_LL_Interrupts___Interrupt_Handler+0x17c>

		case USB_OTG_GINTSTS_USBRST_Pos:										// USB RESET (reset detected on USB core)
			USB -> GINTSTS = (USB_OTG_GINTSTS_USBRST);
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b1a:	615a      	str	r2, [r3, #20]
			break;
 8001b1c:	e030      	b.n	8001b80 <USB_LL_Interrupts___Interrupt_Handler+0x17c>

		case USB_OTG_GINTSTS_ENUMDNE_Pos:										// enumeration done (core knows the speed of the port)
			USB_LL_Interrupts_Device___Host_Connected(port_Number);				// Host connected (device mode)
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f000 f87f 	bl	8001c24 <USB_LL_Interrupts_Device___Host_Connected>
			USB -> GINTSTS = (USB_OTG_GINTSTS_ENUMDNE);
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b2c:	615a      	str	r2, [r3, #20]

			break;
 8001b2e:	e027      	b.n	8001b80 <USB_LL_Interrupts___Interrupt_Handler+0x17c>

		case USB_OTG_GINTSTS_ISOODRP_Pos:										// Isochronous OUT packet dropped interrupt
			USB -> GINTSTS = (USB_OTG_GINTSTS_ISOODRP);
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b36:	615a      	str	r2, [r3, #20]
			break;
 8001b38:	e022      	b.n	8001b80 <USB_LL_Interrupts___Interrupt_Handler+0x17c>

		case USB_OTG_GINTSTS_EOPF_Pos:											// end of periodic frame (the period specified in the periodic frame interval field of the device configuration register has been reached in the current frame)
			USB -> GINTSTS = (USB_OTG_GINTSTS_EOPF);
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b40:	615a      	str	r2, [r3, #20]
			break;
 8001b42:	e01d      	b.n	8001b80 <USB_LL_Interrupts___Interrupt_Handler+0x17c>
		case USB_OTG_GINTSTS_OEPINT_Pos:										// OUT End-point interrupt

			break;

		case USB_OTG_GINTSTS_IISOIXFR_Pos:										// Incomplete isochronous IN transfer Interrupt
			USB -> GINTSTS = (USB_OTG_GINTSTS_IISOIXFR);
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b4a:	615a      	str	r2, [r3, #20]
			break;
 8001b4c:	e018      	b.n	8001b80 <USB_LL_Interrupts___Interrupt_Handler+0x17c>

		case USB_OTG_GINTSTS_PXFR_INCOMPISOOUT_Pos:								// Incomplete periodic transfer
			USB -> GINTSTS = (USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b54:	615a      	str	r2, [r3, #20]
			break;
 8001b56:	e013      	b.n	8001b80 <USB_LL_Interrupts___Interrupt_Handler+0x17c>

		case USB_OTG_GINTSTS_HPRTINT_Pos:										// Host Port Interrupt
			USB_LL_Interrupts_Host___Port_Interrupt_Handler(port_Number);
 8001b58:	79fb      	ldrb	r3, [r7, #7]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f000 f97c 	bl	8001e58 <USB_LL_Interrupts_Host___Port_Interrupt_Handler>
			break;
 8001b60:	e00e      	b.n	8001b80 <USB_LL_Interrupts___Interrupt_Handler+0x17c>

		case USB_OTG_GINTSTS_HCINT_Pos:											// Host Channel Interrupt
			USB_LL_Interrupts_Host___Channel_Interrupt_Handler(port_Number);
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f000 f9c3 	bl	8001ef0 <USB_LL_Interrupts_Host___Channel_Interrupt_Handler>
			break;
 8001b6a:	e009      	b.n	8001b80 <USB_LL_Interrupts___Interrupt_Handler+0x17c>

		case USB_OTG_GINTSTS_PTXFE_Pos:											// Periodic TxFIFO empty / half empty Interrupt
			break;

		case USB_OTG_GINTSTS_DISCINT_Pos:										// Disconnect detected interrupt
			USB -> GINTSTS = (USB_OTG_GINTSTS_DISCINT);
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b72:	615a      	str	r2, [r3, #20]
			break;
 8001b74:	e004      	b.n	8001b80 <USB_LL_Interrupts___Interrupt_Handler+0x17c>

		case USB_OTG_GINTSTS_WKUINT_Pos:										// Resume/remote wake-up detected interrupt
			USB -> GINTSTS = (USB_OTG_GINTSTS_WKUINT);
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001b7c:	615a      	str	r2, [r3, #20]
			break;
 8001b7e:	bf00      	nop
	while((USB -> GINTSTS) & USB_LL_Interrupts___GLOBAL_INTERRUPTS_MASK)
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	695a      	ldr	r2, [r3, #20]
 8001b84:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <USB_LL_Interrupts___Interrupt_Handler+0x194>)
 8001b86:	4013      	ands	r3, r2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f47f af46 	bne.w	8001a1a <USB_LL_Interrupts___Interrupt_Handler+0x16>
		}
	}
}
 8001b8e:	bf00      	nop
 8001b90:	bf00      	nop
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	a33c7c98 	.word	0xa33c7c98

08001b9c <OTG_FS_IRQHandler>:

void OTG_FS_IRQHandler()
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
	USB_LL_Interrupts___Interrupt_Handler(USB_LL_Hardware___PORT_0);
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	f7ff ff2f 	bl	8001a04 <USB_LL_Interrupts___Interrupt_Handler>
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <OTG_HS_IRQHandler>:

void OTG_HS_IRQHandler()
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	af00      	add	r7, sp, #0
	USB_LL_Interrupts___Interrupt_Handler(USB_LL_Hardware___PORT_1);
 8001bae:	2001      	movs	r0, #1
 8001bb0:	f7ff ff28 	bl	8001a04 <USB_LL_Interrupts___Interrupt_Handler>
}
 8001bb4:	bf00      	nop
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <USB_LL_Interrupts_Device___Set_RX_Callback>:

#include "../Inc/USB_LL_Interrupts_Device.h"
#include "../Inc/USB_LL_Hardware.h"

void USB_LL_Interrupts_Device___Set_RX_Callback(uint8_t port_Number, void (*callback)(USB_LL_Interrupts_Device___RX_CALLBACK_PARAMETERS))
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	6039      	str	r1, [r7, #0]
 8001bc2:	71fb      	strb	r3, [r7, #7]

}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <USB_LL_Interrupts_Device___Packet_Received>:

void USB_LL_Interrupts_Device___Packet_Received(uint8_t port_Number)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b088      	sub	sp, #32
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	71fb      	strb	r3, [r7, #7]
	USB_OTG_GlobalTypeDef* 		USB = USB_LL_Hardware___Get_USB(port_Number);
 8001bda:	79fb      	ldrb	r3, [r7, #7]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff f93f 	bl	8000e60 <USB_LL_Hardware___Get_USB>
 8001be2:	61f8      	str	r0, [r7, #28]

	uint32_t 					RX_Status        	= USB -> GRXSTSP;
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	61bb      	str	r3, [r7, #24]
	uint8_t 					endpoint_Number     = USB_LL_Hardware___GET_BIT_SEGMENT(RX_Status, USB_OTG_GRXSTSP_EPNUM_Msk, USB_OTG_GRXSTSP_EPNUM_Pos);
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	75fb      	strb	r3, [r7, #23]

	USB_OTG_OUTEndpointTypeDef* USB_Out_Endpoint 	= USB_LL_Hardware___Get_USB_Device_OUT(port_Number, endpoint_Number);
 8001bf4:	7dfa      	ldrb	r2, [r7, #23]
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	4611      	mov	r1, r2
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff f984 	bl	8000f08 <USB_LL_Hardware___Get_USB_Device_OUT>
 8001c00:	6138      	str	r0, [r7, #16]

	uint8_t						packets_Remaining 	= USB_LL_Hardware___GET_BIT_SEGMENT(USB_Out_Endpoint -> DOEPTSIZ, USB_OTG_HCTSIZ_PKTCNT_Msk, USB_OTG_HCTSIZ_PKTCNT_Pos);
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	0cdb      	lsrs	r3, r3, #19
 8001c08:	73fb      	strb	r3, [r7, #15]
	uint8_t 					packet_Status 		= USB_LL_Hardware___GET_BIT_SEGMENT(RX_Status, USB_OTG_GRXSTSP_PKTSTS_Msk, USB_OTG_GRXSTSP_PKTSTS_Pos);
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	0c5b      	lsrs	r3, r3, #17
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	f003 030f 	and.w	r3, r3, #15
 8001c14:	73bb      	strb	r3, [r7, #14]
	uint8_t 					byte_Count			= USB_LL_Hardware___GET_BIT_SEGMENT(RX_Status, USB_OTG_GRXSTSP_BCNT_Msk, USB_OTG_GRXSTSP_BCNT_Pos);
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	091b      	lsrs	r3, r3, #4
 8001c1a:	737b      	strb	r3, [r7, #13]
				USB_RX_POP(port, endpoint, USB_Buffer_Ptr, RX_Status);
				Port[port].Device_Endpoint_Host_Channel_RX_Buffer_Fill_Level[endpoint] += byte_Count;
			}*/
		}
	}
}
 8001c1c:	bf00      	nop
 8001c1e:	3720      	adds	r7, #32
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <USB_LL_Interrupts_Device___Host_Connected>:

void USB_LL_Interrupts_Device___Host_Connected(uint8_t port_Number)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	73fb      	strb	r3, [r7, #15]
}
 8001c32:	bf00      	nop
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
	...

08001c40 <USB_LL_Interrupts_Host___Set_Channel_Status_Change_Flag>:
{
	host_Status[port_Number].channel_Status[channel_Number].status_Change_Flag = false;
}

void USB_LL_Interrupts_Host___Set_Channel_Status_Change_Flag(uint8_t port_Number, uint8_t channel_Number)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	460a      	mov	r2, r1
 8001c4a:	71fb      	strb	r3, [r7, #7]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	71bb      	strb	r3, [r7, #6]
	host_Status[port_Number].channel_Status[channel_Number].status_Change_Flag = true;
 8001c50:	79f9      	ldrb	r1, [r7, #7]
 8001c52:	79ba      	ldrb	r2, [r7, #6]
 8001c54:	480d      	ldr	r0, [pc, #52]	; (8001c8c <USB_LL_Interrupts_Host___Set_Channel_Status_Change_Flag+0x4c>)
 8001c56:	4613      	mov	r3, r2
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	4413      	add	r3, r2
 8001c5c:	222a      	movs	r2, #42	; 0x2a
 8001c5e:	fb01 f202 	mul.w	r2, r1, r2
 8001c62:	4413      	add	r3, r2
 8001c64:	4403      	add	r3, r0
 8001c66:	3306      	adds	r3, #6
 8001c68:	2201      	movs	r2, #1
 8001c6a:	701a      	strb	r2, [r3, #0]
	host_Status[port_Number].all_Channels_Status_Change_Flag = true;
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	4a07      	ldr	r2, [pc, #28]	; (8001c8c <USB_LL_Interrupts_Host___Set_Channel_Status_Change_Flag+0x4c>)
 8001c70:	212a      	movs	r1, #42	; 0x2a
 8001c72:	fb01 f303 	mul.w	r3, r1, r3
 8001c76:	4413      	add	r3, r2
 8001c78:	3305      	adds	r3, #5
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	701a      	strb	r2, [r3, #0]
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	20000270 	.word	0x20000270

08001c90 <USB_LL_Interrupts_Host___Packet_Received>:

void USB_LL_Interrupts_Host___Packet_Received(uint8_t port_Number)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b088      	sub	sp, #32
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	71fb      	strb	r3, [r7, #7]
	USB_OTG_GlobalTypeDef* 		USB 				= USB_LL_Hardware___Get_USB(port_Number);
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff f8df 	bl	8000e60 <USB_LL_Hardware___Get_USB>
 8001ca2:	61f8      	str	r0, [r7, #28]

	uint32_t 					RX_Status        	= USB -> GRXSTSP;
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
 8001ca8:	61bb      	str	r3, [r7, #24]
	uint8_t 					channel_Number     	= USB_LL_Hardware___GET_BIT_SEGMENT(RX_Status, USB_OTG_GRXSTSP_EPNUM_Msk, USB_OTG_GRXSTSP_EPNUM_Pos);
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	75fb      	strb	r3, [r7, #23]

	USB_OTG_HostChannelTypeDef* USB_Host_Channel 	= USB_LL_Hardware___Get_USB_Host_Channel(port_Number, channel_Number);
 8001cb4:	7dfa      	ldrb	r2, [r7, #23]
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	4611      	mov	r1, r2
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff f90e 	bl	8000edc <USB_LL_Hardware___Get_USB_Host_Channel>
 8001cc0:	6138      	str	r0, [r7, #16]

	uint8_t						packets_Remaining 	= USB_LL_Hardware___GET_BIT_SEGMENT(USB_Host_Channel -> HCTSIZ, USB_OTG_HCTSIZ_PKTCNT_Msk, USB_OTG_HCTSIZ_PKTCNT_Pos);
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	0cdb      	lsrs	r3, r3, #19
 8001cc8:	73fb      	strb	r3, [r7, #15]
	uint8_t 					packet_Status 		= USB_LL_Hardware___GET_BIT_SEGMENT(RX_Status, USB_OTG_GRXSTSP_PKTSTS_Msk, USB_OTG_GRXSTSP_PKTSTS_Pos);
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	0c5b      	lsrs	r3, r3, #17
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	f003 030f 	and.w	r3, r3, #15
 8001cd4:	73bb      	strb	r3, [r7, #14]
	uint8_t 					byte_Count			= USB_LL_Hardware___GET_BIT_SEGMENT(RX_Status, USB_OTG_GRXSTSP_BCNT_Msk, USB_OTG_GRXSTSP_BCNT_Pos);
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	091b      	lsrs	r3, r3, #4
 8001cda:	737b      	strb	r3, [r7, #13]

	if(packet_Status == USB_LL_Host___RX_PACKET_STATUS_DATA_PACKET_RECIEVED)
 8001cdc:	7bbb      	ldrb	r3, [r7, #14]
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d111      	bne.n	8001d06 <USB_LL_Interrupts_Host___Packet_Received+0x76>
	{
		if(byte_Count > 0)
 8001ce2:	7b7b      	ldrb	r3, [r7, #13]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d00e      	beq.n	8001d06 <USB_LL_Interrupts_Host___Packet_Received+0x76>
		{

			(void)USB_LL_Host___Channel_RX_POP(port_Number, channel_Number, RX_Status);
 8001ce8:	7df9      	ldrb	r1, [r7, #23]
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff fc02 	bl	80014f8 <USB_LL_Host___Channel_RX_POP>

			if(packets_Remaining > 0)
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d005      	beq.n	8001d06 <USB_LL_Interrupts_Host___Packet_Received+0x76>
			{
				USB_Host_Channel -> HCCHAR |= (USB_OTG_HCCHAR_CHENA);
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 8001d06:	bf00      	nop
 8001d08:	3720      	adds	r7, #32
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
	...

08001d10 <USB_LL_Interrupts_Host___Device_Connect_Detected>:


void USB_LL_Interrupts_Host___Device_Connect_Detected(uint8_t port_Number)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	71fb      	strb	r3, [r7, #7]
	USB_OTG_HostPortTypeDef*	USB_Host_Port 	= USB_LL_Hardware___Get_USB_Host_Port(port_Number);
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff f8cd 	bl	8000ebc <USB_LL_Hardware___Get_USB_Host_Port>
 8001d22:	6138      	str	r0, [r7, #16]
	USB_OTG_HostTypeDef* 		USB_Host 		= USB_LL_Hardware___Get_USB_Host(port_Number);
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff f8b8 	bl	8000e9c <USB_LL_Hardware___Get_USB_Host>
 8001d2c:	60f8      	str	r0, [r7, #12]
	if(!(USB_Host -> HCFG & USB_OTG_HCFG_FSLSPCS))
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0303 	and.w	r3, r3, #3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d10e      	bne.n	8001d58 <USB_LL_Interrupts_Host___Device_Connect_Detected+0x48>
	{
		USB_Host -> HFIR  = (USB_LL_HOST___CLOCK_CYCLES_IN_ONE_MILLISECOND_FRAME);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001d40:	605a      	str	r2, [r3, #4]
		USB_Host -> HCFG |= (USB_OTG_HCFG_FSLSPCS_0);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f043 0201 	orr.w	r2, r3, #1
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	601a      	str	r2, [r3, #0]
		USB_LL_Host___Reset_Port(port_Number);
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff faac 	bl	80012ae <USB_LL_Host___Reset_Port>
		host_Status[port_Number].is_Root_Device_Connection_Status_Change 	= true;
		host_Status[port_Number].is_Root_Device_Connected 					= true;
		host_Status[port_Number].is_Root_Device_Disconnected 				= false;
		host_Status[port_Number].root_Device_Speed 							= speed;
	}
}
 8001d56:	e03b      	b.n	8001dd0 <USB_LL_Interrupts_Host___Device_Connect_Detected+0xc0>
		uint8_t host_Speed = USB_LL_Hardware___GET_BIT_SEGMENT(USB_Host_Port -> HPRT, USB_OTG_HPRT_PSPD_Msk, USB_OTG_HPRT_PSPD_Pos);
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	0c5b      	lsrs	r3, r3, #17
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	f003 0303 	and.w	r3, r3, #3
 8001d64:	72fb      	strb	r3, [r7, #11]
		if(host_Speed == USB_LL_Host___HPRT_LOW_SPEED_VALUE)
 8001d66:	7afb      	ldrb	r3, [r7, #11]
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d102      	bne.n	8001d72 <USB_LL_Interrupts_Host___Device_Connect_Detected+0x62>
			speed = USB_LL_Interrupts_Host___LOW_SPEED_VALUE;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	75fb      	strb	r3, [r7, #23]
 8001d70:	e00a      	b.n	8001d88 <USB_LL_Interrupts_Host___Device_Connect_Detected+0x78>
		else if(host_Speed == USB_LL_Host___HPRT_FULL_SPEED_VALUE)
 8001d72:	7afb      	ldrb	r3, [r7, #11]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d102      	bne.n	8001d7e <USB_LL_Interrupts_Host___Device_Connect_Detected+0x6e>
			speed = USB_LL_Interrupts_Host___FULL_SPEED_VALUE;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	75fb      	strb	r3, [r7, #23]
 8001d7c:	e004      	b.n	8001d88 <USB_LL_Interrupts_Host___Device_Connect_Detected+0x78>
		else if(host_Speed == USB_LL_Host___HPRT_HIGH_SPEED_VALUE)
 8001d7e:	7afb      	ldrb	r3, [r7, #11]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <USB_LL_Interrupts_Host___Device_Connect_Detected+0x78>
			speed = USB_LL_Interrupts_Host___HIGH_SPEED_VALUE;
 8001d84:	2302      	movs	r3, #2
 8001d86:	75fb      	strb	r3, [r7, #23]
		host_Status[port_Number].is_Root_Device_Connection_Status_Change 	= true;
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	4a13      	ldr	r2, [pc, #76]	; (8001dd8 <USB_LL_Interrupts_Host___Device_Connect_Detected+0xc8>)
 8001d8c:	212a      	movs	r1, #42	; 0x2a
 8001d8e:	fb01 f303 	mul.w	r3, r1, r3
 8001d92:	4413      	add	r3, r2
 8001d94:	3301      	adds	r3, #1
 8001d96:	2201      	movs	r2, #1
 8001d98:	701a      	strb	r2, [r3, #0]
		host_Status[port_Number].is_Root_Device_Connected 					= true;
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	4a0e      	ldr	r2, [pc, #56]	; (8001dd8 <USB_LL_Interrupts_Host___Device_Connect_Detected+0xc8>)
 8001d9e:	212a      	movs	r1, #42	; 0x2a
 8001da0:	fb01 f303 	mul.w	r3, r1, r3
 8001da4:	4413      	add	r3, r2
 8001da6:	3302      	adds	r3, #2
 8001da8:	2201      	movs	r2, #1
 8001daa:	701a      	strb	r2, [r3, #0]
		host_Status[port_Number].is_Root_Device_Disconnected 				= false;
 8001dac:	79fb      	ldrb	r3, [r7, #7]
 8001dae:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <USB_LL_Interrupts_Host___Device_Connect_Detected+0xc8>)
 8001db0:	212a      	movs	r1, #42	; 0x2a
 8001db2:	fb01 f303 	mul.w	r3, r1, r3
 8001db6:	4413      	add	r3, r2
 8001db8:	3303      	adds	r3, #3
 8001dba:	2200      	movs	r2, #0
 8001dbc:	701a      	strb	r2, [r3, #0]
		host_Status[port_Number].root_Device_Speed 							= speed;
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
 8001dc0:	4a05      	ldr	r2, [pc, #20]	; (8001dd8 <USB_LL_Interrupts_Host___Device_Connect_Detected+0xc8>)
 8001dc2:	212a      	movs	r1, #42	; 0x2a
 8001dc4:	fb01 f303 	mul.w	r3, r1, r3
 8001dc8:	4413      	add	r3, r2
 8001dca:	3304      	adds	r3, #4
 8001dcc:	7dfa      	ldrb	r2, [r7, #23]
 8001dce:	701a      	strb	r2, [r3, #0]
}
 8001dd0:	bf00      	nop
 8001dd2:	3718      	adds	r7, #24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	20000270 	.word	0x20000270

08001ddc <USB_LL_Interrupts_Host___Device_Disconnect_Detected>:


void USB_LL_Interrupts_Host___Device_Disconnect_Detected(uint8_t port_Number)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	71fb      	strb	r3, [r7, #7]
	host_Status[port_Number].is_Root_Device_Connection_Status_Change 	= true;
 8001de6:	79fb      	ldrb	r3, [r7, #7]
 8001de8:	4a0f      	ldr	r2, [pc, #60]	; (8001e28 <USB_LL_Interrupts_Host___Device_Disconnect_Detected+0x4c>)
 8001dea:	212a      	movs	r1, #42	; 0x2a
 8001dec:	fb01 f303 	mul.w	r3, r1, r3
 8001df0:	4413      	add	r3, r2
 8001df2:	3301      	adds	r3, #1
 8001df4:	2201      	movs	r2, #1
 8001df6:	701a      	strb	r2, [r3, #0]
	host_Status[port_Number].is_Root_Device_Connected 					= 	false;
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	4a0b      	ldr	r2, [pc, #44]	; (8001e28 <USB_LL_Interrupts_Host___Device_Disconnect_Detected+0x4c>)
 8001dfc:	212a      	movs	r1, #42	; 0x2a
 8001dfe:	fb01 f303 	mul.w	r3, r1, r3
 8001e02:	4413      	add	r3, r2
 8001e04:	3302      	adds	r3, #2
 8001e06:	2200      	movs	r2, #0
 8001e08:	701a      	strb	r2, [r3, #0]
	host_Status[port_Number].is_Root_Device_Disconnected 				= 	true;
 8001e0a:	79fb      	ldrb	r3, [r7, #7]
 8001e0c:	4a06      	ldr	r2, [pc, #24]	; (8001e28 <USB_LL_Interrupts_Host___Device_Disconnect_Detected+0x4c>)
 8001e0e:	212a      	movs	r1, #42	; 0x2a
 8001e10:	fb01 f303 	mul.w	r3, r1, r3
 8001e14:	4413      	add	r3, r2
 8001e16:	3303      	adds	r3, #3
 8001e18:	2201      	movs	r2, #1
 8001e1a:	701a      	strb	r2, [r3, #0]
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	20000270 	.word	0x20000270

08001e2c <USB_LL_Interrupts_Host___Start_Of_Frame_Interrupt_Received>:

void USB_LL_Interrupts_Host___Start_Of_Frame_Interrupt_Received(uint8_t port_Number)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	71fb      	strb	r3, [r7, #7]
	host_Status[port_Number].is_Start_Of_Frame = true;
 8001e36:	79fb      	ldrb	r3, [r7, #7]
 8001e38:	4a06      	ldr	r2, [pc, #24]	; (8001e54 <USB_LL_Interrupts_Host___Start_Of_Frame_Interrupt_Received+0x28>)
 8001e3a:	212a      	movs	r1, #42	; 0x2a
 8001e3c:	fb01 f303 	mul.w	r3, r1, r3
 8001e40:	4413      	add	r3, r2
 8001e42:	2201      	movs	r2, #1
 8001e44:	701a      	strb	r2, [r3, #0]
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	20000270 	.word	0x20000270

08001e58 <USB_LL_Interrupts_Host___Port_Interrupt_Handler>:

void USB_LL_Interrupts_Host___Port_Interrupt_Handler(uint8_t port_Number)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	71fb      	strb	r3, [r7, #7]
	USB_OTG_HostPortTypeDef* USB_Host_Port = USB_LL_Hardware___Get_USB_Host_Port(port_Number);
 8001e62:	79fb      	ldrb	r3, [r7, #7]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff f829 	bl	8000ebc <USB_LL_Hardware___Get_USB_Host_Port>
 8001e6a:	6178      	str	r0, [r7, #20]

	while((USB_Host_Port -> HPRT) & USB_LL_Host___PORT_INTERRUPTS_MASK)
 8001e6c:	e034      	b.n	8001ed8 <USB_LL_Interrupts_Host___Port_Interrupt_Handler+0x80>
	{
		switch(POSITION_VAL((USB_Host_Port -> HPRT) & USB_LL_Host___PORT_INTERRUPTS_MASK))
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 030a 	and.w	r3, r3, #10
 8001e76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	fa93 f3a3 	rbit	r3, r3
 8001e7e:	60fb      	str	r3, [r7, #12]
  return result;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	fab3 f383 	clz	r3, r3
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d002      	beq.n	8001e92 <USB_LL_Interrupts_Host___Port_Interrupt_Handler+0x3a>
 8001e8c:	2b03      	cmp	r3, #3
 8001e8e:	d00b      	beq.n	8001ea8 <USB_LL_Interrupts_Host___Port_Interrupt_Handler+0x50>
 8001e90:	e022      	b.n	8001ed8 <USB_LL_Interrupts_Host___Port_Interrupt_Handler+0x80>
		{
		case(USB_OTG_HPRT_PCDET_Pos):
			USB_Host_Port -> HPRT |= (USB_OTG_HPRT_PCDET_Msk);
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f043 0202 	orr.w	r2, r3, #2
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	601a      	str	r2, [r3, #0]
			USB_LL_Host___Reset_Port(port_Number);
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff fa04 	bl	80012ae <USB_LL_Host___Reset_Port>
			break;
 8001ea6:	e017      	b.n	8001ed8 <USB_LL_Interrupts_Host___Port_Interrupt_Handler+0x80>

		case(USB_OTG_HPRT_PENCHNG_Pos):
			USB_Host_Port -> HPRT = (USB_Host_Port -> HPRT & ~(USB_LL_Host___HPRT_RC_W1_BITS)) | (USB_OTG_HPRT_PENCHNG_Msk);
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001eb0:	f043 0208 	orr.w	r2, r3, #8
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	601a      	str	r2, [r3, #0]
			if(USB_Host_Port -> HPRT & USB_OTG_HPRT_PCSTS)
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d004      	beq.n	8001ece <USB_LL_Interrupts_Host___Port_Interrupt_Handler+0x76>
			{
				USB_LL_Interrupts_Host___Device_Connect_Detected(port_Number);
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff ff22 	bl	8001d10 <USB_LL_Interrupts_Host___Device_Connect_Detected>
 8001ecc:	e003      	b.n	8001ed6 <USB_LL_Interrupts_Host___Port_Interrupt_Handler+0x7e>
			}
			else
			{
				USB_LL_Interrupts_Host___Device_Disconnect_Detected(port_Number);
 8001ece:	79fb      	ldrb	r3, [r7, #7]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff ff83 	bl	8001ddc <USB_LL_Interrupts_Host___Device_Disconnect_Detected>
			}
			break;
 8001ed6:	bf00      	nop
	while((USB_Host_Port -> HPRT) & USB_LL_Host___PORT_INTERRUPTS_MASK)
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 030a 	and.w	r3, r3, #10
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1c4      	bne.n	8001e6e <USB_LL_Interrupts_Host___Port_Interrupt_Handler+0x16>
		}
	}
}
 8001ee4:	bf00      	nop
 8001ee6:	bf00      	nop
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <USB_LL_Interrupts_Host___Channel_Interrupt_Handler>:

void USB_LL_Interrupts_Host___Channel_Interrupt_Handler(uint8_t port_Number)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08c      	sub	sp, #48	; 0x30
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	71fb      	strb	r3, [r7, #7]
	USB_OTG_HostTypeDef*		USB_Host 		= USB_LL_Hardware___Get_USB_Host(port_Number);
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7fe ffcd 	bl	8000e9c <USB_LL_Hardware___Get_USB_Host>
 8001f02:	62f8      	str	r0, [r7, #44]	; 0x2c
	uint8_t 					channel_Number 	= POSITION_VAL(USB_Host -> HAINT);
 8001f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f06:	695b      	ldr	r3, [r3, #20]
 8001f08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	fa93 f3a3 	rbit	r3, r3
 8001f10:	617b      	str	r3, [r7, #20]
  return result;
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	fab3 f383 	clz	r3, r3
 8001f18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	USB_OTG_HostChannelTypeDef* USB_Host_Ch 	= USB_LL_Hardware___Get_USB_Host_Channel(port_Number, channel_Number);
 8001f1c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001f20:	79fb      	ldrb	r3, [r7, #7]
 8001f22:	4611      	mov	r1, r2
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7fe ffd9 	bl	8000edc <USB_LL_Hardware___Get_USB_Host_Channel>
 8001f2a:	6278      	str	r0, [r7, #36]	; 0x24
	uint8_t 					device_Address 	= USB_LL_Hardware___GET_BIT_SEGMENT(USB_Host_Ch -> HCCHAR, USB_OTG_HCCHAR_DAD_Msk, USB_OTG_HCCHAR_DAD_Pos);
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	0d9b      	lsrs	r3, r3, #22
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	while((USB_Host_Ch -> HCINT) & USB_LL_Host___CHANNEL_INTERRUPTS_MASK)
 8001f3c:	e1cb      	b.n	80022d6 <USB_LL_Interrupts_Host___Channel_Interrupt_Handler+0x3e6>
	{
		switch(POSITION_VAL((USB_Host_Ch -> HCINT) & USB_LL_Host___CHANNEL_INTERRUPTS_MASK))
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	689a      	ldr	r2, [r3, #8]
 8001f42:	f240 23bb 	movw	r3, #699	; 0x2bb
 8001f46:	4013      	ands	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	fa93 f3a3 	rbit	r3, r3
 8001f50:	60fb      	str	r3, [r7, #12]
  return result;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	fab3 f383 	clz	r3, r3
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b09      	cmp	r3, #9
 8001f5c:	f200 81bb 	bhi.w	80022d6 <USB_LL_Interrupts_Host___Channel_Interrupt_Handler+0x3e6>
 8001f60:	a201      	add	r2, pc, #4	; (adr r2, 8001f68 <USB_LL_Interrupts_Host___Channel_Interrupt_Handler+0x78>)
 8001f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f66:	bf00      	nop
 8001f68:	08001f91 	.word	0x08001f91
 8001f6c:	08001fe5 	.word	0x08001fe5
 8001f70:	080022d7 	.word	0x080022d7
 8001f74:	08002043 	.word	0x08002043
 8001f78:	08002097 	.word	0x08002097
 8001f7c:	08002165 	.word	0x08002165
 8001f80:	080022d7 	.word	0x080022d7
 8001f84:	0800219f 	.word	0x0800219f
 8001f88:	080022d7 	.word	0x080022d7
 8001f8c:	08002281 	.word	0x08002281
		{
		case USB_OTG_HCINT_XFRC_Pos: 								// XFER Complete received
			USB_Host_Ch -> HCINT = USB_OTG_HCINT_XFRC_Msk;
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f92:	2201      	movs	r2, #1
 8001f94:	609a      	str	r2, [r3, #8]
			USB_LL_Interrupts_Host___Set_Channel_Status_Change_Flag(port_Number, channel_Number);
 8001f96:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001f9a:	79fb      	ldrb	r3, [r7, #7]
 8001f9c:	4611      	mov	r1, r2
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff fe4e 	bl	8001c40 <USB_LL_Interrupts_Host___Set_Channel_Status_Change_Flag>
			host_Status[port_Number].channel_Status[channel_Number].device_Address = device_Address;
 8001fa4:	79f9      	ldrb	r1, [r7, #7]
 8001fa6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001faa:	48b4      	ldr	r0, [pc, #720]	; (800227c <USB_LL_Interrupts_Host___Channel_Interrupt_Handler+0x38c>)
 8001fac:	4613      	mov	r3, r2
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	4413      	add	r3, r2
 8001fb2:	222a      	movs	r2, #42	; 0x2a
 8001fb4:	fb01 f202 	mul.w	r2, r1, r2
 8001fb8:	4413      	add	r3, r2
 8001fba:	4403      	add	r3, r0
 8001fbc:	3308      	adds	r3, #8
 8001fbe:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001fc2:	701a      	strb	r2, [r3, #0]
			host_Status[port_Number].channel_Status[channel_Number].status = USB_LL_Interrupts_Host___CHANNEL_STATUS_TRANSFER_COMPLETE;
 8001fc4:	79f9      	ldrb	r1, [r7, #7]
 8001fc6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001fca:	48ac      	ldr	r0, [pc, #688]	; (800227c <USB_LL_Interrupts_Host___Channel_Interrupt_Handler+0x38c>)
 8001fcc:	4613      	mov	r3, r2
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	4413      	add	r3, r2
 8001fd2:	222a      	movs	r2, #42	; 0x2a
 8001fd4:	fb01 f202 	mul.w	r2, r1, r2
 8001fd8:	4413      	add	r3, r2
 8001fda:	4403      	add	r3, r0
 8001fdc:	3307      	adds	r3, #7
 8001fde:	2200      	movs	r2, #0
 8001fe0:	701a      	strb	r2, [r3, #0]
			break;
 8001fe2:	e178      	b.n	80022d6 <USB_LL_Interrupts_Host___Channel_Interrupt_Handler+0x3e6>

		case USB_OTG_HCINT_CHH_Pos: 								// channel halted
			USB_Host_Ch -> HCINT = USB_OTG_HCINT_CHH_Msk;
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	609a      	str	r2, [r3, #8]
			if(USB_LL_Host___Channel_Get_Retry_After_Halt(port_Number, channel_Number))
 8001fea:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001fee:	79fb      	ldrb	r3, [r7, #7]
 8001ff0:	4611      	mov	r1, r2
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff f9c0 	bl	8001378 <USB_LL_Host___Channel_Get_Retry_After_Halt>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f000 816b 	beq.w	80022d6 <USB_LL_Interrupts_Host___Channel_Interrupt_Handler+0x3e6>
			{
				if (USB_LL_Host___Channel_Get_Transfer_Direction(port_Number, channel_Number) == USB_LL_Host___TRANSFER_DIRECTION_OUT)
 8002000:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	4611      	mov	r1, r2
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff fa55 	bl	80014b8 <USB_LL_Host___Channel_Get_Transfer_Direction>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d107      	bne.n	8002024 <USB_LL_Interrupts_Host___Channel_Interrupt_Handler+0x134>
				{
					USB_LL_Host___Channel_Retry_Transfer_Out(port_Number, channel_Number);
 8002014:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8002018:	79fb      	ldrb	r3, [r7, #7]
 800201a:	4611      	mov	r1, r2
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff fcbf 	bl	80019a0 <USB_LL_Host___Channel_Retry_Transfer_Out>
 8002022:	e006      	b.n	8002032 <USB_LL_Interrupts_Host___Channel_Interrupt_Handler+0x142>
				}
				else
				{
					USB_LL_Host___Channel_Retry_Transfer_In(port_Number, channel_Number);
 8002024:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8002028:	79fb      	ldrb	r3, [r7, #7]
 800202a:	4611      	mov	r1, r2
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff fcc9 	bl	80019c4 <USB_LL_Host___Channel_Retry_Transfer_In>
				}

				USB_LL_Host___Channel_Set_Retry_After_Halt(port_Number, channel_Number, false);
 8002032:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8002036:	79fb      	ldrb	r3, [r7, #7]
 8002038:	2200      	movs	r2, #0
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff fc8e 	bl	800195c <USB_LL_Host___Channel_Set_Retry_After_Halt>
			}
			break;
 8002040:	e149      	b.n	80022d6 <USB_LL_Interrupts_Host___Channel_Interrupt_Handler+0x3e6>

		case USB_OTG_HCINT_STALL_Pos: 								// channel Stall received
			USB_Host_Ch -> HCINT = USB_OTG_HCINT_STALL_Msk;
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	2208      	movs	r2, #8
 8002046:	609a      	str	r2, [r3, #8]
			USB_LL_Interrupts_Host___Set_Channel_Status_Change_Flag(port_Number, channel_Number);
 8002048:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800204c:	79fb      	ldrb	r3, [r7, #7]
 800204e:	4611      	mov	r1, r2
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff fdf5 	bl	8001c40 <USB_LL_Interrupts_Host___Set_Channel_Status_Change_Flag>
			host_Status[port_Number].channel_Status[channel_Number].device_Address = device_Address;
 8002056:	79f9      	ldrb	r1, [r7, #7]
 8002058:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800205c:	4887      	ldr	r0, [pc, #540]	; (800227c <USB_LL_Interrupts_Host___Channel_Interrupt_Handler+0x38c>)
 800205e:	4613      	mov	r3, r2
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	4413      	add	r3, r2
 8002064:	222a      	movs	r2, #42	; 0x2a
 8002066:	fb01 f202 	mul.w	r2, r1, r2
 800206a:	4413      	add	r3, r2
 800206c:	4403      	add	r3, r0
 800206e:	3308      	adds	r3, #8
 8002070:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002074:	701a      	strb	r2, [r3, #0]
			host_Status[port_Number].channel_Status[channel_Number].status = USB_LL_Interrupts_Host___CHANNEL_STATUS_TRANSFER_FAILED_STALL;
 8002076:	79f9      	ldrb	r1, [r7, #7]
 8002078:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800207c:	487f      	ldr	r0, [pc, #508]	; (800227c <USB_LL_Interrupts_Host___Channel_Interrupt_Handler+0x38c>)
 800207e:	4613      	mov	r3, r2
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	4413      	add	r3, r2
 8002084:	222a      	movs	r2, #42	; 0x2a
 8002086:	fb01 f202 	mul.w	r2, r1, r2
 800208a:	4413      	add	r3, r2
 800208c:	4403      	add	r3, r0
 800208e:	3307      	adds	r3, #7
 8002090:	2202      	movs	r2, #2
 8002092:	701a      	strb	r2, [r3, #0]
			break;
 8002094:	e11f      	b.n	80022d6 <USB_LL_Interrupts_Host___Channel_Interrupt_Handler+0x3e6>

		case USB_OTG_HCINT_NAK_Pos: 								// NAK received
		{
			USB_Host_Ch -> HCINT = USB_OTG_HCINT_NAK_Msk;
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	2210      	movs	r2, #16
 800209a:	609a      	str	r2, [r3, #8]
			uint16_t retries_Remaining = USB_LL_Host___Channel_Get_Retries_Remaining(port_Number, channel_Number);
 800209c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	4611      	mov	r1, r2
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff f925 	bl	80012f4 <USB_LL_Host___Channel_Get_Retries_Remaining>
 80020aa:	4603      	mov	r3, r0
 80020ac:	83fb      	strh	r3, [r7, #30]
			if (retries_Remaining > 0)
 80020ae:	8bfb      	ldrh	r3, [r7, #30]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d029      	beq.n	8002108 <USB_LL_Interrupts_Host___Channel_Interrupt_Handler+0x218>
			{
				if(USB_LL_Host___Channel_Get_Transfer_Direction(port_Number, channel_Number) == USB_LL_Host___TRANSFER_DIRECTION_OUT)
 80020b4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80020b8:	79fb      	ldrb	r3, [r7, #7]
 80020ba:	4611      	mov	r1, r2
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff f9fb 	bl	80014b8 <USB_LL_Host___Channel_Get_Transfer_Direction>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d10e      	bne.n	80020e6 <USB_LL_Interrupts_Host___Channel_Interrupt_Handler+0x1f6>
				{
					USB_LL_Host___Channel_Halt(port_Number, channel_Number);
 80020c8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80020cc:	79fb      	ldrb	r3, [r7, #7]
 80020ce:	4611      	mov	r1, r2
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff fab8 	bl	8001646 <USB_LL_Host___Channel_Halt>
					USB_LL_Host___Channel_Set_Retry_After_Halt(port_Number, channel_Number, true);
 80020d6:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	2201      	movs	r2, #1
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff fc3c 	bl	800195c <USB_LL_Host___Channel_Set_Retry_After_Halt>
 80020e4:	e006      	b.n	80020f4 <USB_LL_Interrupts_Host___Channel_Interrupt_Handler+0x204>
				}
				else
				{
					USB_LL_Host___Channel_Retry_Transfer_In(port_Number, channel_Number);
 80020e6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80020ea:	79fb      	ldrb	r3, [r7, #7]
 80020ec:	4611      	mov	r1, r2
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff fc68 	bl	80019c4 <USB_LL_Host___Channel_Retry_Transfer_In>
				}
				USB_LL_Host___Channel_Set_Retries_Remaining(port_Number, channel_Number, retries_Remaining-1);
 80020f4:	8bfb      	ldrh	r3, [r7, #30]
 80020f6:	3b01      	subs	r3, #1
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 80020fe:	79fb      	ldrb	r3, [r7, #7]
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff f917 	bl	8001334 <USB_LL_Host___Channel_Set_Retries_Remaining>
 8002106:	e0e6      	b.n	80022d6 <USB_LL_Interrupts_Host___Channel_Interrupt_Handler+0x3e6>
			}
			else
			{
				USB_LL_Host___Channel_Halt(port_Number, channel_Number);
 8002108:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	4611      	mov	r1, r2
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff fa98 	bl	8001646 <USB_LL_Host___Channel_Halt>
				USB_LL_Interrupts_Host___Set_Channel_Status_Change_Flag(port_Number, channel_Number);
 8002116:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800211a:	79fb      	ldrb	r3, [r7, #7]
 800211c:	4611      	mov	r1, r2
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff fd8e 	bl	8001c40 <USB_LL_Interrupts_Host___Set_Channel_Status_Change_Flag>
				host_Status[port_Number].channel_Status[channel_Number].device_Address = device_Address;
 8002124:	79f9      	ldrb	r1, [r7, #7]
 8002126:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800212a:	4854      	ldr	r0, [pc, #336]	; (800227c <USB_LL_Interrupts_Host___Channel_Interrupt_Handler+0x38c>)
 800212c:	4613      	mov	r3, r2
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	4413      	add	r3, r2
 8002132:	222a      	movs	r2, #42	; 0x2a
 8002134:	fb01 f202 	mul.w	r2, r1, r2
 8002138:	4413      	add	r3, r2
 800213a:	4403      	add	r3, r0
 800213c:	3308      	adds	r3, #8
 800213e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002142:	701a      	strb	r2, [r3, #0]
				host_Status[port_Number].channel_Status[channel_Number].status = USB_LL_Interrupts_Host___CHANNEL_STATUS_TRANSFER_FAILED_NAK;
 8002144:	79f9      	ldrb	r1, [r7, #7]
 8002146:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800214a:	484c      	ldr	r0, [pc, #304]	; (800227c <USB_LL_Interrupts_Host___Channel_Interrupt_Handler+0x38c>)
 800214c:	4613      	mov	r3, r2
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	4413      	add	r3, r2
 8002152:	222a      	movs	r2, #42	; 0x2a
 8002154:	fb01 f202 	mul.w	r2, r1, r2
 8002158:	4413      	add	r3, r2
 800215a:	4403      	add	r3, r0
 800215c:	3307      	adds	r3, #7
 800215e:	2201      	movs	r2, #1
 8002160:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002162:	e0b8      	b.n	80022d6 <USB_LL_Interrupts_Host___Channel_Interrupt_Handler+0x3e6>
		}

		case USB_OTG_HCINT_ACK_Pos: 										// ACK received
			USB_Host_Ch->HCINT = USB_OTG_HCINT_ACK_Msk;
 8002164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002166:	2220      	movs	r2, #32
 8002168:	609a      	str	r2, [r3, #8]
			if(USB_LL_Host___Channel_Get_Transfer_Direction(port_Number, channel_Number) == USB_LL_Host___TRANSFER_DIRECTION_OUT)
 800216a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800216e:	79fb      	ldrb	r3, [r7, #7]
 8002170:	4611      	mov	r1, r2
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff f9a0 	bl	80014b8 <USB_LL_Host___Channel_Get_Transfer_Direction>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d107      	bne.n	800218e <USB_LL_Interrupts_Host___Channel_Interrupt_Handler+0x29e>
			{
				USB_LL_Host___Channel_Out_Packet_Acknowledged(port_Number, channel_Number);
 800217e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	4611      	mov	r1, r2
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff faf4 	bl	8001774 <USB_LL_Host___Channel_Out_Packet_Acknowledged>
 800218c:	e0a3      	b.n	80022d6 <USB_LL_Interrupts_Host___Channel_Interrupt_Handler+0x3e6>
			}
			else
			{
				USB_LL_Host___Channel_In_Packet_Acknowledged(port_Number, channel_Number);
 800218e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8002192:	79fb      	ldrb	r3, [r7, #7]
 8002194:	4611      	mov	r1, r2
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff fb66 	bl	8001868 <USB_LL_Host___Channel_In_Packet_Acknowledged>
			}
			break;
 800219c:	e09b      	b.n	80022d6 <USB_LL_Interrupts_Host___Channel_Interrupt_Handler+0x3e6>

		case USB_OTG_HCINT_TXERR_Pos: 								// TX ERROR received
			USB_Host_Ch -> HCINT = USB_OTG_HCINT_TXERR_Msk;
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	2280      	movs	r2, #128	; 0x80
 80021a2:	609a      	str	r2, [r3, #8]
			uint16_t retries_Remaining = USB_LL_Host___Channel_Get_Retries_Remaining(port_Number, channel_Number);
 80021a4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80021a8:	79fb      	ldrb	r3, [r7, #7]
 80021aa:	4611      	mov	r1, r2
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff f8a1 	bl	80012f4 <USB_LL_Host___Channel_Get_Retries_Remaining>
 80021b2:	4603      	mov	r3, r0
 80021b4:	843b      	strh	r3, [r7, #32]
			if (retries_Remaining > 0)
 80021b6:	8c3b      	ldrh	r3, [r7, #32]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d030      	beq.n	800221e <USB_LL_Interrupts_Host___Channel_Interrupt_Handler+0x32e>
			{
				if(USB_LL_Host___Channel_Get_Transfer_Direction(port_Number, channel_Number) == USB_LL_Host___TRANSFER_DIRECTION_OUT)
 80021bc:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80021c0:	79fb      	ldrb	r3, [r7, #7]
 80021c2:	4611      	mov	r1, r2
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff f977 	bl	80014b8 <USB_LL_Host___Channel_Get_Transfer_Direction>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d10e      	bne.n	80021ee <USB_LL_Interrupts_Host___Channel_Interrupt_Handler+0x2fe>
				{
					USB_LL_Host___Channel_Halt(port_Number, channel_Number);
 80021d0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80021d4:	79fb      	ldrb	r3, [r7, #7]
 80021d6:	4611      	mov	r1, r2
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff fa34 	bl	8001646 <USB_LL_Host___Channel_Halt>
					USB_LL_Host___Channel_Set_Retry_After_Halt(port_Number, channel_Number, true);
 80021de:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 80021e2:	79fb      	ldrb	r3, [r7, #7]
 80021e4:	2201      	movs	r2, #1
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff fbb8 	bl	800195c <USB_LL_Host___Channel_Set_Retry_After_Halt>
 80021ec:	e00d      	b.n	800220a <USB_LL_Interrupts_Host___Channel_Interrupt_Handler+0x31a>
				}
				else
				{
					USB_LL_Host___Channel_Halt(port_Number, channel_Number);
 80021ee:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80021f2:	79fb      	ldrb	r3, [r7, #7]
 80021f4:	4611      	mov	r1, r2
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff fa25 	bl	8001646 <USB_LL_Host___Channel_Halt>
					USB_LL_Host___Channel_Set_Retry_After_Halt(port_Number, channel_Number, true);
 80021fc:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8002200:	79fb      	ldrb	r3, [r7, #7]
 8002202:	2201      	movs	r2, #1
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff fba9 	bl	800195c <USB_LL_Host___Channel_Set_Retry_After_Halt>
				}
				USB_LL_Host___Channel_Set_Retries_Remaining(port_Number, channel_Number, retries_Remaining-1);
 800220a:	8c3b      	ldrh	r3, [r7, #32]
 800220c:	3b01      	subs	r3, #1
 800220e:	b29a      	uxth	r2, r3
 8002210:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8002214:	79fb      	ldrb	r3, [r7, #7]
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff f88c 	bl	8001334 <USB_LL_Host___Channel_Set_Retries_Remaining>
 800221c:	e05b      	b.n	80022d6 <USB_LL_Interrupts_Host___Channel_Interrupt_Handler+0x3e6>
			}
			else
			{
				USB_LL_Host___Channel_Halt(port_Number, channel_Number);
 800221e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8002222:	79fb      	ldrb	r3, [r7, #7]
 8002224:	4611      	mov	r1, r2
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff fa0d 	bl	8001646 <USB_LL_Host___Channel_Halt>
				USB_LL_Interrupts_Host___Set_Channel_Status_Change_Flag(port_Number, channel_Number);
 800222c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	4611      	mov	r1, r2
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff fd03 	bl	8001c40 <USB_LL_Interrupts_Host___Set_Channel_Status_Change_Flag>
				host_Status[port_Number].channel_Status[channel_Number].device_Address = device_Address;
 800223a:	79f9      	ldrb	r1, [r7, #7]
 800223c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8002240:	480e      	ldr	r0, [pc, #56]	; (800227c <USB_LL_Interrupts_Host___Channel_Interrupt_Handler+0x38c>)
 8002242:	4613      	mov	r3, r2
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	4413      	add	r3, r2
 8002248:	222a      	movs	r2, #42	; 0x2a
 800224a:	fb01 f202 	mul.w	r2, r1, r2
 800224e:	4413      	add	r3, r2
 8002250:	4403      	add	r3, r0
 8002252:	3308      	adds	r3, #8
 8002254:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002258:	701a      	strb	r2, [r3, #0]
				host_Status[port_Number].channel_Status[channel_Number].status = USB_LL_Interrupts_Host___CHANNEL_STATUS_TRANSFER_FAILED_ERROR;
 800225a:	79f9      	ldrb	r1, [r7, #7]
 800225c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8002260:	4806      	ldr	r0, [pc, #24]	; (800227c <USB_LL_Interrupts_Host___Channel_Interrupt_Handler+0x38c>)
 8002262:	4613      	mov	r3, r2
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	4413      	add	r3, r2
 8002268:	222a      	movs	r2, #42	; 0x2a
 800226a:	fb01 f202 	mul.w	r2, r1, r2
 800226e:	4413      	add	r3, r2
 8002270:	4403      	add	r3, r0
 8002272:	3307      	adds	r3, #7
 8002274:	2203      	movs	r2, #3
 8002276:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002278:	e02d      	b.n	80022d6 <USB_LL_Interrupts_Host___Channel_Interrupt_Handler+0x3e6>
 800227a:	bf00      	nop
 800227c:	20000270 	.word	0x20000270

		case USB_OTG_HCINT_FRMOR_Pos: 								// Frame Error received
			USB_Host_Ch -> HCINT = USB_OTG_HCINT_FRMOR_Msk;
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002286:	609a      	str	r2, [r3, #8]
			USB_LL_Interrupts_Host___Set_Channel_Status_Change_Flag(port_Number, channel_Number);
 8002288:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800228c:	79fb      	ldrb	r3, [r7, #7]
 800228e:	4611      	mov	r1, r2
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff fcd5 	bl	8001c40 <USB_LL_Interrupts_Host___Set_Channel_Status_Change_Flag>
			host_Status[port_Number].channel_Status[channel_Number].device_Address = device_Address;
 8002296:	79f9      	ldrb	r1, [r7, #7]
 8002298:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800229c:	4814      	ldr	r0, [pc, #80]	; (80022f0 <USB_LL_Interrupts_Host___Channel_Interrupt_Handler+0x400>)
 800229e:	4613      	mov	r3, r2
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	4413      	add	r3, r2
 80022a4:	222a      	movs	r2, #42	; 0x2a
 80022a6:	fb01 f202 	mul.w	r2, r1, r2
 80022aa:	4413      	add	r3, r2
 80022ac:	4403      	add	r3, r0
 80022ae:	3308      	adds	r3, #8
 80022b0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80022b4:	701a      	strb	r2, [r3, #0]
			host_Status[port_Number].channel_Status[channel_Number].status = USB_LL_Interrupts_Host___CHANNEL_STATUS_TRANSFER_FAILED_ERROR;
 80022b6:	79f9      	ldrb	r1, [r7, #7]
 80022b8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80022bc:	480c      	ldr	r0, [pc, #48]	; (80022f0 <USB_LL_Interrupts_Host___Channel_Interrupt_Handler+0x400>)
 80022be:	4613      	mov	r3, r2
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	4413      	add	r3, r2
 80022c4:	222a      	movs	r2, #42	; 0x2a
 80022c6:	fb01 f202 	mul.w	r2, r1, r2
 80022ca:	4413      	add	r3, r2
 80022cc:	4403      	add	r3, r0
 80022ce:	3307      	adds	r3, #7
 80022d0:	2203      	movs	r2, #3
 80022d2:	701a      	strb	r2, [r3, #0]
			break;
 80022d4:	bf00      	nop
	while((USB_Host_Ch -> HCINT) & USB_LL_Host___CHANNEL_INTERRUPTS_MASK)
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	f240 23bb 	movw	r3, #699	; 0x2bb
 80022de:	4013      	ands	r3, r2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f47f ae2c 	bne.w	8001f3e <USB_LL_Interrupts_Host___Channel_Interrupt_Handler+0x4e>
		}
	}
}
 80022e6:	bf00      	nop
 80022e8:	bf00      	nop
 80022ea:	3730      	adds	r7, #48	; 0x30
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20000270 	.word	0x20000270

080022f4 <__libc_init_array>:
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	4d0d      	ldr	r5, [pc, #52]	; (800232c <__libc_init_array+0x38>)
 80022f8:	4c0d      	ldr	r4, [pc, #52]	; (8002330 <__libc_init_array+0x3c>)
 80022fa:	1b64      	subs	r4, r4, r5
 80022fc:	10a4      	asrs	r4, r4, #2
 80022fe:	2600      	movs	r6, #0
 8002300:	42a6      	cmp	r6, r4
 8002302:	d109      	bne.n	8002318 <__libc_init_array+0x24>
 8002304:	4d0b      	ldr	r5, [pc, #44]	; (8002334 <__libc_init_array+0x40>)
 8002306:	4c0c      	ldr	r4, [pc, #48]	; (8002338 <__libc_init_array+0x44>)
 8002308:	f000 f818 	bl	800233c <_init>
 800230c:	1b64      	subs	r4, r4, r5
 800230e:	10a4      	asrs	r4, r4, #2
 8002310:	2600      	movs	r6, #0
 8002312:	42a6      	cmp	r6, r4
 8002314:	d105      	bne.n	8002322 <__libc_init_array+0x2e>
 8002316:	bd70      	pop	{r4, r5, r6, pc}
 8002318:	f855 3b04 	ldr.w	r3, [r5], #4
 800231c:	4798      	blx	r3
 800231e:	3601      	adds	r6, #1
 8002320:	e7ee      	b.n	8002300 <__libc_init_array+0xc>
 8002322:	f855 3b04 	ldr.w	r3, [r5], #4
 8002326:	4798      	blx	r3
 8002328:	3601      	adds	r6, #1
 800232a:	e7f2      	b.n	8002312 <__libc_init_array+0x1e>
 800232c:	0800236c 	.word	0x0800236c
 8002330:	0800236c 	.word	0x0800236c
 8002334:	0800236c 	.word	0x0800236c
 8002338:	08002370 	.word	0x08002370

0800233c <_init>:
 800233c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800233e:	bf00      	nop
 8002340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002342:	bc08      	pop	{r3}
 8002344:	469e      	mov	lr, r3
 8002346:	4770      	bx	lr

08002348 <_fini>:
 8002348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800234a:	bf00      	nop
 800234c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800234e:	bc08      	pop	{r3}
 8002350:	469e      	mov	lr, r3
 8002352:	4770      	bx	lr
